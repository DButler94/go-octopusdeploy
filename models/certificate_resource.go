// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateResource certificate resource
// swagger:model CertificateResource
type CertificateResource struct {

	// archived
	// Format: date-time
	Archived strfmt.DateTime `json:"Archived,omitempty"`

	// certificate chain
	CertificateChain []*X509Certificate `json:"CertificateChain"`

	// certificate data
	CertificateData *SensitiveValue `json:"CertificateData,omitempty"`

	// certificate data format
	// Enum: [Pkcs12 Der Pem]
	CertificateDataFormat int32 `json:"CertificateDataFormat,omitempty"`

	// environment ids
	EnvironmentIds []string `json:"EnvironmentIds"`

	// has private key
	HasPrivateKey bool `json:"HasPrivateKey,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is expired
	IsExpired bool `json:"IsExpired,omitempty"`

	// issuer common name
	IssuerCommonName string `json:"IssuerCommonName,omitempty"`

	// issuer distinguished name
	IssuerDistinguishedName string `json:"IssuerDistinguishedName,omitempty"`

	// issuer organization
	IssuerOrganization string `json:"IssuerOrganization,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// not after
	// Format: date-time
	NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

	// not before
	// Format: date-time
	NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// password
	Password *SensitiveValue `json:"Password,omitempty"`

	// replaced by
	ReplacedBy string `json:"ReplacedBy,omitempty"`

	// self signed
	SelfSigned bool `json:"SelfSigned,omitempty"`

	// serial number
	SerialNumber string `json:"SerialNumber,omitempty"`

	// signature algorithm name
	SignatureAlgorithmName string `json:"SignatureAlgorithmName,omitempty"`

	// subject alternative names
	SubjectAlternativeNames []string `json:"SubjectAlternativeNames"`

	// subject common name
	SubjectCommonName string `json:"SubjectCommonName,omitempty"`

	// subject distinguished name
	SubjectDistinguishedName string `json:"SubjectDistinguishedName,omitempty"`

	// subject organization
	SubjectOrganization string `json:"SubjectOrganization,omitempty"`

	// tenant ids
	TenantIds []string `json:"TenantIds"`

	// tenant tags
	TenantTags []string `json:"TenantTags"`

	// tenanted deployment participation
	// Enum: [Untenanted TenantedOrUntenanted Tenanted]
	TenantedDeploymentParticipation int32 `json:"TenantedDeploymentParticipation,omitempty"`

	// thumbprint
	Thumbprint string `json:"Thumbprint,omitempty"`

	// version
	Version int32 `json:"Version,omitempty"`
}

// Validate validates this certificate resource
func (m *CertificateResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateDataFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantedDeploymentParticipation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateResource) validateArchived(formats strfmt.Registry) error {

	if swag.IsZero(m.Archived) { // not required
		return nil
	}

	if err := validate.FormatOf("Archived", "body", "date-time", m.Archived.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateResource) validateCertificateChain(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateChain) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateChain); i++ {
		if swag.IsZero(m.CertificateChain[i]) { // not required
			continue
		}

		if m.CertificateChain[i] != nil {
			if err := m.CertificateChain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CertificateChain" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateResource) validateCertificateData(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateData) { // not required
		return nil
	}

	if m.CertificateData != nil {
		if err := m.CertificateData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateData")
			}
			return err
		}
	}

	return nil
}

var certificateResourceTypeCertificateDataFormatPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["Pkcs12","Der","Pem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateResourceTypeCertificateDataFormatPropEnum = append(certificateResourceTypeCertificateDataFormatPropEnum, v)
	}
}

// prop value enum
func (m *CertificateResource) validateCertificateDataFormatEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, certificateResourceTypeCertificateDataFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CertificateResource) validateCertificateDataFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateDataFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateCertificateDataFormatEnum("CertificateDataFormat", "body", m.CertificateDataFormat); err != nil {
		return err
	}

	return nil
}

func (m *CertificateResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateResource) validateNotAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.NotAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("NotAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateResource) validateNotBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.NotBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("NotBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateResource) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if m.Password != nil {
		if err := m.Password.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Password")
			}
			return err
		}
	}

	return nil
}

var certificateResourceTypeTenantedDeploymentParticipationPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["Untenanted","TenantedOrUntenanted","Tenanted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateResourceTypeTenantedDeploymentParticipationPropEnum = append(certificateResourceTypeTenantedDeploymentParticipationPropEnum, v)
	}
}

// prop value enum
func (m *CertificateResource) validateTenantedDeploymentParticipationEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, certificateResourceTypeTenantedDeploymentParticipationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CertificateResource) validateTenantedDeploymentParticipation(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantedDeploymentParticipation) { // not required
		return nil
	}

	// value enum
	if err := m.validateTenantedDeploymentParticipationEnum("TenantedDeploymentParticipation", "body", m.TenantedDeploymentParticipation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateResource) UnmarshalBinary(b []byte) error {
	var res CertificateResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
