// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UserPermissionSetResourcePermissions user permission set resource permissions
// swagger:model userPermissionSetResourcePermissions
type UserPermissionSetResourcePermissions struct {

	// account create
	AccountCreate []*UserPermissionRestriction `json:"AccountCreate"`

	// account delete
	AccountDelete []*UserPermissionRestriction `json:"AccountDelete"`

	// account edit
	AccountEdit []*UserPermissionRestriction `json:"AccountEdit"`

	// account view
	AccountView []*UserPermissionRestriction `json:"AccountView"`

	// action template create
	ActionTemplateCreate []*UserPermissionRestriction `json:"ActionTemplateCreate"`

	// action template delete
	ActionTemplateDelete []*UserPermissionRestriction `json:"ActionTemplateDelete"`

	// action template edit
	ActionTemplateEdit []*UserPermissionRestriction `json:"ActionTemplateEdit"`

	// action template view
	ActionTemplateView []*UserPermissionRestriction `json:"ActionTemplateView"`

	// administer system
	AdministerSystem []*UserPermissionRestriction `json:"AdministerSystem"`

	// artifact create
	ArtifactCreate []*UserPermissionRestriction `json:"ArtifactCreate"`

	// artifact delete
	ArtifactDelete []*UserPermissionRestriction `json:"ArtifactDelete"`

	// artifact edit
	ArtifactEdit []*UserPermissionRestriction `json:"ArtifactEdit"`

	// artifact view
	ArtifactView []*UserPermissionRestriction `json:"ArtifactView"`

	// audit view
	AuditView []*UserPermissionRestriction `json:"AuditView"`

	// built in feed administer
	BuiltInFeedAdminister []*UserPermissionRestriction `json:"BuiltInFeedAdminister"`

	// built in feed download
	BuiltInFeedDownload []*UserPermissionRestriction `json:"BuiltInFeedDownload"`

	// built in feed push
	BuiltInFeedPush []*UserPermissionRestriction `json:"BuiltInFeedPush"`

	// certificate create
	CertificateCreate []*UserPermissionRestriction `json:"CertificateCreate"`

	// certificate delete
	CertificateDelete []*UserPermissionRestriction `json:"CertificateDelete"`

	// certificate edit
	CertificateEdit []*UserPermissionRestriction `json:"CertificateEdit"`

	// certificate export private key
	CertificateExportPrivateKey []*UserPermissionRestriction `json:"CertificateExportPrivateKey"`

	// certificate view
	CertificateView []*UserPermissionRestriction `json:"CertificateView"`

	// configure server
	ConfigureServer []*UserPermissionRestriction `json:"ConfigureServer"`

	// defect report
	DefectReport []*UserPermissionRestriction `json:"DefectReport"`

	// defect resolve
	DefectResolve []*UserPermissionRestriction `json:"DefectResolve"`

	// deployment create
	DeploymentCreate []*UserPermissionRestriction `json:"DeploymentCreate"`

	// deployment delete
	DeploymentDelete []*UserPermissionRestriction `json:"DeploymentDelete"`

	// deployment view
	DeploymentView []*UserPermissionRestriction `json:"DeploymentView"`

	// environment create
	EnvironmentCreate []*UserPermissionRestriction `json:"EnvironmentCreate"`

	// environment delete
	EnvironmentDelete []*UserPermissionRestriction `json:"EnvironmentDelete"`

	// environment edit
	EnvironmentEdit []*UserPermissionRestriction `json:"EnvironmentEdit"`

	// environment view
	EnvironmentView []*UserPermissionRestriction `json:"EnvironmentView"`

	// event view
	EventView []*UserPermissionRestriction `json:"EventView"`

	// feed edit
	FeedEdit []*UserPermissionRestriction `json:"FeedEdit"`

	// feed view
	FeedView []*UserPermissionRestriction `json:"FeedView"`

	// interruption submit
	InterruptionSubmit []*UserPermissionRestriction `json:"InterruptionSubmit"`

	// interruption view
	InterruptionView []*UserPermissionRestriction `json:"InterruptionView"`

	// interruption view submit responsible
	InterruptionViewSubmitResponsible []*UserPermissionRestriction `json:"InterruptionViewSubmitResponsible"`

	// library variable set create
	LibraryVariableSetCreate []*UserPermissionRestriction `json:"LibraryVariableSetCreate"`

	// library variable set delete
	LibraryVariableSetDelete []*UserPermissionRestriction `json:"LibraryVariableSetDelete"`

	// library variable set edit
	LibraryVariableSetEdit []*UserPermissionRestriction `json:"LibraryVariableSetEdit"`

	// library variable set view
	LibraryVariableSetView []*UserPermissionRestriction `json:"LibraryVariableSetView"`

	// lifecycle create
	LifecycleCreate []*UserPermissionRestriction `json:"LifecycleCreate"`

	// lifecycle delete
	LifecycleDelete []*UserPermissionRestriction `json:"LifecycleDelete"`

	// lifecycle edit
	LifecycleEdit []*UserPermissionRestriction `json:"LifecycleEdit"`

	// lifecycle view
	LifecycleView []*UserPermissionRestriction `json:"LifecycleView"`

	// machine create
	MachineCreate []*UserPermissionRestriction `json:"MachineCreate"`

	// machine delete
	MachineDelete []*UserPermissionRestriction `json:"MachineDelete"`

	// machine edit
	MachineEdit []*UserPermissionRestriction `json:"MachineEdit"`

	// machine policy create
	MachinePolicyCreate []*UserPermissionRestriction `json:"MachinePolicyCreate"`

	// machine policy delete
	MachinePolicyDelete []*UserPermissionRestriction `json:"MachinePolicyDelete"`

	// machine policy edit
	MachinePolicyEdit []*UserPermissionRestriction `json:"MachinePolicyEdit"`

	// machine policy view
	MachinePolicyView []*UserPermissionRestriction `json:"MachinePolicyView"`

	// machine view
	MachineView []*UserPermissionRestriction `json:"MachineView"`

	// none
	None []*UserPermissionRestriction `json:"None"`

	// process edit
	ProcessEdit []*UserPermissionRestriction `json:"ProcessEdit"`

	// process view
	ProcessView []*UserPermissionRestriction `json:"ProcessView"`

	// project create
	ProjectCreate []*UserPermissionRestriction `json:"ProjectCreate"`

	// project delete
	ProjectDelete []*UserPermissionRestriction `json:"ProjectDelete"`

	// project edit
	ProjectEdit []*UserPermissionRestriction `json:"ProjectEdit"`

	// project group create
	ProjectGroupCreate []*UserPermissionRestriction `json:"ProjectGroupCreate"`

	// project group delete
	ProjectGroupDelete []*UserPermissionRestriction `json:"ProjectGroupDelete"`

	// project group edit
	ProjectGroupEdit []*UserPermissionRestriction `json:"ProjectGroupEdit"`

	// project group view
	ProjectGroupView []*UserPermissionRestriction `json:"ProjectGroupView"`

	// project view
	ProjectView []*UserPermissionRestriction `json:"ProjectView"`

	// proxy create
	ProxyCreate []*UserPermissionRestriction `json:"ProxyCreate"`

	// proxy delete
	ProxyDelete []*UserPermissionRestriction `json:"ProxyDelete"`

	// proxy edit
	ProxyEdit []*UserPermissionRestriction `json:"ProxyEdit"`

	// proxy view
	ProxyView []*UserPermissionRestriction `json:"ProxyView"`

	// release create
	ReleaseCreate []*UserPermissionRestriction `json:"ReleaseCreate"`

	// release delete
	ReleaseDelete []*UserPermissionRestriction `json:"ReleaseDelete"`

	// release edit
	ReleaseEdit []*UserPermissionRestriction `json:"ReleaseEdit"`

	// release view
	ReleaseView []*UserPermissionRestriction `json:"ReleaseView"`

	// subscription create
	SubscriptionCreate []*UserPermissionRestriction `json:"SubscriptionCreate"`

	// subscription delete
	SubscriptionDelete []*UserPermissionRestriction `json:"SubscriptionDelete"`

	// subscription edit
	SubscriptionEdit []*UserPermissionRestriction `json:"SubscriptionEdit"`

	// subscription view
	SubscriptionView []*UserPermissionRestriction `json:"SubscriptionView"`

	// tag set create
	TagSetCreate []*UserPermissionRestriction `json:"TagSetCreate"`

	// tag set delete
	TagSetDelete []*UserPermissionRestriction `json:"TagSetDelete"`

	// tag set edit
	TagSetEdit []*UserPermissionRestriction `json:"TagSetEdit"`

	// task cancel
	TaskCancel []*UserPermissionRestriction `json:"TaskCancel"`

	// task create
	TaskCreate []*UserPermissionRestriction `json:"TaskCreate"`

	// task edit
	TaskEdit []*UserPermissionRestriction `json:"TaskEdit"`

	// task view
	TaskView []*UserPermissionRestriction `json:"TaskView"`

	// task view log
	TaskViewLog []*UserPermissionRestriction `json:"TaskViewLog"`

	// team create
	TeamCreate []*UserPermissionRestriction `json:"TeamCreate"`

	// team delete
	TeamDelete []*UserPermissionRestriction `json:"TeamDelete"`

	// team edit
	TeamEdit []*UserPermissionRestriction `json:"TeamEdit"`

	// team view
	TeamView []*UserPermissionRestriction `json:"TeamView"`

	// tenant create
	TenantCreate []*UserPermissionRestriction `json:"TenantCreate"`

	// tenant delete
	TenantDelete []*UserPermissionRestriction `json:"TenantDelete"`

	// tenant edit
	TenantEdit []*UserPermissionRestriction `json:"TenantEdit"`

	// tenant view
	TenantView []*UserPermissionRestriction `json:"TenantView"`

	// trigger create
	TriggerCreate []*UserPermissionRestriction `json:"TriggerCreate"`

	// trigger delete
	TriggerDelete []*UserPermissionRestriction `json:"TriggerDelete"`

	// trigger edit
	TriggerEdit []*UserPermissionRestriction `json:"TriggerEdit"`

	// trigger view
	TriggerView []*UserPermissionRestriction `json:"TriggerView"`

	// user edit
	UserEdit []*UserPermissionRestriction `json:"UserEdit"`

	// user invite
	UserInvite []*UserPermissionRestriction `json:"UserInvite"`

	// user role edit
	UserRoleEdit []*UserPermissionRestriction `json:"UserRoleEdit"`

	// user role view
	UserRoleView []*UserPermissionRestriction `json:"UserRoleView"`

	// user view
	UserView []*UserPermissionRestriction `json:"UserView"`

	// variable edit
	VariableEdit []*UserPermissionRestriction `json:"VariableEdit"`

	// variable edit unscoped
	VariableEditUnscoped []*UserPermissionRestriction `json:"VariableEditUnscoped"`

	// variable view
	VariableView []*UserPermissionRestriction `json:"VariableView"`

	// variable view unscoped
	VariableViewUnscoped []*UserPermissionRestriction `json:"VariableViewUnscoped"`
}

// Validate validates this user permission set resource permissions
func (m *UserPermissionSetResourcePermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministerSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedAdminister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedPush(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateExportPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigureServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefectReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefectResolve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionSubmit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionViewSubmitResponsible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskViewLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoleView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableEditUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableViewUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermissionSetResourcePermissions) validateAccountCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountCreate); i++ {
		if swag.IsZero(m.AccountCreate[i]) { // not required
			continue
		}

		if m.AccountCreate[i] != nil {
			if err := m.AccountCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AccountCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateAccountDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountDelete); i++ {
		if swag.IsZero(m.AccountDelete[i]) { // not required
			continue
		}

		if m.AccountDelete[i] != nil {
			if err := m.AccountDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AccountDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateAccountEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountEdit); i++ {
		if swag.IsZero(m.AccountEdit[i]) { // not required
			continue
		}

		if m.AccountEdit[i] != nil {
			if err := m.AccountEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AccountEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateAccountView(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountView) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountView); i++ {
		if swag.IsZero(m.AccountView[i]) { // not required
			continue
		}

		if m.AccountView[i] != nil {
			if err := m.AccountView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AccountView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateActionTemplateCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateCreate); i++ {
		if swag.IsZero(m.ActionTemplateCreate[i]) { // not required
			continue
		}

		if m.ActionTemplateCreate[i] != nil {
			if err := m.ActionTemplateCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionTemplateCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateActionTemplateDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateDelete); i++ {
		if swag.IsZero(m.ActionTemplateDelete[i]) { // not required
			continue
		}

		if m.ActionTemplateDelete[i] != nil {
			if err := m.ActionTemplateDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionTemplateDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateActionTemplateEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateEdit); i++ {
		if swag.IsZero(m.ActionTemplateEdit[i]) { // not required
			continue
		}

		if m.ActionTemplateEdit[i] != nil {
			if err := m.ActionTemplateEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionTemplateEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateActionTemplateView(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateView) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateView); i++ {
		if swag.IsZero(m.ActionTemplateView[i]) { // not required
			continue
		}

		if m.ActionTemplateView[i] != nil {
			if err := m.ActionTemplateView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionTemplateView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateAdministerSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministerSystem) { // not required
		return nil
	}

	for i := 0; i < len(m.AdministerSystem); i++ {
		if swag.IsZero(m.AdministerSystem[i]) { // not required
			continue
		}

		if m.AdministerSystem[i] != nil {
			if err := m.AdministerSystem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AdministerSystem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateArtifactCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactCreate); i++ {
		if swag.IsZero(m.ArtifactCreate[i]) { // not required
			continue
		}

		if m.ArtifactCreate[i] != nil {
			if err := m.ArtifactCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ArtifactCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateArtifactDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactDelete); i++ {
		if swag.IsZero(m.ArtifactDelete[i]) { // not required
			continue
		}

		if m.ArtifactDelete[i] != nil {
			if err := m.ArtifactDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ArtifactDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateArtifactEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactEdit); i++ {
		if swag.IsZero(m.ArtifactEdit[i]) { // not required
			continue
		}

		if m.ArtifactEdit[i] != nil {
			if err := m.ArtifactEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ArtifactEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateArtifactView(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactView) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactView); i++ {
		if swag.IsZero(m.ArtifactView[i]) { // not required
			continue
		}

		if m.ArtifactView[i] != nil {
			if err := m.ArtifactView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ArtifactView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateAuditView(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditView) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditView); i++ {
		if swag.IsZero(m.AuditView[i]) { // not required
			continue
		}

		if m.AuditView[i] != nil {
			if err := m.AuditView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AuditView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateBuiltInFeedAdminister(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedAdminister) { // not required
		return nil
	}

	for i := 0; i < len(m.BuiltInFeedAdminister); i++ {
		if swag.IsZero(m.BuiltInFeedAdminister[i]) { // not required
			continue
		}

		if m.BuiltInFeedAdminister[i] != nil {
			if err := m.BuiltInFeedAdminister[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BuiltInFeedAdminister" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateBuiltInFeedDownload(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedDownload) { // not required
		return nil
	}

	for i := 0; i < len(m.BuiltInFeedDownload); i++ {
		if swag.IsZero(m.BuiltInFeedDownload[i]) { // not required
			continue
		}

		if m.BuiltInFeedDownload[i] != nil {
			if err := m.BuiltInFeedDownload[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BuiltInFeedDownload" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateBuiltInFeedPush(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedPush) { // not required
		return nil
	}

	for i := 0; i < len(m.BuiltInFeedPush); i++ {
		if swag.IsZero(m.BuiltInFeedPush[i]) { // not required
			continue
		}

		if m.BuiltInFeedPush[i] != nil {
			if err := m.BuiltInFeedPush[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BuiltInFeedPush" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateCertificateCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateCreate); i++ {
		if swag.IsZero(m.CertificateCreate[i]) { // not required
			continue
		}

		if m.CertificateCreate[i] != nil {
			if err := m.CertificateCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CertificateCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateCertificateDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateDelete); i++ {
		if swag.IsZero(m.CertificateDelete[i]) { // not required
			continue
		}

		if m.CertificateDelete[i] != nil {
			if err := m.CertificateDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CertificateDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateCertificateEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateEdit); i++ {
		if swag.IsZero(m.CertificateEdit[i]) { // not required
			continue
		}

		if m.CertificateEdit[i] != nil {
			if err := m.CertificateEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CertificateEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateCertificateExportPrivateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateExportPrivateKey) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateExportPrivateKey); i++ {
		if swag.IsZero(m.CertificateExportPrivateKey[i]) { // not required
			continue
		}

		if m.CertificateExportPrivateKey[i] != nil {
			if err := m.CertificateExportPrivateKey[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CertificateExportPrivateKey" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateCertificateView(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateView) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateView); i++ {
		if swag.IsZero(m.CertificateView[i]) { // not required
			continue
		}

		if m.CertificateView[i] != nil {
			if err := m.CertificateView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CertificateView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateConfigureServer(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigureServer) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigureServer); i++ {
		if swag.IsZero(m.ConfigureServer[i]) { // not required
			continue
		}

		if m.ConfigureServer[i] != nil {
			if err := m.ConfigureServer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ConfigureServer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateDefectReport(formats strfmt.Registry) error {

	if swag.IsZero(m.DefectReport) { // not required
		return nil
	}

	for i := 0; i < len(m.DefectReport); i++ {
		if swag.IsZero(m.DefectReport[i]) { // not required
			continue
		}

		if m.DefectReport[i] != nil {
			if err := m.DefectReport[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DefectReport" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateDefectResolve(formats strfmt.Registry) error {

	if swag.IsZero(m.DefectResolve) { // not required
		return nil
	}

	for i := 0; i < len(m.DefectResolve); i++ {
		if swag.IsZero(m.DefectResolve[i]) { // not required
			continue
		}

		if m.DefectResolve[i] != nil {
			if err := m.DefectResolve[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DefectResolve" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateDeploymentCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentCreate); i++ {
		if swag.IsZero(m.DeploymentCreate[i]) { // not required
			continue
		}

		if m.DeploymentCreate[i] != nil {
			if err := m.DeploymentCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DeploymentCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateDeploymentDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentDelete); i++ {
		if swag.IsZero(m.DeploymentDelete[i]) { // not required
			continue
		}

		if m.DeploymentDelete[i] != nil {
			if err := m.DeploymentDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DeploymentDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateDeploymentView(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentView) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentView); i++ {
		if swag.IsZero(m.DeploymentView[i]) { // not required
			continue
		}

		if m.DeploymentView[i] != nil {
			if err := m.DeploymentView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DeploymentView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateEnvironmentCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentCreate); i++ {
		if swag.IsZero(m.EnvironmentCreate[i]) { // not required
			continue
		}

		if m.EnvironmentCreate[i] != nil {
			if err := m.EnvironmentCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EnvironmentCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateEnvironmentDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentDelete); i++ {
		if swag.IsZero(m.EnvironmentDelete[i]) { // not required
			continue
		}

		if m.EnvironmentDelete[i] != nil {
			if err := m.EnvironmentDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EnvironmentDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateEnvironmentEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentEdit); i++ {
		if swag.IsZero(m.EnvironmentEdit[i]) { // not required
			continue
		}

		if m.EnvironmentEdit[i] != nil {
			if err := m.EnvironmentEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EnvironmentEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateEnvironmentView(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentView) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentView); i++ {
		if swag.IsZero(m.EnvironmentView[i]) { // not required
			continue
		}

		if m.EnvironmentView[i] != nil {
			if err := m.EnvironmentView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EnvironmentView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateEventView(formats strfmt.Registry) error {

	if swag.IsZero(m.EventView) { // not required
		return nil
	}

	for i := 0; i < len(m.EventView); i++ {
		if swag.IsZero(m.EventView[i]) { // not required
			continue
		}

		if m.EventView[i] != nil {
			if err := m.EventView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EventView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateFeedEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.FeedEdit); i++ {
		if swag.IsZero(m.FeedEdit[i]) { // not required
			continue
		}

		if m.FeedEdit[i] != nil {
			if err := m.FeedEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeedEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateFeedView(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedView) { // not required
		return nil
	}

	for i := 0; i < len(m.FeedView); i++ {
		if swag.IsZero(m.FeedView[i]) { // not required
			continue
		}

		if m.FeedView[i] != nil {
			if err := m.FeedView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeedView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateInterruptionSubmit(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionSubmit) { // not required
		return nil
	}

	for i := 0; i < len(m.InterruptionSubmit); i++ {
		if swag.IsZero(m.InterruptionSubmit[i]) { // not required
			continue
		}

		if m.InterruptionSubmit[i] != nil {
			if err := m.InterruptionSubmit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InterruptionSubmit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateInterruptionView(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionView) { // not required
		return nil
	}

	for i := 0; i < len(m.InterruptionView); i++ {
		if swag.IsZero(m.InterruptionView[i]) { // not required
			continue
		}

		if m.InterruptionView[i] != nil {
			if err := m.InterruptionView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InterruptionView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateInterruptionViewSubmitResponsible(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionViewSubmitResponsible) { // not required
		return nil
	}

	for i := 0; i < len(m.InterruptionViewSubmitResponsible); i++ {
		if swag.IsZero(m.InterruptionViewSubmitResponsible[i]) { // not required
			continue
		}

		if m.InterruptionViewSubmitResponsible[i] != nil {
			if err := m.InterruptionViewSubmitResponsible[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InterruptionViewSubmitResponsible" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLibraryVariableSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetCreate); i++ {
		if swag.IsZero(m.LibraryVariableSetCreate[i]) { // not required
			continue
		}

		if m.LibraryVariableSetCreate[i] != nil {
			if err := m.LibraryVariableSetCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LibraryVariableSetCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLibraryVariableSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetDelete); i++ {
		if swag.IsZero(m.LibraryVariableSetDelete[i]) { // not required
			continue
		}

		if m.LibraryVariableSetDelete[i] != nil {
			if err := m.LibraryVariableSetDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LibraryVariableSetDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLibraryVariableSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetEdit); i++ {
		if swag.IsZero(m.LibraryVariableSetEdit[i]) { // not required
			continue
		}

		if m.LibraryVariableSetEdit[i] != nil {
			if err := m.LibraryVariableSetEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LibraryVariableSetEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLibraryVariableSetView(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetView) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetView); i++ {
		if swag.IsZero(m.LibraryVariableSetView[i]) { // not required
			continue
		}

		if m.LibraryVariableSetView[i] != nil {
			if err := m.LibraryVariableSetView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LibraryVariableSetView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLifecycleCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleCreate); i++ {
		if swag.IsZero(m.LifecycleCreate[i]) { // not required
			continue
		}

		if m.LifecycleCreate[i] != nil {
			if err := m.LifecycleCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LifecycleCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLifecycleDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleDelete); i++ {
		if swag.IsZero(m.LifecycleDelete[i]) { // not required
			continue
		}

		if m.LifecycleDelete[i] != nil {
			if err := m.LifecycleDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LifecycleDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLifecycleEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleEdit); i++ {
		if swag.IsZero(m.LifecycleEdit[i]) { // not required
			continue
		}

		if m.LifecycleEdit[i] != nil {
			if err := m.LifecycleEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LifecycleEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateLifecycleView(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleView) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleView); i++ {
		if swag.IsZero(m.LifecycleView[i]) { // not required
			continue
		}

		if m.LifecycleView[i] != nil {
			if err := m.LifecycleView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LifecycleView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachineCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineCreate); i++ {
		if swag.IsZero(m.MachineCreate[i]) { // not required
			continue
		}

		if m.MachineCreate[i] != nil {
			if err := m.MachineCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachineCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachineDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineDelete); i++ {
		if swag.IsZero(m.MachineDelete[i]) { // not required
			continue
		}

		if m.MachineDelete[i] != nil {
			if err := m.MachineDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachineDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachineEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineEdit); i++ {
		if swag.IsZero(m.MachineEdit[i]) { // not required
			continue
		}

		if m.MachineEdit[i] != nil {
			if err := m.MachineEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachineEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachinePolicyCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyCreate); i++ {
		if swag.IsZero(m.MachinePolicyCreate[i]) { // not required
			continue
		}

		if m.MachinePolicyCreate[i] != nil {
			if err := m.MachinePolicyCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachinePolicyCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachinePolicyDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyDelete); i++ {
		if swag.IsZero(m.MachinePolicyDelete[i]) { // not required
			continue
		}

		if m.MachinePolicyDelete[i] != nil {
			if err := m.MachinePolicyDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachinePolicyDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachinePolicyEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyEdit); i++ {
		if swag.IsZero(m.MachinePolicyEdit[i]) { // not required
			continue
		}

		if m.MachinePolicyEdit[i] != nil {
			if err := m.MachinePolicyEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachinePolicyEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachinePolicyView(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyView) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyView); i++ {
		if swag.IsZero(m.MachinePolicyView[i]) { // not required
			continue
		}

		if m.MachinePolicyView[i] != nil {
			if err := m.MachinePolicyView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachinePolicyView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateMachineView(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineView) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineView); i++ {
		if swag.IsZero(m.MachineView[i]) { // not required
			continue
		}

		if m.MachineView[i] != nil {
			if err := m.MachineView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MachineView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateNone(formats strfmt.Registry) error {

	if swag.IsZero(m.None) { // not required
		return nil
	}

	for i := 0; i < len(m.None); i++ {
		if swag.IsZero(m.None[i]) { // not required
			continue
		}

		if m.None[i] != nil {
			if err := m.None[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("None" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProcessEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessEdit); i++ {
		if swag.IsZero(m.ProcessEdit[i]) { // not required
			continue
		}

		if m.ProcessEdit[i] != nil {
			if err := m.ProcessEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProcessEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProcessView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessView); i++ {
		if swag.IsZero(m.ProcessView[i]) { // not required
			continue
		}

		if m.ProcessView[i] != nil {
			if err := m.ProcessView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProcessView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectCreate); i++ {
		if swag.IsZero(m.ProjectCreate[i]) { // not required
			continue
		}

		if m.ProjectCreate[i] != nil {
			if err := m.ProjectCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectDelete); i++ {
		if swag.IsZero(m.ProjectDelete[i]) { // not required
			continue
		}

		if m.ProjectDelete[i] != nil {
			if err := m.ProjectDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectEdit); i++ {
		if swag.IsZero(m.ProjectEdit[i]) { // not required
			continue
		}

		if m.ProjectEdit[i] != nil {
			if err := m.ProjectEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectGroupCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupCreate); i++ {
		if swag.IsZero(m.ProjectGroupCreate[i]) { // not required
			continue
		}

		if m.ProjectGroupCreate[i] != nil {
			if err := m.ProjectGroupCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectGroupCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectGroupDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupDelete); i++ {
		if swag.IsZero(m.ProjectGroupDelete[i]) { // not required
			continue
		}

		if m.ProjectGroupDelete[i] != nil {
			if err := m.ProjectGroupDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectGroupDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectGroupEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupEdit); i++ {
		if swag.IsZero(m.ProjectGroupEdit[i]) { // not required
			continue
		}

		if m.ProjectGroupEdit[i] != nil {
			if err := m.ProjectGroupEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectGroupEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectGroupView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupView); i++ {
		if swag.IsZero(m.ProjectGroupView[i]) { // not required
			continue
		}

		if m.ProjectGroupView[i] != nil {
			if err := m.ProjectGroupView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectGroupView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProjectView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectView); i++ {
		if swag.IsZero(m.ProjectView[i]) { // not required
			continue
		}

		if m.ProjectView[i] != nil {
			if err := m.ProjectView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProxyCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyCreate); i++ {
		if swag.IsZero(m.ProxyCreate[i]) { // not required
			continue
		}

		if m.ProxyCreate[i] != nil {
			if err := m.ProxyCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProxyCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProxyDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyDelete); i++ {
		if swag.IsZero(m.ProxyDelete[i]) { // not required
			continue
		}

		if m.ProxyDelete[i] != nil {
			if err := m.ProxyDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProxyDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProxyEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyEdit); i++ {
		if swag.IsZero(m.ProxyEdit[i]) { // not required
			continue
		}

		if m.ProxyEdit[i] != nil {
			if err := m.ProxyEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProxyEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateProxyView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyView); i++ {
		if swag.IsZero(m.ProxyView[i]) { // not required
			continue
		}

		if m.ProxyView[i] != nil {
			if err := m.ProxyView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProxyView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateReleaseCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseCreate); i++ {
		if swag.IsZero(m.ReleaseCreate[i]) { // not required
			continue
		}

		if m.ReleaseCreate[i] != nil {
			if err := m.ReleaseCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ReleaseCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateReleaseDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseDelete); i++ {
		if swag.IsZero(m.ReleaseDelete[i]) { // not required
			continue
		}

		if m.ReleaseDelete[i] != nil {
			if err := m.ReleaseDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ReleaseDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateReleaseEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseEdit); i++ {
		if swag.IsZero(m.ReleaseEdit[i]) { // not required
			continue
		}

		if m.ReleaseEdit[i] != nil {
			if err := m.ReleaseEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ReleaseEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateReleaseView(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseView) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseView); i++ {
		if swag.IsZero(m.ReleaseView[i]) { // not required
			continue
		}

		if m.ReleaseView[i] != nil {
			if err := m.ReleaseView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ReleaseView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateSubscriptionCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionCreate); i++ {
		if swag.IsZero(m.SubscriptionCreate[i]) { // not required
			continue
		}

		if m.SubscriptionCreate[i] != nil {
			if err := m.SubscriptionCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubscriptionCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateSubscriptionDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionDelete); i++ {
		if swag.IsZero(m.SubscriptionDelete[i]) { // not required
			continue
		}

		if m.SubscriptionDelete[i] != nil {
			if err := m.SubscriptionDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubscriptionDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateSubscriptionEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionEdit); i++ {
		if swag.IsZero(m.SubscriptionEdit[i]) { // not required
			continue
		}

		if m.SubscriptionEdit[i] != nil {
			if err := m.SubscriptionEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubscriptionEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateSubscriptionView(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionView) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionView); i++ {
		if swag.IsZero(m.SubscriptionView[i]) { // not required
			continue
		}

		if m.SubscriptionView[i] != nil {
			if err := m.SubscriptionView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubscriptionView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTagSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TagSetCreate); i++ {
		if swag.IsZero(m.TagSetCreate[i]) { // not required
			continue
		}

		if m.TagSetCreate[i] != nil {
			if err := m.TagSetCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TagSetCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTagSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TagSetDelete); i++ {
		if swag.IsZero(m.TagSetDelete[i]) { // not required
			continue
		}

		if m.TagSetDelete[i] != nil {
			if err := m.TagSetDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TagSetDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTagSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TagSetEdit); i++ {
		if swag.IsZero(m.TagSetEdit[i]) { // not required
			continue
		}

		if m.TagSetEdit[i] != nil {
			if err := m.TagSetEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TagSetEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTaskCancel(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskCancel) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskCancel); i++ {
		if swag.IsZero(m.TaskCancel[i]) { // not required
			continue
		}

		if m.TaskCancel[i] != nil {
			if err := m.TaskCancel[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaskCancel" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTaskCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskCreate); i++ {
		if swag.IsZero(m.TaskCreate[i]) { // not required
			continue
		}

		if m.TaskCreate[i] != nil {
			if err := m.TaskCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaskCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTaskEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskEdit); i++ {
		if swag.IsZero(m.TaskEdit[i]) { // not required
			continue
		}

		if m.TaskEdit[i] != nil {
			if err := m.TaskEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaskEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTaskView(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskView) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskView); i++ {
		if swag.IsZero(m.TaskView[i]) { // not required
			continue
		}

		if m.TaskView[i] != nil {
			if err := m.TaskView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaskView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTaskViewLog(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskViewLog) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskViewLog); i++ {
		if swag.IsZero(m.TaskViewLog[i]) { // not required
			continue
		}

		if m.TaskViewLog[i] != nil {
			if err := m.TaskViewLog[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaskViewLog" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTeamCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamCreate); i++ {
		if swag.IsZero(m.TeamCreate[i]) { // not required
			continue
		}

		if m.TeamCreate[i] != nil {
			if err := m.TeamCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TeamCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTeamDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamDelete); i++ {
		if swag.IsZero(m.TeamDelete[i]) { // not required
			continue
		}

		if m.TeamDelete[i] != nil {
			if err := m.TeamDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TeamDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTeamEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamEdit); i++ {
		if swag.IsZero(m.TeamEdit[i]) { // not required
			continue
		}

		if m.TeamEdit[i] != nil {
			if err := m.TeamEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TeamEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTeamView(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamView) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamView); i++ {
		if swag.IsZero(m.TeamView[i]) { // not required
			continue
		}

		if m.TeamView[i] != nil {
			if err := m.TeamView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TeamView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTenantCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantCreate); i++ {
		if swag.IsZero(m.TenantCreate[i]) { // not required
			continue
		}

		if m.TenantCreate[i] != nil {
			if err := m.TenantCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TenantCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTenantDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantDelete); i++ {
		if swag.IsZero(m.TenantDelete[i]) { // not required
			continue
		}

		if m.TenantDelete[i] != nil {
			if err := m.TenantDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TenantDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTenantEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantEdit); i++ {
		if swag.IsZero(m.TenantEdit[i]) { // not required
			continue
		}

		if m.TenantEdit[i] != nil {
			if err := m.TenantEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TenantEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTenantView(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantView) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantView); i++ {
		if swag.IsZero(m.TenantView[i]) { // not required
			continue
		}

		if m.TenantView[i] != nil {
			if err := m.TenantView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TenantView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTriggerCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCreate); i++ {
		if swag.IsZero(m.TriggerCreate[i]) { // not required
			continue
		}

		if m.TriggerCreate[i] != nil {
			if err := m.TriggerCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TriggerCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTriggerDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerDelete); i++ {
		if swag.IsZero(m.TriggerDelete[i]) { // not required
			continue
		}

		if m.TriggerDelete[i] != nil {
			if err := m.TriggerDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TriggerDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTriggerEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerEdit); i++ {
		if swag.IsZero(m.TriggerEdit[i]) { // not required
			continue
		}

		if m.TriggerEdit[i] != nil {
			if err := m.TriggerEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TriggerEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateTriggerView(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerView) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerView); i++ {
		if swag.IsZero(m.TriggerView[i]) { // not required
			continue
		}

		if m.TriggerView[i] != nil {
			if err := m.TriggerView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TriggerView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateUserEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.UserEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.UserEdit); i++ {
		if swag.IsZero(m.UserEdit[i]) { // not required
			continue
		}

		if m.UserEdit[i] != nil {
			if err := m.UserEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateUserInvite(formats strfmt.Registry) error {

	if swag.IsZero(m.UserInvite) { // not required
		return nil
	}

	for i := 0; i < len(m.UserInvite); i++ {
		if swag.IsZero(m.UserInvite[i]) { // not required
			continue
		}

		if m.UserInvite[i] != nil {
			if err := m.UserInvite[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserInvite" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateUserRoleEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.UserRoleEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.UserRoleEdit); i++ {
		if swag.IsZero(m.UserRoleEdit[i]) { // not required
			continue
		}

		if m.UserRoleEdit[i] != nil {
			if err := m.UserRoleEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserRoleEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateUserRoleView(formats strfmt.Registry) error {

	if swag.IsZero(m.UserRoleView) { // not required
		return nil
	}

	for i := 0; i < len(m.UserRoleView); i++ {
		if swag.IsZero(m.UserRoleView[i]) { // not required
			continue
		}

		if m.UserRoleView[i] != nil {
			if err := m.UserRoleView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserRoleView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateUserView(formats strfmt.Registry) error {

	if swag.IsZero(m.UserView) { // not required
		return nil
	}

	for i := 0; i < len(m.UserView); i++ {
		if swag.IsZero(m.UserView[i]) { // not required
			continue
		}

		if m.UserView[i] != nil {
			if err := m.UserView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateVariableEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableEdit); i++ {
		if swag.IsZero(m.VariableEdit[i]) { // not required
			continue
		}

		if m.VariableEdit[i] != nil {
			if err := m.VariableEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VariableEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateVariableEditUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableEditUnscoped) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableEditUnscoped); i++ {
		if swag.IsZero(m.VariableEditUnscoped[i]) { // not required
			continue
		}

		if m.VariableEditUnscoped[i] != nil {
			if err := m.VariableEditUnscoped[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VariableEditUnscoped" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateVariableView(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableView) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableView); i++ {
		if swag.IsZero(m.VariableView[i]) { // not required
			continue
		}

		if m.VariableView[i] != nil {
			if err := m.VariableView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VariableView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourcePermissions) validateVariableViewUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableViewUnscoped) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableViewUnscoped); i++ {
		if swag.IsZero(m.VariableViewUnscoped[i]) { // not required
			continue
		}

		if m.VariableViewUnscoped[i] != nil {
			if err := m.VariableViewUnscoped[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VariableViewUnscoped" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermissionSetResourcePermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermissionSetResourcePermissions) UnmarshalBinary(b []byte) error {
	var res UserPermissionSetResourcePermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
