// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentStepResource deployment step resource
// swagger:model DeploymentStepResource
type DeploymentStepResource struct {

	// actions
	// Read Only: true
	Actions []*DeploymentActionResource `json:"Actions"`

	// condition
	// Enum: [Success Failure Always Variable]
	Condition int32 `json:"Condition,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// package requirement
	// Enum: [LetOctopusDecide BeforePackageAcquisition AfterPackageAcquisition]
	PackageRequirement int32 `json:"PackageRequirement,omitempty"`

	// properties
	Properties DeploymentStepResourceProperties `json:"Properties,omitempty"`

	// start trigger
	// Enum: [StartAfterPrevious StartWithPrevious]
	StartTrigger int32 `json:"StartTrigger,omitempty"`
}

// Validate validates this deployment step resource
func (m *DeploymentStepResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageRequirement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentStepResource) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var deploymentStepResourceTypeConditionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["Success","Failure","Always","Variable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentStepResourceTypeConditionPropEnum = append(deploymentStepResourceTypeConditionPropEnum, v)
	}
}

// prop value enum
func (m *DeploymentStepResource) validateConditionEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, deploymentStepResourceTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentStepResource) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("Condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

var deploymentStepResourceTypePackageRequirementPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["LetOctopusDecide","BeforePackageAcquisition","AfterPackageAcquisition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentStepResourceTypePackageRequirementPropEnum = append(deploymentStepResourceTypePackageRequirementPropEnum, v)
	}
}

// prop value enum
func (m *DeploymentStepResource) validatePackageRequirementEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, deploymentStepResourceTypePackageRequirementPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentStepResource) validatePackageRequirement(formats strfmt.Registry) error {

	if swag.IsZero(m.PackageRequirement) { // not required
		return nil
	}

	// value enum
	if err := m.validatePackageRequirementEnum("PackageRequirement", "body", m.PackageRequirement); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentStepResource) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if err := m.Properties.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Properties")
		}
		return err
	}

	return nil
}

var deploymentStepResourceTypeStartTriggerPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["StartAfterPrevious","StartWithPrevious"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentStepResourceTypeStartTriggerPropEnum = append(deploymentStepResourceTypeStartTriggerPropEnum, v)
	}
}

// prop value enum
func (m *DeploymentStepResource) validateStartTriggerEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, deploymentStepResourceTypeStartTriggerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentStepResource) validateStartTrigger(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTrigger) { // not required
		return nil
	}

	// value enum
	if err := m.validateStartTriggerEnum("StartTrigger", "body", m.StartTrigger); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentStepResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentStepResource) UnmarshalBinary(b []byte) error {
	var res DeploymentStepResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
