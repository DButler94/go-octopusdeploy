// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhaseProgressionResource phase progression resource
// swagger:model PhaseProgressionResource
type PhaseProgressionResource struct {

	// automatic deployment targets
	AutomaticDeploymentTargets []string `json:"AutomaticDeploymentTargets"`

	// blocked
	Blocked bool `json:"Blocked,omitempty"`

	// deployments
	Deployments []*PhaseDeploymentResource `json:"Deployments"`

	// Id
	ID string `json:"Id,omitempty"`

	// is optional phase
	IsOptionalPhase bool `json:"IsOptionalPhase,omitempty"`

	// minimum environments before promotion
	MinimumEnvironmentsBeforePromotion int32 `json:"MinimumEnvironmentsBeforePromotion,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// optional deployment targets
	OptionalDeploymentTargets []string `json:"OptionalDeploymentTargets"`

	// progress
	// Enum: [Pending Current Complete]
	Progress int32 `json:"Progress,omitempty"`
}

// Validate validates this phase progression resource
func (m *PhaseProgressionResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhaseProgressionResource) validateDeployments(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var phaseProgressionResourceTypeProgressPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["Pending","Current","Complete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phaseProgressionResourceTypeProgressPropEnum = append(phaseProgressionResourceTypeProgressPropEnum, v)
	}
}

// prop value enum
func (m *PhaseProgressionResource) validateProgressEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, phaseProgressionResourceTypeProgressPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhaseProgressionResource) validateProgress(formats strfmt.Registry) error {

	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	// value enum
	if err := m.validateProgressEnum("Progress", "body", m.Progress); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhaseProgressionResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhaseProgressionResource) UnmarshalBinary(b []byte) error {
	var res PhaseProgressionResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
