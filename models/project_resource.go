// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectResource project resource
// swagger:model ProjectResource
type ProjectResource struct {

	// auto create release
	AutoCreateRelease bool `json:"AutoCreateRelease,omitempty"`

	// auto deploy release overrides
	// Read Only: true
	AutoDeployReleaseOverrides []*AutoDeployReleaseOverrideResource `json:"AutoDeployReleaseOverrides"`

	// default guided failure mode
	// Enum: [EnvironmentDefault Off On]
	DefaultGUIDEDFailureMode int32 `json:"DefaultGuidedFailureMode,omitempty"`

	// default to skip if already installed
	DefaultToSkipIfAlreadyInstalled bool `json:"DefaultToSkipIfAlreadyInstalled,omitempty"`

	// deployment process Id
	DeploymentProcessID string `json:"DeploymentProcessId,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// discrete channel release
	DiscreteChannelRelease bool `json:"DiscreteChannelRelease,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// included library variable set ids
	IncludedLibraryVariableSetIds []string `json:"IncludedLibraryVariableSetIds"`

	// is disabled
	IsDisabled bool `json:"IsDisabled,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// lifecycle Id
	LifecycleID string `json:"LifecycleId,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// project connectivity policy
	ProjectConnectivityPolicy *ProjectConnectivityPolicy `json:"ProjectConnectivityPolicy,omitempty"`

	// project group Id
	ProjectGroupID string `json:"ProjectGroupId,omitempty"`

	// release creation strategy
	ReleaseCreationStrategy *ReleaseCreationStrategyResource `json:"ReleaseCreationStrategy,omitempty"`

	// slug
	Slug string `json:"Slug,omitempty"`

	// templates
	Templates []*ActionTemplateParameterResource `json:"Templates"`

	// tenanted deployment mode
	// Enum: [Untenanted TenantedOrUntenanted Tenanted]
	TenantedDeploymentMode int32 `json:"TenantedDeploymentMode,omitempty"`

	// variable set Id
	VariableSetID string `json:"VariableSetId,omitempty"`

	// versioning strategy
	VersioningStrategy *VersioningStrategyResource `json:"VersioningStrategy,omitempty"`
}

// Validate validates this project resource
func (m *ProjectResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoDeployReleaseOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultGUIDEDFailureMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectConnectivityPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseCreationStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantedDeploymentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersioningStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectResource) validateAutoDeployReleaseOverrides(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoDeployReleaseOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.AutoDeployReleaseOverrides); i++ {
		if swag.IsZero(m.AutoDeployReleaseOverrides[i]) { // not required
			continue
		}

		if m.AutoDeployReleaseOverrides[i] != nil {
			if err := m.AutoDeployReleaseOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AutoDeployReleaseOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var projectResourceTypeDefaultGUIDEDFailureModePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["EnvironmentDefault","Off","On"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectResourceTypeDefaultGUIDEDFailureModePropEnum = append(projectResourceTypeDefaultGUIDEDFailureModePropEnum, v)
	}
}

// prop value enum
func (m *ProjectResource) validateDefaultGUIDEDFailureModeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectResourceTypeDefaultGUIDEDFailureModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectResource) validateDefaultGUIDEDFailureMode(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultGUIDEDFailureMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultGUIDEDFailureModeEnum("DefaultGuidedFailureMode", "body", m.DefaultGUIDEDFailureMode); err != nil {
		return err
	}

	return nil
}

func (m *ProjectResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectResource) validateProjectConnectivityPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectConnectivityPolicy) { // not required
		return nil
	}

	if m.ProjectConnectivityPolicy != nil {
		if err := m.ProjectConnectivityPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectConnectivityPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResource) validateReleaseCreationStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseCreationStrategy) { // not required
		return nil
	}

	if m.ReleaseCreationStrategy != nil {
		if err := m.ReleaseCreationStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReleaseCreationStrategy")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResource) validateTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.Templates) { // not required
		return nil
	}

	for i := 0; i < len(m.Templates); i++ {
		if swag.IsZero(m.Templates[i]) { // not required
			continue
		}

		if m.Templates[i] != nil {
			if err := m.Templates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var projectResourceTypeTenantedDeploymentModePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`["Untenanted","TenantedOrUntenanted","Tenanted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectResourceTypeTenantedDeploymentModePropEnum = append(projectResourceTypeTenantedDeploymentModePropEnum, v)
	}
}

// prop value enum
func (m *ProjectResource) validateTenantedDeploymentModeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectResourceTypeTenantedDeploymentModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectResource) validateTenantedDeploymentMode(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantedDeploymentMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateTenantedDeploymentModeEnum("TenantedDeploymentMode", "body", m.TenantedDeploymentMode); err != nil {
		return err
	}

	return nil
}

func (m *ProjectResource) validateVersioningStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.VersioningStrategy) { // not required
		return nil
	}

	if m.VersioningStrategy != nil {
		if err := m.VersioningStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VersioningStrategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectResource) UnmarshalBinary(b []byte) error {
	var res ProjectResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
