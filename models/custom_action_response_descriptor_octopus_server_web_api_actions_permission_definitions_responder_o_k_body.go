// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody custom action response descriptor octopus server web Api actions permission definitions responder o k body
// swagger:model customActionResponseDescriptorOctopusServerWebApiActionsPermissionDefinitionsResponderOKBody
type CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody struct {

	// account create
	AccountCreate *PermissionDescription `json:"AccountCreate,omitempty"`

	// account delete
	AccountDelete *PermissionDescription `json:"AccountDelete,omitempty"`

	// account edit
	AccountEdit *PermissionDescription `json:"AccountEdit,omitempty"`

	// account view
	AccountView *PermissionDescription `json:"AccountView,omitempty"`

	// action template create
	ActionTemplateCreate *PermissionDescription `json:"ActionTemplateCreate,omitempty"`

	// action template delete
	ActionTemplateDelete *PermissionDescription `json:"ActionTemplateDelete,omitempty"`

	// action template edit
	ActionTemplateEdit *PermissionDescription `json:"ActionTemplateEdit,omitempty"`

	// action template view
	ActionTemplateView *PermissionDescription `json:"ActionTemplateView,omitempty"`

	// administer system
	AdministerSystem *PermissionDescription `json:"AdministerSystem,omitempty"`

	// artifact create
	ArtifactCreate *PermissionDescription `json:"ArtifactCreate,omitempty"`

	// artifact delete
	ArtifactDelete *PermissionDescription `json:"ArtifactDelete,omitempty"`

	// artifact edit
	ArtifactEdit *PermissionDescription `json:"ArtifactEdit,omitempty"`

	// artifact view
	ArtifactView *PermissionDescription `json:"ArtifactView,omitempty"`

	// audit view
	AuditView *PermissionDescription `json:"AuditView,omitempty"`

	// built in feed administer
	BuiltInFeedAdminister *PermissionDescription `json:"BuiltInFeedAdminister,omitempty"`

	// built in feed download
	BuiltInFeedDownload *PermissionDescription `json:"BuiltInFeedDownload,omitempty"`

	// built in feed push
	BuiltInFeedPush *PermissionDescription `json:"BuiltInFeedPush,omitempty"`

	// certificate create
	CertificateCreate *PermissionDescription `json:"CertificateCreate,omitempty"`

	// certificate delete
	CertificateDelete *PermissionDescription `json:"CertificateDelete,omitempty"`

	// certificate edit
	CertificateEdit *PermissionDescription `json:"CertificateEdit,omitempty"`

	// certificate export private key
	CertificateExportPrivateKey *PermissionDescription `json:"CertificateExportPrivateKey,omitempty"`

	// certificate view
	CertificateView *PermissionDescription `json:"CertificateView,omitempty"`

	// configure server
	ConfigureServer *PermissionDescription `json:"ConfigureServer,omitempty"`

	// defect report
	DefectReport *PermissionDescription `json:"DefectReport,omitempty"`

	// defect resolve
	DefectResolve *PermissionDescription `json:"DefectResolve,omitempty"`

	// deployment create
	DeploymentCreate *PermissionDescription `json:"DeploymentCreate,omitempty"`

	// deployment delete
	DeploymentDelete *PermissionDescription `json:"DeploymentDelete,omitempty"`

	// deployment view
	DeploymentView *PermissionDescription `json:"DeploymentView,omitempty"`

	// environment create
	EnvironmentCreate *PermissionDescription `json:"EnvironmentCreate,omitempty"`

	// environment delete
	EnvironmentDelete *PermissionDescription `json:"EnvironmentDelete,omitempty"`

	// environment edit
	EnvironmentEdit *PermissionDescription `json:"EnvironmentEdit,omitempty"`

	// environment view
	EnvironmentView *PermissionDescription `json:"EnvironmentView,omitempty"`

	// event view
	EventView *PermissionDescription `json:"EventView,omitempty"`

	// feed edit
	FeedEdit *PermissionDescription `json:"FeedEdit,omitempty"`

	// feed view
	FeedView *PermissionDescription `json:"FeedView,omitempty"`

	// interruption submit
	InterruptionSubmit *PermissionDescription `json:"InterruptionSubmit,omitempty"`

	// interruption view
	InterruptionView *PermissionDescription `json:"InterruptionView,omitempty"`

	// interruption view submit responsible
	InterruptionViewSubmitResponsible *PermissionDescription `json:"InterruptionViewSubmitResponsible,omitempty"`

	// library variable set create
	LibraryVariableSetCreate *PermissionDescription `json:"LibraryVariableSetCreate,omitempty"`

	// library variable set delete
	LibraryVariableSetDelete *PermissionDescription `json:"LibraryVariableSetDelete,omitempty"`

	// library variable set edit
	LibraryVariableSetEdit *PermissionDescription `json:"LibraryVariableSetEdit,omitempty"`

	// library variable set view
	LibraryVariableSetView *PermissionDescription `json:"LibraryVariableSetView,omitempty"`

	// lifecycle create
	LifecycleCreate *PermissionDescription `json:"LifecycleCreate,omitempty"`

	// lifecycle delete
	LifecycleDelete *PermissionDescription `json:"LifecycleDelete,omitempty"`

	// lifecycle edit
	LifecycleEdit *PermissionDescription `json:"LifecycleEdit,omitempty"`

	// lifecycle view
	LifecycleView *PermissionDescription `json:"LifecycleView,omitempty"`

	// machine create
	MachineCreate *PermissionDescription `json:"MachineCreate,omitempty"`

	// machine delete
	MachineDelete *PermissionDescription `json:"MachineDelete,omitempty"`

	// machine edit
	MachineEdit *PermissionDescription `json:"MachineEdit,omitempty"`

	// machine policy create
	MachinePolicyCreate *PermissionDescription `json:"MachinePolicyCreate,omitempty"`

	// machine policy delete
	MachinePolicyDelete *PermissionDescription `json:"MachinePolicyDelete,omitempty"`

	// machine policy edit
	MachinePolicyEdit *PermissionDescription `json:"MachinePolicyEdit,omitempty"`

	// machine policy view
	MachinePolicyView *PermissionDescription `json:"MachinePolicyView,omitempty"`

	// machine view
	MachineView *PermissionDescription `json:"MachineView,omitempty"`

	// none
	None *PermissionDescription `json:"None,omitempty"`

	// process edit
	ProcessEdit *PermissionDescription `json:"ProcessEdit,omitempty"`

	// process view
	ProcessView *PermissionDescription `json:"ProcessView,omitempty"`

	// project create
	ProjectCreate *PermissionDescription `json:"ProjectCreate,omitempty"`

	// project delete
	ProjectDelete *PermissionDescription `json:"ProjectDelete,omitempty"`

	// project edit
	ProjectEdit *PermissionDescription `json:"ProjectEdit,omitempty"`

	// project group create
	ProjectGroupCreate *PermissionDescription `json:"ProjectGroupCreate,omitempty"`

	// project group delete
	ProjectGroupDelete *PermissionDescription `json:"ProjectGroupDelete,omitempty"`

	// project group edit
	ProjectGroupEdit *PermissionDescription `json:"ProjectGroupEdit,omitempty"`

	// project group view
	ProjectGroupView *PermissionDescription `json:"ProjectGroupView,omitempty"`

	// project view
	ProjectView *PermissionDescription `json:"ProjectView,omitempty"`

	// proxy create
	ProxyCreate *PermissionDescription `json:"ProxyCreate,omitempty"`

	// proxy delete
	ProxyDelete *PermissionDescription `json:"ProxyDelete,omitempty"`

	// proxy edit
	ProxyEdit *PermissionDescription `json:"ProxyEdit,omitempty"`

	// proxy view
	ProxyView *PermissionDescription `json:"ProxyView,omitempty"`

	// release create
	ReleaseCreate *PermissionDescription `json:"ReleaseCreate,omitempty"`

	// release delete
	ReleaseDelete *PermissionDescription `json:"ReleaseDelete,omitempty"`

	// release edit
	ReleaseEdit *PermissionDescription `json:"ReleaseEdit,omitempty"`

	// release view
	ReleaseView *PermissionDescription `json:"ReleaseView,omitempty"`

	// subscription create
	SubscriptionCreate *PermissionDescription `json:"SubscriptionCreate,omitempty"`

	// subscription delete
	SubscriptionDelete *PermissionDescription `json:"SubscriptionDelete,omitempty"`

	// subscription edit
	SubscriptionEdit *PermissionDescription `json:"SubscriptionEdit,omitempty"`

	// subscription view
	SubscriptionView *PermissionDescription `json:"SubscriptionView,omitempty"`

	// tag set create
	TagSetCreate *PermissionDescription `json:"TagSetCreate,omitempty"`

	// tag set delete
	TagSetDelete *PermissionDescription `json:"TagSetDelete,omitempty"`

	// tag set edit
	TagSetEdit *PermissionDescription `json:"TagSetEdit,omitempty"`

	// task cancel
	TaskCancel *PermissionDescription `json:"TaskCancel,omitempty"`

	// task create
	TaskCreate *PermissionDescription `json:"TaskCreate,omitempty"`

	// task edit
	TaskEdit *PermissionDescription `json:"TaskEdit,omitempty"`

	// task view
	TaskView *PermissionDescription `json:"TaskView,omitempty"`

	// task view log
	TaskViewLog *PermissionDescription `json:"TaskViewLog,omitempty"`

	// team create
	TeamCreate *PermissionDescription `json:"TeamCreate,omitempty"`

	// team delete
	TeamDelete *PermissionDescription `json:"TeamDelete,omitempty"`

	// team edit
	TeamEdit *PermissionDescription `json:"TeamEdit,omitempty"`

	// team view
	TeamView *PermissionDescription `json:"TeamView,omitempty"`

	// tenant create
	TenantCreate *PermissionDescription `json:"TenantCreate,omitempty"`

	// tenant delete
	TenantDelete *PermissionDescription `json:"TenantDelete,omitempty"`

	// tenant edit
	TenantEdit *PermissionDescription `json:"TenantEdit,omitempty"`

	// tenant view
	TenantView *PermissionDescription `json:"TenantView,omitempty"`

	// trigger create
	TriggerCreate *PermissionDescription `json:"TriggerCreate,omitempty"`

	// trigger delete
	TriggerDelete *PermissionDescription `json:"TriggerDelete,omitempty"`

	// trigger edit
	TriggerEdit *PermissionDescription `json:"TriggerEdit,omitempty"`

	// trigger view
	TriggerView *PermissionDescription `json:"TriggerView,omitempty"`

	// user edit
	UserEdit *PermissionDescription `json:"UserEdit,omitempty"`

	// user invite
	UserInvite *PermissionDescription `json:"UserInvite,omitempty"`

	// user role edit
	UserRoleEdit *PermissionDescription `json:"UserRoleEdit,omitempty"`

	// user role view
	UserRoleView *PermissionDescription `json:"UserRoleView,omitempty"`

	// user view
	UserView *PermissionDescription `json:"UserView,omitempty"`

	// variable edit
	VariableEdit *PermissionDescription `json:"VariableEdit,omitempty"`

	// variable edit unscoped
	VariableEditUnscoped *PermissionDescription `json:"VariableEditUnscoped,omitempty"`

	// variable view
	VariableView *PermissionDescription `json:"VariableView,omitempty"`

	// variable view unscoped
	VariableViewUnscoped *PermissionDescription `json:"VariableViewUnscoped,omitempty"`
}

// Validate validates this custom action response descriptor octopus server web Api actions permission definitions responder o k body
func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministerSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedAdminister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedPush(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateExportPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigureServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefectReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefectResolve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionSubmit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionViewSubmitResponsible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskViewLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoleView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableEditUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableViewUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateAccountCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountCreate) { // not required
		return nil
	}

	if m.AccountCreate != nil {
		if err := m.AccountCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateAccountDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountDelete) { // not required
		return nil
	}

	if m.AccountDelete != nil {
		if err := m.AccountDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateAccountEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountEdit) { // not required
		return nil
	}

	if m.AccountEdit != nil {
		if err := m.AccountEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateAccountView(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountView) { // not required
		return nil
	}

	if m.AccountView != nil {
		if err := m.AccountView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateActionTemplateCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateCreate) { // not required
		return nil
	}

	if m.ActionTemplateCreate != nil {
		if err := m.ActionTemplateCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionTemplateCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateActionTemplateDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateDelete) { // not required
		return nil
	}

	if m.ActionTemplateDelete != nil {
		if err := m.ActionTemplateDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionTemplateDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateActionTemplateEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateEdit) { // not required
		return nil
	}

	if m.ActionTemplateEdit != nil {
		if err := m.ActionTemplateEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionTemplateEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateActionTemplateView(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateView) { // not required
		return nil
	}

	if m.ActionTemplateView != nil {
		if err := m.ActionTemplateView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionTemplateView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateAdministerSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministerSystem) { // not required
		return nil
	}

	if m.AdministerSystem != nil {
		if err := m.AdministerSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdministerSystem")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateArtifactCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactCreate) { // not required
		return nil
	}

	if m.ArtifactCreate != nil {
		if err := m.ArtifactCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArtifactCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateArtifactDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactDelete) { // not required
		return nil
	}

	if m.ArtifactDelete != nil {
		if err := m.ArtifactDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArtifactDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateArtifactEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactEdit) { // not required
		return nil
	}

	if m.ArtifactEdit != nil {
		if err := m.ArtifactEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArtifactEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateArtifactView(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactView) { // not required
		return nil
	}

	if m.ArtifactView != nil {
		if err := m.ArtifactView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArtifactView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateAuditView(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditView) { // not required
		return nil
	}

	if m.AuditView != nil {
		if err := m.AuditView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AuditView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateBuiltInFeedAdminister(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedAdminister) { // not required
		return nil
	}

	if m.BuiltInFeedAdminister != nil {
		if err := m.BuiltInFeedAdminister.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BuiltInFeedAdminister")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateBuiltInFeedDownload(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedDownload) { // not required
		return nil
	}

	if m.BuiltInFeedDownload != nil {
		if err := m.BuiltInFeedDownload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BuiltInFeedDownload")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateBuiltInFeedPush(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedPush) { // not required
		return nil
	}

	if m.BuiltInFeedPush != nil {
		if err := m.BuiltInFeedPush.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BuiltInFeedPush")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateCertificateCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateCreate) { // not required
		return nil
	}

	if m.CertificateCreate != nil {
		if err := m.CertificateCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateCertificateDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateDelete) { // not required
		return nil
	}

	if m.CertificateDelete != nil {
		if err := m.CertificateDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateCertificateEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateEdit) { // not required
		return nil
	}

	if m.CertificateEdit != nil {
		if err := m.CertificateEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateCertificateExportPrivateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateExportPrivateKey) { // not required
		return nil
	}

	if m.CertificateExportPrivateKey != nil {
		if err := m.CertificateExportPrivateKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateExportPrivateKey")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateCertificateView(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateView) { // not required
		return nil
	}

	if m.CertificateView != nil {
		if err := m.CertificateView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateConfigureServer(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigureServer) { // not required
		return nil
	}

	if m.ConfigureServer != nil {
		if err := m.ConfigureServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigureServer")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateDefectReport(formats strfmt.Registry) error {

	if swag.IsZero(m.DefectReport) { // not required
		return nil
	}

	if m.DefectReport != nil {
		if err := m.DefectReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefectReport")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateDefectResolve(formats strfmt.Registry) error {

	if swag.IsZero(m.DefectResolve) { // not required
		return nil
	}

	if m.DefectResolve != nil {
		if err := m.DefectResolve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefectResolve")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateDeploymentCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentCreate) { // not required
		return nil
	}

	if m.DeploymentCreate != nil {
		if err := m.DeploymentCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeploymentCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateDeploymentDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentDelete) { // not required
		return nil
	}

	if m.DeploymentDelete != nil {
		if err := m.DeploymentDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeploymentDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateDeploymentView(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentView) { // not required
		return nil
	}

	if m.DeploymentView != nil {
		if err := m.DeploymentView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeploymentView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateEnvironmentCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentCreate) { // not required
		return nil
	}

	if m.EnvironmentCreate != nil {
		if err := m.EnvironmentCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EnvironmentCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateEnvironmentDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentDelete) { // not required
		return nil
	}

	if m.EnvironmentDelete != nil {
		if err := m.EnvironmentDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EnvironmentDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateEnvironmentEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentEdit) { // not required
		return nil
	}

	if m.EnvironmentEdit != nil {
		if err := m.EnvironmentEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EnvironmentEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateEnvironmentView(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentView) { // not required
		return nil
	}

	if m.EnvironmentView != nil {
		if err := m.EnvironmentView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EnvironmentView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateEventView(formats strfmt.Registry) error {

	if swag.IsZero(m.EventView) { // not required
		return nil
	}

	if m.EventView != nil {
		if err := m.EventView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EventView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateFeedEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedEdit) { // not required
		return nil
	}

	if m.FeedEdit != nil {
		if err := m.FeedEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeedEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateFeedView(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedView) { // not required
		return nil
	}

	if m.FeedView != nil {
		if err := m.FeedView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeedView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateInterruptionSubmit(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionSubmit) { // not required
		return nil
	}

	if m.InterruptionSubmit != nil {
		if err := m.InterruptionSubmit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InterruptionSubmit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateInterruptionView(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionView) { // not required
		return nil
	}

	if m.InterruptionView != nil {
		if err := m.InterruptionView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InterruptionView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateInterruptionViewSubmitResponsible(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionViewSubmitResponsible) { // not required
		return nil
	}

	if m.InterruptionViewSubmitResponsible != nil {
		if err := m.InterruptionViewSubmitResponsible.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InterruptionViewSubmitResponsible")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLibraryVariableSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetCreate) { // not required
		return nil
	}

	if m.LibraryVariableSetCreate != nil {
		if err := m.LibraryVariableSetCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LibraryVariableSetCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLibraryVariableSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetDelete) { // not required
		return nil
	}

	if m.LibraryVariableSetDelete != nil {
		if err := m.LibraryVariableSetDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LibraryVariableSetDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLibraryVariableSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetEdit) { // not required
		return nil
	}

	if m.LibraryVariableSetEdit != nil {
		if err := m.LibraryVariableSetEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LibraryVariableSetEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLibraryVariableSetView(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetView) { // not required
		return nil
	}

	if m.LibraryVariableSetView != nil {
		if err := m.LibraryVariableSetView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LibraryVariableSetView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLifecycleCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleCreate) { // not required
		return nil
	}

	if m.LifecycleCreate != nil {
		if err := m.LifecycleCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LifecycleCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLifecycleDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleDelete) { // not required
		return nil
	}

	if m.LifecycleDelete != nil {
		if err := m.LifecycleDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LifecycleDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLifecycleEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleEdit) { // not required
		return nil
	}

	if m.LifecycleEdit != nil {
		if err := m.LifecycleEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LifecycleEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateLifecycleView(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleView) { // not required
		return nil
	}

	if m.LifecycleView != nil {
		if err := m.LifecycleView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LifecycleView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachineCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineCreate) { // not required
		return nil
	}

	if m.MachineCreate != nil {
		if err := m.MachineCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachineCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachineDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineDelete) { // not required
		return nil
	}

	if m.MachineDelete != nil {
		if err := m.MachineDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachineDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachineEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineEdit) { // not required
		return nil
	}

	if m.MachineEdit != nil {
		if err := m.MachineEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachineEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachinePolicyCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyCreate) { // not required
		return nil
	}

	if m.MachinePolicyCreate != nil {
		if err := m.MachinePolicyCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachinePolicyCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachinePolicyDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyDelete) { // not required
		return nil
	}

	if m.MachinePolicyDelete != nil {
		if err := m.MachinePolicyDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachinePolicyDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachinePolicyEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyEdit) { // not required
		return nil
	}

	if m.MachinePolicyEdit != nil {
		if err := m.MachinePolicyEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachinePolicyEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachinePolicyView(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyView) { // not required
		return nil
	}

	if m.MachinePolicyView != nil {
		if err := m.MachinePolicyView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachinePolicyView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateMachineView(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineView) { // not required
		return nil
	}

	if m.MachineView != nil {
		if err := m.MachineView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MachineView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateNone(formats strfmt.Registry) error {

	if swag.IsZero(m.None) { // not required
		return nil
	}

	if m.None != nil {
		if err := m.None.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("None")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProcessEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessEdit) { // not required
		return nil
	}

	if m.ProcessEdit != nil {
		if err := m.ProcessEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProcessEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProcessView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessView) { // not required
		return nil
	}

	if m.ProcessView != nil {
		if err := m.ProcessView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProcessView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectCreate) { // not required
		return nil
	}

	if m.ProjectCreate != nil {
		if err := m.ProjectCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectDelete) { // not required
		return nil
	}

	if m.ProjectDelete != nil {
		if err := m.ProjectDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectEdit) { // not required
		return nil
	}

	if m.ProjectEdit != nil {
		if err := m.ProjectEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectGroupCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupCreate) { // not required
		return nil
	}

	if m.ProjectGroupCreate != nil {
		if err := m.ProjectGroupCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectGroupCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectGroupDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupDelete) { // not required
		return nil
	}

	if m.ProjectGroupDelete != nil {
		if err := m.ProjectGroupDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectGroupDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectGroupEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupEdit) { // not required
		return nil
	}

	if m.ProjectGroupEdit != nil {
		if err := m.ProjectGroupEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectGroupEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectGroupView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupView) { // not required
		return nil
	}

	if m.ProjectGroupView != nil {
		if err := m.ProjectGroupView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectGroupView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProjectView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectView) { // not required
		return nil
	}

	if m.ProjectView != nil {
		if err := m.ProjectView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProjectView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProxyCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyCreate) { // not required
		return nil
	}

	if m.ProxyCreate != nil {
		if err := m.ProxyCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProxyCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProxyDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyDelete) { // not required
		return nil
	}

	if m.ProxyDelete != nil {
		if err := m.ProxyDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProxyDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProxyEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyEdit) { // not required
		return nil
	}

	if m.ProxyEdit != nil {
		if err := m.ProxyEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProxyEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateProxyView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyView) { // not required
		return nil
	}

	if m.ProxyView != nil {
		if err := m.ProxyView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProxyView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateReleaseCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseCreate) { // not required
		return nil
	}

	if m.ReleaseCreate != nil {
		if err := m.ReleaseCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReleaseCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateReleaseDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDelete) { // not required
		return nil
	}

	if m.ReleaseDelete != nil {
		if err := m.ReleaseDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReleaseDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateReleaseEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseEdit) { // not required
		return nil
	}

	if m.ReleaseEdit != nil {
		if err := m.ReleaseEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReleaseEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateReleaseView(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseView) { // not required
		return nil
	}

	if m.ReleaseView != nil {
		if err := m.ReleaseView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReleaseView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateSubscriptionCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionCreate) { // not required
		return nil
	}

	if m.SubscriptionCreate != nil {
		if err := m.SubscriptionCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubscriptionCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateSubscriptionDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionDelete) { // not required
		return nil
	}

	if m.SubscriptionDelete != nil {
		if err := m.SubscriptionDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubscriptionDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateSubscriptionEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionEdit) { // not required
		return nil
	}

	if m.SubscriptionEdit != nil {
		if err := m.SubscriptionEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubscriptionEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateSubscriptionView(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionView) { // not required
		return nil
	}

	if m.SubscriptionView != nil {
		if err := m.SubscriptionView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubscriptionView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTagSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetCreate) { // not required
		return nil
	}

	if m.TagSetCreate != nil {
		if err := m.TagSetCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TagSetCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTagSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetDelete) { // not required
		return nil
	}

	if m.TagSetDelete != nil {
		if err := m.TagSetDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TagSetDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTagSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetEdit) { // not required
		return nil
	}

	if m.TagSetEdit != nil {
		if err := m.TagSetEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TagSetEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTaskCancel(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskCancel) { // not required
		return nil
	}

	if m.TaskCancel != nil {
		if err := m.TaskCancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskCancel")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTaskCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskCreate) { // not required
		return nil
	}

	if m.TaskCreate != nil {
		if err := m.TaskCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTaskEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskEdit) { // not required
		return nil
	}

	if m.TaskEdit != nil {
		if err := m.TaskEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTaskView(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskView) { // not required
		return nil
	}

	if m.TaskView != nil {
		if err := m.TaskView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTaskViewLog(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskViewLog) { // not required
		return nil
	}

	if m.TaskViewLog != nil {
		if err := m.TaskViewLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskViewLog")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTeamCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamCreate) { // not required
		return nil
	}

	if m.TeamCreate != nil {
		if err := m.TeamCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TeamCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTeamDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamDelete) { // not required
		return nil
	}

	if m.TeamDelete != nil {
		if err := m.TeamDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TeamDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTeamEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamEdit) { // not required
		return nil
	}

	if m.TeamEdit != nil {
		if err := m.TeamEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TeamEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTeamView(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamView) { // not required
		return nil
	}

	if m.TeamView != nil {
		if err := m.TeamView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TeamView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTenantCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantCreate) { // not required
		return nil
	}

	if m.TenantCreate != nil {
		if err := m.TenantCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TenantCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTenantDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantDelete) { // not required
		return nil
	}

	if m.TenantDelete != nil {
		if err := m.TenantDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TenantDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTenantEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantEdit) { // not required
		return nil
	}

	if m.TenantEdit != nil {
		if err := m.TenantEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TenantEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTenantView(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantView) { // not required
		return nil
	}

	if m.TenantView != nil {
		if err := m.TenantView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TenantView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTriggerCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCreate) { // not required
		return nil
	}

	if m.TriggerCreate != nil {
		if err := m.TriggerCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TriggerCreate")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTriggerDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerDelete) { // not required
		return nil
	}

	if m.TriggerDelete != nil {
		if err := m.TriggerDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TriggerDelete")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTriggerEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerEdit) { // not required
		return nil
	}

	if m.TriggerEdit != nil {
		if err := m.TriggerEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TriggerEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateTriggerView(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerView) { // not required
		return nil
	}

	if m.TriggerView != nil {
		if err := m.TriggerView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TriggerView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateUserEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.UserEdit) { // not required
		return nil
	}

	if m.UserEdit != nil {
		if err := m.UserEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateUserInvite(formats strfmt.Registry) error {

	if swag.IsZero(m.UserInvite) { // not required
		return nil
	}

	if m.UserInvite != nil {
		if err := m.UserInvite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserInvite")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateUserRoleEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.UserRoleEdit) { // not required
		return nil
	}

	if m.UserRoleEdit != nil {
		if err := m.UserRoleEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserRoleEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateUserRoleView(formats strfmt.Registry) error {

	if swag.IsZero(m.UserRoleView) { // not required
		return nil
	}

	if m.UserRoleView != nil {
		if err := m.UserRoleView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserRoleView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateUserView(formats strfmt.Registry) error {

	if swag.IsZero(m.UserView) { // not required
		return nil
	}

	if m.UserView != nil {
		if err := m.UserView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateVariableEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableEdit) { // not required
		return nil
	}

	if m.VariableEdit != nil {
		if err := m.VariableEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VariableEdit")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateVariableEditUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableEditUnscoped) { // not required
		return nil
	}

	if m.VariableEditUnscoped != nil {
		if err := m.VariableEditUnscoped.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VariableEditUnscoped")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateVariableView(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableView) { // not required
		return nil
	}

	if m.VariableView != nil {
		if err := m.VariableView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VariableView")
			}
			return err
		}
	}

	return nil
}

func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) validateVariableViewUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableViewUnscoped) { // not required
		return nil
	}

	if m.VariableViewUnscoped != nil {
		if err := m.VariableViewUnscoped.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VariableViewUnscoped")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody) UnmarshalBinary(b []byte) error {
	var res CustomActionResponseDescriptorOctopusServerWebAPIActionsPermissionDefinitionsResponderOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
