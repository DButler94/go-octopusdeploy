// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new environments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for environments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource creates a environment resource

Creates a new environment.
*/
func (a *Client) CreateResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource(params *CreateResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
		Method:             "POST",
		PathPattern:        "/api/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsSortEnvironmentsResponder Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsSortEnvironmentsResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsSortEnvironmentsResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsSortEnvironmentsResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsSortEnvironmentsResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SortEnvironmentsResponder]",
		Method:             "PUT",
		PathPattern:        "/api/environments/sortorder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsSortEnvironmentsResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsSortEnvironmentsResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsVariablesScopedToEnvironmentResponder Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsVariablesScopedToEnvironmentResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsVariablesScopedToEnvironmentResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsVariablesScopedToEnvironmentResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsVariablesScopedToEnvironmentResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VariablesScopedToEnvironmentResponder]",
		Method:             "GET",
		PathPattern:        "/api/environments/{id}/singlyScopedVariableDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsVariablesScopedToEnvironmentResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsVariablesScopedToEnvironmentResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsMachinesResponder Lists all of the machines that belong to the given environment.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsMachinesResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsMachinesResponderParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsMachinesResponderParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.EnvironmentsMachinesResponder]",
		Method:             "GET",
		PathPattern:        "/api/environments/{id}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsMachinesResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsSummaryResponder Lists all environments, including a summary of machine information
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsSummaryResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsSummaryResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsSummaryResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsSummaryResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.EnvironmentsSummaryResponder]",
		Method:             "GET",
		PathPattern:        "/api/environments/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsSummaryResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsEnvironmentsSummaryResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource deletes a environment resource by ID

Deletes an existing environment.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource(params *DeleteOnBackgroundResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
		Method:             "DELETE",
		PathPattern:        "/api/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK), nil

}

/*
IndexResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource gets a list of environment resources

Lists all of the environments in the current Octopus installation. The results will be sorted by the `SortOrder` field on each environment.
*/
func (a *Client) IndexResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource(params *IndexResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
		Method:             "GET",
		PathPattern:        "/api/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK), nil

}

/*
ListAllResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource gets a list of environment resources

Lists the name and ID of all of the environments in the current Octopus installation. The results will be sorted by the `SortOrder` field on each environment.
*/
func (a *Client) ListAllResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource(params *ListAllResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
		Method:             "GET",
		PathPattern:        "/api/environments/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK), nil

}

/*
LoadResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource gets a environment resource by ID

Gets a single environment by ID.
*/
func (a *Client) LoadResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource(params *LoadResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
		Method:             "GET",
		PathPattern:        "/api/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK), nil

}

/*
ModifyResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource modifies a environment resource by ID

Modifies an existing environment.
*/
func (a *Client) ModifyResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResource(params *ModifyResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
		Method:             "PUT",
		PathPattern:        "/api/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorEnvironmentsDeploymentEnvironmentEnvironmentResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
