// Code generated by go-swagger; DO NOT EDIT.

package library_variable_sets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new library variable sets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for library variable sets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource creates a library variable set resource

Creates a new library variable set.
*/
func (a *Client) CreateResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource(params *CreateResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
		Method:             "POST",
		PathPattern:        "/api/libraryvariablesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceCreated), nil

}

/*
DeleteOnBackgroundResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource deletes a library variable set resource by ID

Deletes an existing library variable set.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource(params *DeleteOnBackgroundResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
		Method:             "DELETE",
		PathPattern:        "/api/libraryvariablesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK), nil

}

/*
IndexResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource gets a list of library variable set resources

Lists all of the library variable sets in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource(params *IndexResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
		Method:             "GET",
		PathPattern:        "/api/libraryvariablesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK), nil

}

/*
ListAllResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource gets a list of library variable set resources

Lists all the library variable sets in the Octopus Deploy installation. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource(params *ListAllResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
		Method:             "GET",
		PathPattern:        "/api/libraryvariablesets/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK), nil

}

/*
LoadResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource gets a library variable set resource by ID

Gets a single library variable set by ID
*/
func (a *Client) LoadResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource(params *LoadResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
		Method:             "GET",
		PathPattern:        "/api/libraryvariablesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK), nil

}

/*
ModifyResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource modifies a library variable set resource by ID

Modifies an existing library variable set.
*/
func (a *Client) ModifyResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResource(params *ModifyResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
		Method:             "PUT",
		PathPattern:        "/api/libraryvariablesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorVariablesLibraryVariableSetLibraryVariableSetResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
