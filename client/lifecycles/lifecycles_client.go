// Code generated by go-swagger; DO NOT EDIT.

package lifecycles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new lifecycles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lifecycles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorLifecyclesLifecycleLifecycleResource creates a lifecycle resource

Creates a new lifecycle.
*/
func (a *Client) CreateResponseDescriptorLifecyclesLifecycleLifecycleResource(params *CreateResponseDescriptorLifecyclesLifecycleLifecycleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorLifecyclesLifecycleLifecycleResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorLifecyclesLifecycleLifecycleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
		Method:             "POST",
		PathPattern:        "/api/lifecycles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorLifecyclesLifecycleLifecycleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorLifecyclesLifecycleLifecycleResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecyclePreviewAction Gets a single lifecycle by ID, as a preview.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecyclePreviewAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecyclePreviewActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecyclePreviewActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLifecyclePreviewActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LifecyclePreviewAction]",
		Method:             "GET",
		PathPattern:        "/api/lifecycles/{id}/preview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecyclePreviewActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecyclePreviewActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecycleProjectsAction Gets a all projects that use this lifecycle.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecycleProjectsAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecycleProjectsActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecycleProjectsActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLifecycleProjectsActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LifecycleProjectsAction]",
		Method:             "GET",
		PathPattern:        "/api/lifecycles/{id}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecycleProjectsActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsLifecycleProjectsActionOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorLifecyclesLifecycleLifecycleResource deletes a lifecycle resource by ID

Deletes an existing lifecycle.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorLifecyclesLifecycleLifecycleResource(params *DeleteOnBackgroundResponseDescriptorLifecyclesLifecycleLifecycleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorLifecyclesLifecycleLifecycleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorLifecyclesLifecycleLifecycleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
		Method:             "DELETE",
		PathPattern:        "/api/lifecycles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorLifecyclesLifecycleLifecycleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorLifecyclesLifecycleLifecycleResourceOK), nil

}

/*
IndexResponseDescriptorLifecyclesLifecycleLifecycleResource gets a list of lifecycle resources

Lists all of the lifecycles in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorLifecyclesLifecycleLifecycleResource(params *IndexResponseDescriptorLifecyclesLifecycleLifecycleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorLifecyclesLifecycleLifecycleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorLifecyclesLifecycleLifecycleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
		Method:             "GET",
		PathPattern:        "/api/lifecycles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorLifecyclesLifecycleLifecycleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorLifecyclesLifecycleLifecycleResourceOK), nil

}

/*
ListAllResponseDescriptorLifecyclesLifecycleLifecycleResource gets a list of lifecycle resources

Lists all the lifecycles in the Octopus Deploy installation.
*/
func (a *Client) ListAllResponseDescriptorLifecyclesLifecycleLifecycleResource(params *ListAllResponseDescriptorLifecyclesLifecycleLifecycleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorLifecyclesLifecycleLifecycleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorLifecyclesLifecycleLifecycleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
		Method:             "GET",
		PathPattern:        "/api/lifecycles/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorLifecyclesLifecycleLifecycleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorLifecyclesLifecycleLifecycleResourceOK), nil

}

/*
LoadResponseDescriptorLifecyclesLifecycleLifecycleResource gets a lifecycle resource by ID

Gets a single lifecycle by ID.
*/
func (a *Client) LoadResponseDescriptorLifecyclesLifecycleLifecycleResource(params *LoadResponseDescriptorLifecyclesLifecycleLifecycleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorLifecyclesLifecycleLifecycleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorLifecyclesLifecycleLifecycleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
		Method:             "GET",
		PathPattern:        "/api/lifecycles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorLifecyclesLifecycleLifecycleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorLifecyclesLifecycleLifecycleResourceOK), nil

}

/*
ModifyResponseDescriptorLifecyclesLifecycleLifecycleResource modifies a lifecycle resource by ID

Modifies an existing lifecycle.
*/
func (a *Client) ModifyResponseDescriptorLifecyclesLifecycleLifecycleResource(params *ModifyResponseDescriptorLifecyclesLifecycleLifecycleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorLifecyclesLifecycleLifecycleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorLifecyclesLifecycleLifecycleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
		Method:             "PUT",
		PathPattern:        "/api/lifecycles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorLifecyclesLifecycleLifecycleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorLifecyclesLifecycleLifecycleResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
