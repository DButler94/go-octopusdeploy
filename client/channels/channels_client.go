// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new channels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for channels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChildIndexResponseDescriptorProjectsChannelProjectsReleaseChannelResourceReleaseResource gets a list of release resources

Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.
*/
func (a *Client) ChildIndexResponseDescriptorProjectsChannelProjectsReleaseChannelResourceReleaseResource(params *ChildIndexResponseDescriptorProjectsChannelProjectsReleaseChannelResourceReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ChildIndexResponseDescriptorProjectsChannelProjectsReleaseChannelResourceReleaseResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChildIndexResponseDescriptorProjectsChannelProjectsReleaseChannelResourceReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChildIndexResponseDescriptor[Projects.Channel,Projects.Release,ChannelResource,ReleaseResource]",
		Method:             "GET",
		PathPattern:        "/api/channels/{id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChildIndexResponseDescriptorProjectsChannelProjectsReleaseChannelResourceReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChildIndexResponseDescriptorProjectsChannelProjectsReleaseChannelResourceReleaseResourceOK), nil

}

/*
ChildIndexResponseDescriptorProjectsProjectProjectsChannelProjectResourceChannelResource gets a list of channel resources

Lists all the channels for the given project
*/
func (a *Client) ChildIndexResponseDescriptorProjectsProjectProjectsChannelProjectResourceChannelResource(params *ChildIndexResponseDescriptorProjectsProjectProjectsChannelProjectResourceChannelResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ChildIndexResponseDescriptorProjectsProjectProjectsChannelProjectResourceChannelResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChildIndexResponseDescriptorProjectsProjectProjectsChannelProjectResourceChannelResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChildIndexResponseDescriptor[Projects.Project,Projects.Channel,ProjectResource,ChannelResource]",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChildIndexResponseDescriptorProjectsProjectProjectsChannelProjectResourceChannelResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChildIndexResponseDescriptorProjectsProjectProjectsChannelProjectResourceChannelResourceOK), nil

}

/*
CreateResponseDescriptorProjectsChannelChannelResource creates a channel resource

Creates a new channel
*/
func (a *Client) CreateResponseDescriptorProjectsChannelChannelResource(params *CreateResponseDescriptorProjectsChannelChannelResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorProjectsChannelChannelResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorProjectsChannelChannelResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Projects.Channel,ChannelResource]",
		Method:             "POST",
		PathPattern:        "/api/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorProjectsChannelChannelResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorProjectsChannelChannelResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsVersionRuleTestAction Perform channel version rule test against provided package version
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsVersionRuleTestAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsVersionRuleTestActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsVersionRuleTestActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsVersionRuleTestActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VersionRuleTestAction]",
		Method:             "POST",
		PathPattern:        "/api/channels/rule-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsVersionRuleTestActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsVersionRuleTestActionOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorProjectsChannelChannelResource deletes a channel resource by ID

Deletes an existing channel.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorProjectsChannelChannelResource(params *DeleteOnBackgroundResponseDescriptorProjectsChannelChannelResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorProjectsChannelChannelResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorProjectsChannelChannelResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Projects.Channel,ChannelResource]",
		Method:             "DELETE",
		PathPattern:        "/api/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorProjectsChannelChannelResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorProjectsChannelChannelResourceOK), nil

}

/*
IndexResponseDescriptorProjectsChannelChannelResource gets a list of channel resources

Lists all of the channels in the current Octopus installation, from all projects, sorted by name.
*/
func (a *Client) IndexResponseDescriptorProjectsChannelChannelResource(params *IndexResponseDescriptorProjectsChannelChannelResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorProjectsChannelChannelResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorProjectsChannelChannelResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Projects.Channel,ChannelResource]",
		Method:             "GET",
		PathPattern:        "/api/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorProjectsChannelChannelResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorProjectsChannelChannelResourceOK), nil

}

/*
ListAllResponseDescriptorProjectsChannelChannelResource gets a list of channel resources

Lists all of the channels in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllResponseDescriptorProjectsChannelChannelResource(params *ListAllResponseDescriptorProjectsChannelChannelResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorProjectsChannelChannelResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorProjectsChannelChannelResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Projects.Channel,ChannelResource]",
		Method:             "GET",
		PathPattern:        "/api/channels/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorProjectsChannelChannelResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorProjectsChannelChannelResourceOK), nil

}

/*
LoadResponseDescriptorProjectsChannelChannelResource gets a channel resource by ID

Get a channel
*/
func (a *Client) LoadResponseDescriptorProjectsChannelChannelResource(params *LoadResponseDescriptorProjectsChannelChannelResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorProjectsChannelChannelResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorProjectsChannelChannelResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Projects.Channel,ChannelResource]",
		Method:             "GET",
		PathPattern:        "/api/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorProjectsChannelChannelResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorProjectsChannelChannelResourceOK), nil

}

/*
ModifyResponseDescriptorProjectsChannelChannelResource modifies a channel resource by ID

Updates an existing channel
*/
func (a *Client) ModifyResponseDescriptorProjectsChannelChannelResource(params *ModifyResponseDescriptorProjectsChannelChannelResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorProjectsChannelChannelResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorProjectsChannelChannelResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Projects.Channel,ChannelResource]",
		Method:             "PUT",
		PathPattern:        "/api/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorProjectsChannelChannelResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorProjectsChannelChannelResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
