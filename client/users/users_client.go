// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorUsersInvitationInvitationResource creates a invitation resource

Invite a user to register.
*/
func (a *Client) CreateResponseDescriptorUsersInvitationInvitationResource(params *CreateResponseDescriptorUsersInvitationInvitationResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorUsersInvitationInvitationResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorUsersInvitationInvitationResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Users.Invitation,InvitationResource]",
		Method:             "POST",
		PathPattern:        "/api/users/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorUsersInvitationInvitationResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorUsersInvitationInvitationResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserAuthenticationResponder Provides the details of the enabled authentication providers and whether the current user can edit logins for the given user.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserAuthenticationResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserAuthenticationResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserAuthenticationResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserAuthenticationResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserAuthenticationResponder]",
		Method:             "GET",
		PathPattern:        "/api/users/authentication/{?userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserAuthenticationResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserAuthenticationResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserCreateAction Creates a new user.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserCreateAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserCreateActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserCreateActionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserCreateActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserCreateAction]",
		Method:             "POST",
		PathPattern:        "/api/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserCreateActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserCreateActionCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserExternalSearchAction Searches for users, using the authentication providers.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserExternalSearchAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserExternalSearchActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserExternalSearchActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserExternalSearchActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserExternalSearchAction]",
		Method:             "GET",
		PathPattern:        "/api/users/external-search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserExternalSearchActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserExternalSearchActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetCurrentAction Gets information about the current user.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetCurrentAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetCurrentActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetCurrentActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetCurrentActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserGetCurrentAction]",
		Method:             "GET",
		PathPattern:        "/api/users/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetCurrentActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetCurrentActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsAction Gets summarized permission information. Available for the current authenticated user only.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserGetPermissionsAction]",
		Method:             "GET",
		PathPattern:        "/api/users/{id}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserIdentityMetadataAction Gets the metadata to describe the claims/fields used by authentication providers that support identities.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserIdentityMetadataAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserIdentityMetadataActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserIdentityMetadataActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserIdentityMetadataActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserIdentityMetadataAction]",
		Method:             "GET",
		PathPattern:        "/api/users/identity-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserIdentityMetadataActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserIdentityMetadataActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLoginAction Authenticates a user and returns a response with a cookie for the current user. This cookie can be submitted with future requests to avoid re-authentication.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLoginAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLoginActionParams) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLoginActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLoginActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserLoginAction]",
		Method:             "POST",
		PathPattern:        "/api/users/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLoginActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLoginActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLogoutAction Revokes the authentication cookie from the current session.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLogoutAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLogoutActionParams) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLogoutActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLogoutActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserLogoutAction]",
		Method:             "POST",
		PathPattern:        "/api/users/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLogoutActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserLogoutActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserRegisterAction Registers a new user and responds with an authentication cookie. Unless the first administrator user is being registered, an invitation code must be provided.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserRegisterAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserRegisterActionParams) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserRegisterActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserRegisterActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserRegisterAction]",
		Method:             "POST",
		PathPattern:        "/api/users/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserRegisterActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserRegisterActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserUpdateAction Modifies an existing user.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserUpdateAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserUpdateActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserUpdateActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserUpdateActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserUpdateAction]",
		Method:             "PUT",
		PathPattern:        "/api/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserUpdateActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsUsersUserUpdateActionOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorUsersUserUserResource deletes a user resource by ID

Delete an existing user.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorUsersUserUserResource(params *DeleteOnBackgroundResponseDescriptorUsersUserUserResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorUsersUserUserResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorUsersUserUserResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Users.User,UserResource]",
		Method:             "DELETE",
		PathPattern:        "/api/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorUsersUserUserResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorUsersUserUserResourceOK), nil

}

/*
FileResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsExportAction Gets list of permissions as a csv file. Available for the current authenticated user only.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) FileResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsExportAction(params *FileResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsExportActionParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsExportActionParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FileResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserGetPermissionsExportAction]",
		Method:             "GET",
		PathPattern:        "/api/users/{id}/permissions/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FileResponseDescriptorOctopusServerWebAPIActionsUsersUserGetPermissionsExportActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
IndexResponseDescriptorUsersUserUserResource gets a list of user resources

Lists all of the users in the current Octopus installation, from all teams. The results will be sorted alphabetically by username.
*/
func (a *Client) IndexResponseDescriptorUsersUserUserResource(params *IndexResponseDescriptorUsersUserUserResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorUsersUserUserResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorUsersUserUserResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Users.User,UserResource]",
		Method:             "GET",
		PathPattern:        "/api/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorUsersUserUserResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorUsersUserUserResourceOK), nil

}

/*
ListAllResponseDescriptorUsersUserUserResource gets a list of user resources

Lists all of the users in the current Octopus installation. The results will be sorted alphabetically by `Username`.
*/
func (a *Client) ListAllResponseDescriptorUsersUserUserResource(params *ListAllResponseDescriptorUsersUserUserResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorUsersUserUserResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorUsersUserUserResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Users.User,UserResource]",
		Method:             "GET",
		PathPattern:        "/api/users/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorUsersUserUserResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorUsersUserUserResourceOK), nil

}

/*
LoadResponseDescriptorUsersInvitationInvitationResource gets a invitation resource by ID

Gets an existing invitation by ID.
*/
func (a *Client) LoadResponseDescriptorUsersInvitationInvitationResource(params *LoadResponseDescriptorUsersInvitationInvitationResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorUsersInvitationInvitationResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorUsersInvitationInvitationResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Users.Invitation,InvitationResource]",
		Method:             "GET",
		PathPattern:        "/api/users/invitations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorUsersInvitationInvitationResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorUsersInvitationInvitationResourceOK), nil

}

/*
LoadResponseDescriptorUsersUserUserResource gets a user resource by ID

Gets a single user by ID.
*/
func (a *Client) LoadResponseDescriptorUsersUserUserResource(params *LoadResponseDescriptorUsersUserUserResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorUsersUserUserResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorUsersUserUserResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Users.User,UserResource]",
		Method:             "GET",
		PathPattern:        "/api/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorUsersUserUserResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorUsersUserUserResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
