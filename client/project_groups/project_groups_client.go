// Code generated by go-swagger; DO NOT EDIT.

package project_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new project groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChildIndexResponseDescriptorProjectsProjectGroupProjectsProjectProjectGroupResourceProjectResource gets a list of project resources

Lists all of the projects that belong to the given project group.
*/
func (a *Client) ChildIndexResponseDescriptorProjectsProjectGroupProjectsProjectProjectGroupResourceProjectResource(params *ChildIndexResponseDescriptorProjectsProjectGroupProjectsProjectProjectGroupResourceProjectResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ChildIndexResponseDescriptorProjectsProjectGroupProjectsProjectProjectGroupResourceProjectResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChildIndexResponseDescriptorProjectsProjectGroupProjectsProjectProjectGroupResourceProjectResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChildIndexResponseDescriptor[Projects.ProjectGroup,Projects.Project,ProjectGroupResource,ProjectResource]",
		Method:             "GET",
		PathPattern:        "/api/projectgroups/{id}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChildIndexResponseDescriptorProjectsProjectGroupProjectsProjectProjectGroupResourceProjectResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChildIndexResponseDescriptorProjectsProjectGroupProjectsProjectProjectGroupResourceProjectResourceOK), nil

}

/*
CreateResponseDescriptorProjectsProjectGroupProjectGroupResource creates a project group resource

Creates a new project group.
*/
func (a *Client) CreateResponseDescriptorProjectsProjectGroupProjectGroupResource(params *CreateResponseDescriptorProjectsProjectGroupProjectGroupResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorProjectsProjectGroupProjectGroupResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorProjectsProjectGroupProjectGroupResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
		Method:             "POST",
		PathPattern:        "/api/projectgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorProjectsProjectGroupProjectGroupResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorProjectsProjectGroupProjectGroupResourceCreated), nil

}

/*
DeleteOnBackgroundResponseDescriptorProjectsProjectGroupProjectGroupResource deletes a project group resource by ID

Deletes an existing project group.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorProjectsProjectGroupProjectGroupResource(params *DeleteOnBackgroundResponseDescriptorProjectsProjectGroupProjectGroupResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorProjectsProjectGroupProjectGroupResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorProjectsProjectGroupProjectGroupResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
		Method:             "DELETE",
		PathPattern:        "/api/projectgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorProjectsProjectGroupProjectGroupResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorProjectsProjectGroupProjectGroupResourceOK), nil

}

/*
IndexResponseDescriptorProjectsProjectGroupProjectGroupResource gets a list of project group resources

Lists all of the project groups in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorProjectsProjectGroupProjectGroupResource(params *IndexResponseDescriptorProjectsProjectGroupProjectGroupResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorProjectsProjectGroupProjectGroupResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorProjectsProjectGroupProjectGroupResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
		Method:             "GET",
		PathPattern:        "/api/projectgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorProjectsProjectGroupProjectGroupResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorProjectsProjectGroupProjectGroupResourceOK), nil

}

/*
ListAllResponseDescriptorProjectsProjectGroupProjectGroupResource gets a list of project group resources

Lists the name and ID of all of the project groups in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllResponseDescriptorProjectsProjectGroupProjectGroupResource(params *ListAllResponseDescriptorProjectsProjectGroupProjectGroupResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorProjectsProjectGroupProjectGroupResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorProjectsProjectGroupProjectGroupResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
		Method:             "GET",
		PathPattern:        "/api/projectgroups/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorProjectsProjectGroupProjectGroupResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorProjectsProjectGroupProjectGroupResourceOK), nil

}

/*
LoadResponseDescriptorProjectsProjectGroupProjectGroupResource gets a project group resource by ID

Gets a single project group by ID.
*/
func (a *Client) LoadResponseDescriptorProjectsProjectGroupProjectGroupResource(params *LoadResponseDescriptorProjectsProjectGroupProjectGroupResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorProjectsProjectGroupProjectGroupResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorProjectsProjectGroupProjectGroupResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
		Method:             "GET",
		PathPattern:        "/api/projectgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorProjectsProjectGroupProjectGroupResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorProjectsProjectGroupProjectGroupResourceOK), nil

}

/*
ModifyResponseDescriptorProjectsProjectGroupProjectGroupResource modifies a project group resource by ID

Modifies an existing project group.
*/
func (a *Client) ModifyResponseDescriptorProjectsProjectGroupProjectGroupResource(params *ModifyResponseDescriptorProjectsProjectGroupProjectGroupResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorProjectsProjectGroupProjectGroupResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorProjectsProjectGroupProjectGroupResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
		Method:             "PUT",
		PathPattern:        "/api/projectgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorProjectsProjectGroupProjectGroupResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorProjectsProjectGroupProjectGroupResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
