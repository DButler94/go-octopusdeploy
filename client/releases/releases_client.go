// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new releases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for releases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChildIndexResponseDescriptorProjectsProjectProjectsReleaseProjectResourceReleaseResource gets a list of release resources

Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.
*/
func (a *Client) ChildIndexResponseDescriptorProjectsProjectProjectsReleaseProjectResourceReleaseResource(params *ChildIndexResponseDescriptorProjectsProjectProjectsReleaseProjectResourceReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ChildIndexResponseDescriptorProjectsProjectProjectsReleaseProjectResourceReleaseResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChildIndexResponseDescriptorProjectsProjectProjectsReleaseProjectResourceReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChildIndexResponseDescriptor[Projects.Project,Projects.Release,ProjectResource,ReleaseResource]",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChildIndexResponseDescriptorProjectsProjectProjectsReleaseProjectResourceReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChildIndexResponseDescriptorProjectsProjectProjectsReleaseProjectResourceReleaseResourceOK), nil

}

/*
ChildIndexResponseDescriptorProjectsReleaseProjectsDeploymentReleaseResourceDeploymentResource gets a list of deployment resources

Lists all of the deployments that belong to the given release. Deployments will be ordered from most recent to least recent.
*/
func (a *Client) ChildIndexResponseDescriptorProjectsReleaseProjectsDeploymentReleaseResourceDeploymentResource(params *ChildIndexResponseDescriptorProjectsReleaseProjectsDeploymentReleaseResourceDeploymentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ChildIndexResponseDescriptorProjectsReleaseProjectsDeploymentReleaseResourceDeploymentResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChildIndexResponseDescriptorProjectsReleaseProjectsDeploymentReleaseResourceDeploymentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChildIndexResponseDescriptor[Projects.Release,Projects.Deployment,ReleaseResource,DeploymentResource]",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChildIndexResponseDescriptorProjectsReleaseProjectsDeploymentReleaseResourceDeploymentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChildIndexResponseDescriptorProjectsReleaseProjectsDeploymentReleaseResourceDeploymentResourceOK), nil

}

/*
CreateResponseDescriptorProjectsReleaseReleaseResource creates a release resource

Creates a new release.
*/
func (a *Client) CreateResponseDescriptorProjectsReleaseReleaseResource(params *CreateResponseDescriptorProjectsReleaseReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorProjectsReleaseReleaseResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorProjectsReleaseReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Projects.Release,ReleaseResource]",
		Method:             "POST",
		PathPattern:        "/api/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorProjectsReleaseReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorProjectsReleaseReleaseResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectReportedResponder Record defect in a release.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectReportedResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectReportedResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectReportedResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsDefectReportedResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DefectReportedResponder]",
		Method:             "POST",
		PathPattern:        "/api/releases/{id}/defects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectReportedResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectReportedResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectResolvedResponder Update or resolve defect in a release.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectResolvedResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectResolvedResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectResolvedResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsDefectResolvedResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DefectResolvedResponder]",
		Method:             "POST",
		PathPattern:        "/api/releases/{id}/defects/resolve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectResolvedResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsDefectResolvedResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentPreviewAction Gets a document that describes what steps will/won't be run during a deployment to a given environment for the given tenant.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentPreviewAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentPreviewActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentPreviewActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentPreviewActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentPreviewAction]",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/deployments/preview/{environment}/{tenant}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentPreviewActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentPreviewActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentTemplateAction Gets all of the information necessary for creating or editing a deployment for this release.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentTemplateAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentTemplateActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentTemplateActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentTemplateActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentTemplateAction]",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/deployments/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentTemplateActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsDeploymentTemplateActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseByProjectAndVersionResponder Gets a single release by project ID and version number.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseByProjectAndVersionResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseByProjectAndVersionResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseByProjectAndVersionResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseByProjectAndVersionResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ReleaseByProjectAndVersionResponder]",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/releases/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseByProjectAndVersionResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseByProjectAndVersionResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseLifecycleProgressionAction Gets all of the information necessary for creating or editing a deployment for this release.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseLifecycleProgressionAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseLifecycleProgressionActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseLifecycleProgressionActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseLifecycleProgressionActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ReleaseLifecycleProgressionAction]",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/progression",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseLifecycleProgressionActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseLifecycleProgressionActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseSnapshotVariablesAction Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseSnapshotVariablesAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseSnapshotVariablesActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseSnapshotVariablesActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseSnapshotVariablesActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ReleaseSnapshotVariablesAction]",
		Method:             "POST",
		PathPattern:        "/api/releases/{id}/snapshot-variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseSnapshotVariablesActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsReleaseSnapshotVariablesActionOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListDefectsResponder Gets all defects for a release.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListDefectsResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListDefectsResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListDefectsResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListDefectsResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListDefectsResponder]",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/defects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListDefectsResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListDefectsResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorProjectsReleaseReleaseResource deletes a release resource by ID

Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorProjectsReleaseReleaseResource(params *DeleteOnBackgroundResponseDescriptorProjectsReleaseReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorProjectsReleaseReleaseResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorProjectsReleaseReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Projects.Release,ReleaseResource]",
		Method:             "DELETE",
		PathPattern:        "/api/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorProjectsReleaseReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorProjectsReleaseReleaseResourceOK), nil

}

/*
IndexResponseDescriptorProjectsReleaseReleaseResource gets a list of release resources

Lists all of the releases in the current Octopus installation, from all projects. The results will be sorted from most recent to least recent release.
*/
func (a *Client) IndexResponseDescriptorProjectsReleaseReleaseResource(params *IndexResponseDescriptorProjectsReleaseReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorProjectsReleaseReleaseResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorProjectsReleaseReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Projects.Release,ReleaseResource]",
		Method:             "GET",
		PathPattern:        "/api/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorProjectsReleaseReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorProjectsReleaseReleaseResourceOK), nil

}

/*
LoadResponseDescriptorProjectsReleaseReleaseResource gets a release resource by ID

Gets a release by ID.
*/
func (a *Client) LoadResponseDescriptorProjectsReleaseReleaseResource(params *LoadResponseDescriptorProjectsReleaseReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorProjectsReleaseReleaseResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorProjectsReleaseReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Projects.Release,ReleaseResource]",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorProjectsReleaseReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorProjectsReleaseReleaseResourceOK), nil

}

/*
ModifyResponseDescriptorProjectsReleaseReleaseResource modifies a release resource by ID

Updates an existing release.
*/
func (a *Client) ModifyResponseDescriptorProjectsReleaseReleaseResource(params *ModifyResponseDescriptorProjectsReleaseReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorProjectsReleaseReleaseResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorProjectsReleaseReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Projects.Release,ReleaseResource]",
		Method:             "PUT",
		PathPattern:        "/api/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorProjectsReleaseReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorProjectsReleaseReleaseResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
