// Code generated by go-swagger; DO NOT EDIT.

package machine_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new machine policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for machine policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChildIndexResponseDescriptorPoliciesMachinePolicyEnvironmentsMachineMachinePolicyResourceMachineResource gets a list of machine resources

Lists all of the machines that belong to the given machine policy.
*/
func (a *Client) ChildIndexResponseDescriptorPoliciesMachinePolicyEnvironmentsMachineMachinePolicyResourceMachineResource(params *ChildIndexResponseDescriptorPoliciesMachinePolicyEnvironmentsMachineMachinePolicyResourceMachineResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ChildIndexResponseDescriptorPoliciesMachinePolicyEnvironmentsMachineMachinePolicyResourceMachineResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChildIndexResponseDescriptorPoliciesMachinePolicyEnvironmentsMachineMachinePolicyResourceMachineResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChildIndexResponseDescriptor[Policies.MachinePolicy,Environments.Machine,MachinePolicyResource,MachineResource]",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/{id}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChildIndexResponseDescriptorPoliciesMachinePolicyEnvironmentsMachineMachinePolicyResourceMachineResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChildIndexResponseDescriptorPoliciesMachinePolicyEnvironmentsMachineMachinePolicyResourceMachineResourceOK), nil

}

/*
CreateResponseDescriptorPoliciesMachinePolicyMachinePolicyResource creates a machine policy resource

Creates a new machine policy.
*/
func (a *Client) CreateResponseDescriptorPoliciesMachinePolicyMachinePolicyResource(params *CreateResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
		Method:             "POST",
		PathPattern:        "/api/machinepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsDeleteMachinePolicyAction Deletes an existing machine policy.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsDeleteMachinePolicyAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsDeleteMachinePolicyActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsDeleteMachinePolicyActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsDeleteMachinePolicyActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeleteMachinePolicyAction]",
		Method:             "DELETE",
		PathPattern:        "/api/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsDeleteMachinePolicyActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsDeleteMachinePolicyActionOK), nil

}

/*
IndexResponseDescriptorPoliciesMachinePolicyMachinePolicyResource gets a list of machine policy resources

Lists all of the machine policies in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorPoliciesMachinePolicyMachinePolicyResource(params *IndexResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK), nil

}

/*
ListAllResponseDescriptorPoliciesMachinePolicyMachinePolicyResource gets a list of machine policy resources

Lists all the machine policies in the Octopus Deploy installation.
*/
func (a *Client) ListAllResponseDescriptorPoliciesMachinePolicyMachinePolicyResource(params *ListAllResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK), nil

}

/*
LoadResponseDescriptorPoliciesMachinePolicyMachinePolicyResource gets a machine policy resource by ID

Gets a single machine policy by ID.
*/
func (a *Client) LoadResponseDescriptorPoliciesMachinePolicyMachinePolicyResource(params *LoadResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK), nil

}

/*
ModifyResponseDescriptorPoliciesMachinePolicyMachinePolicyResource modifies a machine policy resource by ID

Modifies an existing machine policy.
*/
func (a *Client) ModifyResponseDescriptorPoliciesMachinePolicyMachinePolicyResource(params *ModifyResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
		Method:             "PUT",
		PathPattern:        "/api/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorPoliciesMachinePolicyMachinePolicyResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
