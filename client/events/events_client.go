// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventCategoriesResponder Lists event categories.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventCategoriesResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventCategoriesResponderParams) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventCategoriesResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventCategoriesResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventCategoriesResponder]",
		Method:             "GET",
		PathPattern:        "/api/events/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventCategoriesResponderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventCategoriesResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventDocumentTypesResponder Lists subscription event document types.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventDocumentTypesResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventDocumentTypesResponderParams) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventDocumentTypesResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventDocumentTypesResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventDocumentTypesResponder]",
		Method:             "GET",
		PathPattern:        "/api/events/documenttypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventDocumentTypesResponderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventDocumentTypesResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventGroupsResponder Lists subscription event groups.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventGroupsResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventGroupsResponderParams) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventGroupsResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventGroupsResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventGroupsResponder]",
		Method:             "GET",
		PathPattern:        "/api/events/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventGroupsResponderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventGroupsResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventsResponder List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventsResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventsResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventsResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventsResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventsResponder]",
		Method:             "GET",
		PathPattern:        "/api/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventsResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListEventsResponderOK), nil

}

/*
LoadResponseDescriptorEventsEventEventResource gets a event resource by ID

Gets a single event by ID.
*/
func (a *Client) LoadResponseDescriptorEventsEventEventResource(params *LoadResponseDescriptorEventsEventEventResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorEventsEventEventResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorEventsEventEventResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Events.Event,EventResource]",
		Method:             "GET",
		PathPattern:        "/api/events/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorEventsEventEventResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorEventsEventEventResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
