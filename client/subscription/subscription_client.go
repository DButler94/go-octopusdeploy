// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subscription API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorSubscriptionsSubscriptionSubscriptionResource creates a subscription resource

Creates a new subscription
*/
func (a *Client) CreateResponseDescriptorSubscriptionsSubscriptionSubscriptionResource(params *CreateResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
		Method:             "POST",
		PathPattern:        "/api/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceCreated), nil

}

/*
DeleteOnBackgroundResponseDescriptorSubscriptionsSubscriptionSubscriptionResource deletes a subscription resource by ID

Deletes an existing subscription.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorSubscriptionsSubscriptionSubscriptionResource(params *DeleteOnBackgroundResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
		Method:             "DELETE",
		PathPattern:        "/api/subscriptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK), nil

}

/*
IndexResponseDescriptorSubscriptionsSubscriptionSubscriptionResource gets a list of subscription resources

Lists all of the subscriptions in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorSubscriptionsSubscriptionSubscriptionResource(params *IndexResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
		Method:             "GET",
		PathPattern:        "/api/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK), nil

}

/*
ListAllResponseDescriptorSubscriptionsSubscriptionSubscriptionResource gets a list of subscription resources

Lists all the subscriptions in the Octopus Deploy installation.
*/
func (a *Client) ListAllResponseDescriptorSubscriptionsSubscriptionSubscriptionResource(params *ListAllResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
		Method:             "GET",
		PathPattern:        "/api/subscriptions/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK), nil

}

/*
LoadResponseDescriptorSubscriptionsSubscriptionSubscriptionResource gets a subscription resource by ID

Get a subscription
*/
func (a *Client) LoadResponseDescriptorSubscriptionsSubscriptionSubscriptionResource(params *LoadResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
		Method:             "GET",
		PathPattern:        "/api/subscriptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK), nil

}

/*
ModifyResponseDescriptorSubscriptionsSubscriptionSubscriptionResource modifies a subscription resource by ID

Updates an existing subscription
*/
func (a *Client) ModifyResponseDescriptorSubscriptionsSubscriptionSubscriptionResource(params *ModifyResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
		Method:             "PUT",
		PathPattern:        "/api/subscriptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorSubscriptionsSubscriptionSubscriptionResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
