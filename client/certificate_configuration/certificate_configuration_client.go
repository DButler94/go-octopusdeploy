// Code generated by go-swagger; DO NOT EDIT.

package certificate_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new certificate configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificate configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatePublicCerDownloadAction Downloads the public portion of the certificate in .cer format
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatePublicCerDownloadAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatePublicCerDownloadActionParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatePublicCerDownloadActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatePublicCerDownloadActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CertificatePublicCerDownloadAction]",
		Method:             "GET",
		PathPattern:        "/api/configuration/certificates/{id}/public-cer",
		ProducesMediaTypes: []string{"application/x-x509-ca-cert"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatePublicCerDownloadActionReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatePublicCerDownloadActionOK), nil

}

/*
IndexResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResource gets a list of certificate configuration resources

Lists all of the X509 certificates in the current Octopus installation.
*/
func (a *Client) IndexResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResource(params *IndexResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Configuration.CertificateConfiguration,CertificateConfigurationResource]",
		Method:             "GET",
		PathPattern:        "/api/configuration/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceOK), nil

}

/*
LoadResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResource gets a certificate configuration resource by ID

Gets a certificate by ID.
*/
func (a *Client) LoadResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResource(params *LoadResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Configuration.CertificateConfiguration,CertificateConfigurationResource]",
		Method:             "GET",
		PathPattern:        "/api/configuration/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorConfigurationCertificateConfigurationCertificateConfigurationResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
