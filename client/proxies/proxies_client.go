// Code generated by go-swagger; DO NOT EDIT.

package proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new proxies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proxies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorEnvironmentsProxyProxyResource creates a proxy resource

Creates a proxy.
*/
func (a *Client) CreateResponseDescriptorEnvironmentsProxyProxyResource(params *CreateResponseDescriptorEnvironmentsProxyProxyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorEnvironmentsProxyProxyResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorEnvironmentsProxyProxyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Environments.Proxy,ProxyResource]",
		Method:             "POST",
		PathPattern:        "/api/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorEnvironmentsProxyProxyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorEnvironmentsProxyProxyResourceCreated), nil

}

/*
DeleteOnBackgroundResponseDescriptorEnvironmentsProxyProxyResource deletes a proxy resource by ID

Deletes an existing proxy.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorEnvironmentsProxyProxyResource(params *DeleteOnBackgroundResponseDescriptorEnvironmentsProxyProxyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorEnvironmentsProxyProxyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorEnvironmentsProxyProxyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Environments.Proxy,ProxyResource]",
		Method:             "DELETE",
		PathPattern:        "/api/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorEnvironmentsProxyProxyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorEnvironmentsProxyProxyResourceOK), nil

}

/*
IndexResponseDescriptorEnvironmentsProxyProxyResource gets a list of proxy resources

Lists all of the proxies in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorEnvironmentsProxyProxyResource(params *IndexResponseDescriptorEnvironmentsProxyProxyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorEnvironmentsProxyProxyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorEnvironmentsProxyProxyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Environments.Proxy,ProxyResource]",
		Method:             "GET",
		PathPattern:        "/api/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorEnvironmentsProxyProxyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorEnvironmentsProxyProxyResourceOK), nil

}

/*
ListAllResponseDescriptorEnvironmentsProxyProxyResource gets a list of proxy resources

Lists the name and ID of all of the proxies in the current Octopus installation. The results will be sorted by name.
*/
func (a *Client) ListAllResponseDescriptorEnvironmentsProxyProxyResource(params *ListAllResponseDescriptorEnvironmentsProxyProxyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorEnvironmentsProxyProxyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorEnvironmentsProxyProxyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Environments.Proxy,ProxyResource]",
		Method:             "GET",
		PathPattern:        "/api/proxies/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorEnvironmentsProxyProxyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorEnvironmentsProxyProxyResourceOK), nil

}

/*
LoadResponseDescriptorEnvironmentsProxyProxyResource gets a proxy resource by ID

Gets a proxy by ID.
*/
func (a *Client) LoadResponseDescriptorEnvironmentsProxyProxyResource(params *LoadResponseDescriptorEnvironmentsProxyProxyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorEnvironmentsProxyProxyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorEnvironmentsProxyProxyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Environments.Proxy,ProxyResource]",
		Method:             "GET",
		PathPattern:        "/api/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorEnvironmentsProxyProxyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorEnvironmentsProxyProxyResourceOK), nil

}

/*
ModifyResponseDescriptorEnvironmentsProxyProxyResource modifies a proxy resource by ID

Modifies an existing proxy.
*/
func (a *Client) ModifyResponseDescriptorEnvironmentsProxyProxyResource(params *ModifyResponseDescriptorEnvironmentsProxyProxyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorEnvironmentsProxyProxyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorEnvironmentsProxyProxyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Environments.Proxy,ProxyResource]",
		Method:             "PUT",
		PathPattern:        "/api/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorEnvironmentsProxyProxyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorEnvironmentsProxyProxyResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
