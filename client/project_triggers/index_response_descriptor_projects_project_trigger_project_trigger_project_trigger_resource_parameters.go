// Code generated by go-swagger; DO NOT EDIT.

package project_triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams creates a new IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams object
// with the default values initialized.
func NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams() *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	var ()
	return &IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParamsWithTimeout creates a new IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParamsWithTimeout(timeout time.Duration) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	var ()
	return &IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams{

		timeout: timeout,
	}
}

// NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParamsWithContext creates a new IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams object
// with the default values initialized, and the ability to set a context for a request
func NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParamsWithContext(ctx context.Context) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	var ()
	return &IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams{

		Context: ctx,
	}
}

// NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParamsWithHTTPClient creates a new IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParamsWithHTTPClient(client *http.Client) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	var ()
	return &IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams{
		HTTPClient: client,
	}
}

/*IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams contains all the parameters to send to the API endpoint
for the index response descriptor projects project trigger project trigger project trigger resource operation typically these are written to a http.Request
*/
type IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams struct {

	/*Skip
	  Number of items to skip

	*/
	Skip *int32
	/*Take
	  Number of items to take

	*/
	Take *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) WithTimeout(timeout time.Duration) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) WithContext(ctx context.Context) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) WithHTTPClient(client *http.Client) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSkip adds the skip to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) WithSkip(skip *int32) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithTake adds the take to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) WithTake(take *int32) *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams {
	o.SetTake(take)
	return o
}

// SetTake adds the take to the index response descriptor projects project trigger project trigger project trigger resource params
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) SetTake(take *int32) {
	o.Take = take
}

// WriteToRequest writes these params to a swagger request
func (o *IndexResponseDescriptorProjectsProjectTriggerProjectTriggerProjectTriggerResourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Skip != nil {

		// query param skip
		var qrSkip int32
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.Take != nil {

		// query param take
		var qrTake int32
		if o.Take != nil {
			qrTake = *o.Take
		}
		qTake := swag.FormatInt32(qrTake)
		if qTake != "" {
			if err := r.SetQueryParam("take", qTake); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
