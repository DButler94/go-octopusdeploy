// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorProjectsProjectProjectResource creates a project resource

Creates a new project.
*/
func (a *Client) CreateResponseDescriptorProjectsProjectProjectResource(params *CreateResponseDescriptorProjectsProjectProjectResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorProjectsProjectProjectResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorProjectsProjectProjectResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Projects.Project,ProjectResource]",
		Method:             "POST",
		PathPattern:        "/api/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorProjectsProjectProjectResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorProjectsProjectProjectResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoGetResponder Gets the logo associated with the project.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoGetResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoGetResponderParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoGetResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoGetResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ProjectLogoGetResponder]",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoGetResponderReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoGetResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoPutResponder Updates the logo associated with the project.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoPutResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoPutResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoPutResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoPutResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ProjectLogoPutResponder]",
		Method:             "PUT",
		PathPattern:        "/api/projects/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoPutResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsProjectLogoPutResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorProjectsProjectProjectResource deletes a project resource by ID

Deletes an existing project.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorProjectsProjectProjectResource(params *DeleteOnBackgroundResponseDescriptorProjectsProjectProjectResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorProjectsProjectProjectResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorProjectsProjectProjectResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Projects.Project,ProjectResource]",
		Method:             "DELETE",
		PathPattern:        "/api/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorProjectsProjectProjectResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorProjectsProjectProjectResourceOK), nil

}

/*
IndexResponseDescriptorProjectsProjectProjectResource gets a list of project resources

Lists all of the projects in the current Octopus installation, from all project groups. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorProjectsProjectProjectResource(params *IndexResponseDescriptorProjectsProjectProjectResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorProjectsProjectProjectResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorProjectsProjectProjectResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Projects.Project,ProjectResource]",
		Method:             "GET",
		PathPattern:        "/api/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorProjectsProjectProjectResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorProjectsProjectProjectResourceOK), nil

}

/*
ListAllResponseDescriptorProjectsProjectProjectResource gets a list of project resources

Lists the name and ID of all of the projects in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllResponseDescriptorProjectsProjectProjectResource(params *ListAllResponseDescriptorProjectsProjectProjectResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorProjectsProjectProjectResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorProjectsProjectProjectResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Projects.Project,ProjectResource]",
		Method:             "GET",
		PathPattern:        "/api/projects/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorProjectsProjectProjectResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorProjectsProjectProjectResourceOK), nil

}

/*
LoadByIDOrSlugResponseDescriptorProjectsProjectProjectResource gets a project resource by ID or slug

Gets a single project by ID or Slug.
*/
func (a *Client) LoadByIDOrSlugResponseDescriptorProjectsProjectProjectResource(params *LoadByIDOrSlugResponseDescriptorProjectsProjectProjectResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadByIDOrSlugResponseDescriptorProjectsProjectProjectResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadByIDOrSlugResponseDescriptorProjectsProjectProjectResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadByIdOrSlugResponseDescriptor[Projects.Project,ProjectResource]",
		Method:             "GET",
		PathPattern:        "/api/projects/{idOrSlug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadByIDOrSlugResponseDescriptorProjectsProjectProjectResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadByIDOrSlugResponseDescriptorProjectsProjectProjectResourceOK), nil

}

/*
ModifyResponseDescriptorProjectsProjectProjectResource modifies a project resource by ID

Modifies an existing project.
*/
func (a *Client) ModifyResponseDescriptorProjectsProjectProjectResource(params *ModifyResponseDescriptorProjectsProjectProjectResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorProjectsProjectProjectResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorProjectsProjectProjectResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Projects.Project,ProjectResource]",
		Method:             "PUT",
		PathPattern:        "/api/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorProjectsProjectProjectResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorProjectsProjectProjectResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
