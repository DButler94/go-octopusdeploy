// Code generated by go-swagger; DO NOT EDIT.

package feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new feeds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for feeds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorFeedFeedFeedResource creates a feed resource

Creates a feed.
*/
func (a *Client) CreateResponseDescriptorFeedFeedFeedResource(params *CreateResponseDescriptorFeedFeedFeedResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorFeedFeedFeedResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorFeedFeedFeedResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Feed.Feed,FeedResource]",
		Method:             "POST",
		PathPattern:        "/api/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorFeedFeedFeedResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorFeedFeedFeedResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageSearchAction
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageSearchAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageSearchActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageSearchActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsPackageSearchActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageSearchAction]",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}/packages/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageSearchActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageSearchActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageVersionSearchAction
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageVersionSearchAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageVersionSearchActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageVersionSearchActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsPackageVersionSearchActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageVersionSearchAction]",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}/packages/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageVersionSearchActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsPackageVersionSearchActionOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorFeedFeedFeedResource deletes a feed resource by ID

Deletes an existing feed.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorFeedFeedFeedResource(params *DeleteOnBackgroundResponseDescriptorFeedFeedFeedResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorFeedFeedFeedResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorFeedFeedFeedResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Feed.Feed,FeedResource]",
		Method:             "DELETE",
		PathPattern:        "/api/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorFeedFeedFeedResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorFeedFeedFeedResourceOK), nil

}

/*
IndexResponseDescriptorFeedFeedFeedResource gets a list of feed resources

Lists all of the external NuGet feeds used by the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorFeedFeedFeedResource(params *IndexResponseDescriptorFeedFeedFeedResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorFeedFeedFeedResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorFeedFeedFeedResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Feed.Feed,FeedResource]",
		Method:             "GET",
		PathPattern:        "/api/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorFeedFeedFeedResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorFeedFeedFeedResourceOK), nil

}

/*
ListAllResponseDescriptorFeedFeedFeedResource gets a list of feed resources

Lists all the feeds in the Octopus Deploy installation.
*/
func (a *Client) ListAllResponseDescriptorFeedFeedFeedResource(params *ListAllResponseDescriptorFeedFeedFeedResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorFeedFeedFeedResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorFeedFeedFeedResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Feed.Feed,FeedResource]",
		Method:             "GET",
		PathPattern:        "/api/feeds/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorFeedFeedFeedResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorFeedFeedFeedResourceOK), nil

}

/*
LoadResponseDescriptorFeedFeedFeedResource gets a feed resource by ID

Gets a single feed by ID.
*/
func (a *Client) LoadResponseDescriptorFeedFeedFeedResource(params *LoadResponseDescriptorFeedFeedFeedResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorFeedFeedFeedResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorFeedFeedFeedResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Feed.Feed,FeedResource]",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorFeedFeedFeedResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorFeedFeedFeedResourceOK), nil

}

/*
ModifyResponseDescriptorFeedFeedFeedResource modifies a feed resource by ID

Modifies an existing feed.
*/
func (a *Client) ModifyResponseDescriptorFeedFeedFeedResource(params *ModifyResponseDescriptorFeedFeedFeedResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorFeedFeedFeedResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorFeedFeedFeedResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Feed.Feed,FeedResource]",
		Method:             "PUT",
		PathPattern:        "/api/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorFeedFeedFeedResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorFeedFeedFeedResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
