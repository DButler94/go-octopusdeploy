// Code generated by go-swagger; DO NOT EDIT.

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new certificates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorCertificateCertificateResource creates a certificate resource

Adds a new certificate
*/
func (a *Client) CreateResponseDescriptorCertificateCertificateResource(params *CreateResponseDescriptorCertificateCertificateResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorCertificateCertificateResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorCertificateCertificateResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Certificate,CertificateResource]",
		Method:             "POST",
		PathPattern:        "/api/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorCertificateCertificateResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorCertificateCertificateResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateArchiveAction Archives a certificate
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateArchiveAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateArchiveActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateArchiveActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateArchiveActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateArchiveAction]",
		Method:             "POST",
		PathPattern:        "/api/certificates/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateArchiveActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateArchiveActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateExportAction Exports the certificate
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateExportAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateExportActionParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateExportActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateExportActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateExportAction]",
		Method:             "GET",
		PathPattern:        "/api/certificates/{id}/export",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateExportActionReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateExportActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateReplaceAction Replaces a certificate with another
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateReplaceAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateReplaceActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateReplaceActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateReplaceActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateReplaceAction]",
		Method:             "POST",
		PathPattern:        "/api/certificates/{id}/replace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateReplaceActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateReplaceActionOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUnArchiveAction Un-archives a certificate
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUnArchiveAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUnArchiveActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUnArchiveActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUnArchiveActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateUnArchiveAction]",
		Method:             "POST",
		PathPattern:        "/api/certificates/{id}/unarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUnArchiveActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUnArchiveActionOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateByIDOrThumbprintResponder Get a certificate by ID or thumbprint
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateByIDOrThumbprintResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateByIDOrThumbprintResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateByIDOrThumbprintResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateByIDOrThumbprintResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateByIdOrThumbprintResponder]",
		Method:             "GET",
		PathPattern:        "/api/certificates/(?<idOrThumbprint>(?i)^(?!(certificate-global|certificate-azure)).*)",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateByIDOrThumbprintResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateByIDOrThumbprintResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUsageResponder Get the usages of a certificate
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUsageResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUsageResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUsageResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUsageResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateUsageResponder]",
		Method:             "GET",
		PathPattern:        "/api/certificates/{id}/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUsageResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificateUsageResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificatesListResponder Lists X.509 certificates managed by Octopus
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificatesListResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificatesListResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificatesListResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificatesListResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificatesListResponder]",
		Method:             "GET",
		PathPattern:        "/api/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificatesListResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsCertificatesCertificatesListResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorCertificateCertificateResource deletes a certificate resource by ID

Permanently deletes a certificate
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorCertificateCertificateResource(params *DeleteOnBackgroundResponseDescriptorCertificateCertificateResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorCertificateCertificateResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorCertificateCertificateResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Certificate,CertificateResource]",
		Method:             "DELETE",
		PathPattern:        "/api/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorCertificateCertificateResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorCertificateCertificateResourceOK), nil

}

/*
ListAllResponseDescriptorCertificateCertificateResource gets a list of certificate resources

Lists X.509 certificates managed by Octopus
*/
func (a *Client) ListAllResponseDescriptorCertificateCertificateResource(params *ListAllResponseDescriptorCertificateCertificateResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorCertificateCertificateResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorCertificateCertificateResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Certificate,CertificateResource]",
		Method:             "GET",
		PathPattern:        "/api/certificates/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorCertificateCertificateResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorCertificateCertificateResourceOK), nil

}

/*
ModifyResponseDescriptorCertificateCertificateResource modifies a certificate resource by ID

Modifies an existing certificate
*/
func (a *Client) ModifyResponseDescriptorCertificateCertificateResource(params *ModifyResponseDescriptorCertificateCertificateResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorCertificateCertificateResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorCertificateCertificateResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Certificate,CertificateResource]",
		Method:             "PUT",
		PathPattern:        "/api/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorCertificateCertificateResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorCertificateCertificateResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
