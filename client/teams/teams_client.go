// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new teams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorUsersTeamTeamResource creates a team resource

Creates a team.
*/
func (a *Client) CreateResponseDescriptorUsersTeamTeamResource(params *CreateResponseDescriptorUsersTeamTeamResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorUsersTeamTeamResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorUsersTeamTeamResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Users.Team,TeamResource]",
		Method:             "POST",
		PathPattern:        "/api/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorUsersTeamTeamResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorUsersTeamTeamResourceCreated), nil

}

/*
DeleteOnBackgroundResponseDescriptorUsersTeamTeamResource deletes a team resource by ID

Deletes an existing team.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorUsersTeamTeamResource(params *DeleteOnBackgroundResponseDescriptorUsersTeamTeamResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorUsersTeamTeamResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorUsersTeamTeamResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Users.Team,TeamResource]",
		Method:             "DELETE",
		PathPattern:        "/api/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorUsersTeamTeamResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorUsersTeamTeamResourceOK), nil

}

/*
IndexResponseDescriptorUsersTeamTeamResource gets a list of team resources

Lists all of the teams in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorUsersTeamTeamResource(params *IndexResponseDescriptorUsersTeamTeamResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorUsersTeamTeamResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorUsersTeamTeamResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Users.Team,TeamResource]",
		Method:             "GET",
		PathPattern:        "/api/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorUsersTeamTeamResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorUsersTeamTeamResourceOK), nil

}

/*
ListAllResponseDescriptorUsersTeamTeamResource gets a list of team resources

Lists the name and ID of all of the teams in the current Octopus installation. The results will be sorted by name.
*/
func (a *Client) ListAllResponseDescriptorUsersTeamTeamResource(params *ListAllResponseDescriptorUsersTeamTeamResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorUsersTeamTeamResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorUsersTeamTeamResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Users.Team,TeamResource]",
		Method:             "GET",
		PathPattern:        "/api/teams/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorUsersTeamTeamResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorUsersTeamTeamResourceOK), nil

}

/*
LoadResponseDescriptorUsersTeamTeamResource gets a team resource by ID

Gets a team by ID.
*/
func (a *Client) LoadResponseDescriptorUsersTeamTeamResource(params *LoadResponseDescriptorUsersTeamTeamResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorUsersTeamTeamResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorUsersTeamTeamResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Users.Team,TeamResource]",
		Method:             "GET",
		PathPattern:        "/api/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorUsersTeamTeamResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorUsersTeamTeamResourceOK), nil

}

/*
ModifyResponseDescriptorUsersTeamTeamResource modifies a team resource by ID

Modifies an existing team. The Everyone team is treated as a special case and its members and external groups may not be changed.
*/
func (a *Client) ModifyResponseDescriptorUsersTeamTeamResource(params *ModifyResponseDescriptorUsersTeamTeamResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorUsersTeamTeamResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorUsersTeamTeamResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Users.Team,TeamResource]",
		Method:             "PUT",
		PathPattern:        "/api/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorUsersTeamTeamResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorUsersTeamTeamResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
