// Code generated by go-swagger; DO NOT EDIT.

package tag_sets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tag sets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tag sets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorTagSetsTagSetTagSetResource creates a tag set resource

Creates a new tag set.
*/
func (a *Client) CreateResponseDescriptorTagSetsTagSetTagSetResource(params *CreateResponseDescriptorTagSetsTagSetTagSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorTagSetsTagSetTagSetResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorTagSetsTagSetTagSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[TagSets.TagSet,TagSetResource]",
		Method:             "POST",
		PathPattern:        "/api/tagsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorTagSetsTagSetTagSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorTagSetsTagSetTagSetResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsSortTagSetsResponder Takes an array of tag set IDs as the request body, uses the order of items in the array to sort the tag sets on the server. The ID of every tag set must be specified.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsSortTagSetsResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsSortTagSetsResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsSortTagSetsResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsSortTagSetsResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SortTagSetsResponder]",
		Method:             "PUT",
		PathPattern:        "/api/tagsets/sortorder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsSortTagSetsResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsSortTagSetsResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorTagSetsTagSetTagSetResource deletes a tag set resource by ID

Deletes an existing tag set.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorTagSetsTagSetTagSetResource(params *DeleteOnBackgroundResponseDescriptorTagSetsTagSetTagSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorTagSetsTagSetTagSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorTagSetsTagSetTagSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[TagSets.TagSet,TagSetResource]",
		Method:             "DELETE",
		PathPattern:        "/api/tagsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorTagSetsTagSetTagSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorTagSetsTagSetTagSetResourceOK), nil

}

/*
IndexResponseDescriptorTagSetsTagSetTagSetResource gets a list of tag set resources

Lists all of the tag sets in the current Octopus installation. The results will be sorted alphabetically by the `SortOrder` field on each tag set.
*/
func (a *Client) IndexResponseDescriptorTagSetsTagSetTagSetResource(params *IndexResponseDescriptorTagSetsTagSetTagSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorTagSetsTagSetTagSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorTagSetsTagSetTagSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[TagSets.TagSet,TagSetResource]",
		Method:             "GET",
		PathPattern:        "/api/tagsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorTagSetsTagSetTagSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorTagSetsTagSetTagSetResourceOK), nil

}

/*
ListAllResponseDescriptorTagSetsTagSetTagSetResource gets a list of tag set resources

Lists the details of all of the tag sets in the current Octopus installation. The results will be sorted by the `SortOrder` field on each tag set.
*/
func (a *Client) ListAllResponseDescriptorTagSetsTagSetTagSetResource(params *ListAllResponseDescriptorTagSetsTagSetTagSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorTagSetsTagSetTagSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorTagSetsTagSetTagSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[TagSets.TagSet,TagSetResource]",
		Method:             "GET",
		PathPattern:        "/api/tagsets/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorTagSetsTagSetTagSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorTagSetsTagSetTagSetResourceOK), nil

}

/*
LoadResponseDescriptorTagSetsTagSetTagSetResource gets a tag set resource by ID

Gets a tag set by ID.
*/
func (a *Client) LoadResponseDescriptorTagSetsTagSetTagSetResource(params *LoadResponseDescriptorTagSetsTagSetTagSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorTagSetsTagSetTagSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorTagSetsTagSetTagSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[TagSets.TagSet,TagSetResource]",
		Method:             "GET",
		PathPattern:        "/api/tagsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorTagSetsTagSetTagSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorTagSetsTagSetTagSetResourceOK), nil

}

/*
ModifyResponseDescriptorTagSetsTagSetTagSetResource modifies a tag set resource by ID

Modifies an existing tag set.
*/
func (a *Client) ModifyResponseDescriptorTagSetsTagSetTagSetResource(params *ModifyResponseDescriptorTagSetsTagSetTagSetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorTagSetsTagSetTagSetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorTagSetsTagSetTagSetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[TagSets.TagSet,TagSetResource]",
		Method:             "PUT",
		PathPattern:        "/api/tagsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorTagSetsTagSetTagSetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorTagSetsTagSetTagSetResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
