// Code generated by go-swagger; DO NOT EDIT.

package user_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorUsersUserRoleUserRoleResource creates a user role resource

Creates a custom user role definition.
*/
func (a *Client) CreateResponseDescriptorUsersUserRoleUserRoleResource(params *CreateResponseDescriptorUsersUserRoleUserRoleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorUsersUserRoleUserRoleResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorUsersUserRoleUserRoleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Users.UserRole,UserRoleResource]",
		Method:             "POST",
		PathPattern:        "/api/userroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorUsersUserRoleUserRoleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorUsersUserRoleUserRoleResourceCreated), nil

}

/*
DeleteOnBackgroundResponseDescriptorUsersUserRoleUserRoleResource deletes a user role resource by ID

Deletes an existing user role.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorUsersUserRoleUserRoleResource(params *DeleteOnBackgroundResponseDescriptorUsersUserRoleUserRoleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorUsersUserRoleUserRoleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorUsersUserRoleUserRoleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Users.UserRole,UserRoleResource]",
		Method:             "DELETE",
		PathPattern:        "/api/userroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorUsersUserRoleUserRoleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorUsersUserRoleUserRoleResourceOK), nil

}

/*
IndexResponseDescriptorUsersUserRoleUserRoleResource gets a list of user role resources

Lists all of the user roles in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexResponseDescriptorUsersUserRoleUserRoleResource(params *IndexResponseDescriptorUsersUserRoleUserRoleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorUsersUserRoleUserRoleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorUsersUserRoleUserRoleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Users.UserRole,UserRoleResource]",
		Method:             "GET",
		PathPattern:        "/api/userroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorUsersUserRoleUserRoleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorUsersUserRoleUserRoleResourceOK), nil

}

/*
ListAllResponseDescriptorUsersUserRoleUserRoleResource gets a list of user role resources

Lists all of the user roles in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllResponseDescriptorUsersUserRoleUserRoleResource(params *ListAllResponseDescriptorUsersUserRoleUserRoleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorUsersUserRoleUserRoleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorUsersUserRoleUserRoleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Users.UserRole,UserRoleResource]",
		Method:             "GET",
		PathPattern:        "/api/userroles/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorUsersUserRoleUserRoleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorUsersUserRoleUserRoleResourceOK), nil

}

/*
LoadResponseDescriptorUsersUserRoleUserRoleResource gets a user role resource by ID

Gets a single user role by ID.
*/
func (a *Client) LoadResponseDescriptorUsersUserRoleUserRoleResource(params *LoadResponseDescriptorUsersUserRoleUserRoleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorUsersUserRoleUserRoleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorUsersUserRoleUserRoleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Users.UserRole,UserRoleResource]",
		Method:             "GET",
		PathPattern:        "/api/userroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorUsersUserRoleUserRoleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorUsersUserRoleUserRoleResourceOK), nil

}

/*
ModifyResponseDescriptorUsersUserRoleUserRoleResource modifies a user role resource by ID

Modifies an existing user role definition.
*/
func (a *Client) ModifyResponseDescriptorUsersUserRoleUserRoleResource(params *ModifyResponseDescriptorUsersUserRoleUserRoleResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorUsersUserRoleUserRoleResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorUsersUserRoleUserRoleResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Users.UserRole,UserRoleResource]",
		Method:             "PUT",
		PathPattern:        "/api/userroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorUsersUserRoleUserRoleResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorUsersUserRoleUserRoleResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
