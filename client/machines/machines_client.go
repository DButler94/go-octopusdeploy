// Code generated by go-swagger; DO NOT EDIT.

package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new machines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for machines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResponseDescriptorEnvironmentsMachineMachineResource creates a machine resource

Creates a new machine.
*/
func (a *Client) CreateResponseDescriptorEnvironmentsMachineMachineResource(params *CreateResponseDescriptorEnvironmentsMachineMachineResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResponseDescriptorEnvironmentsMachineMachineResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResponseDescriptorEnvironmentsMachineMachineResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResponseDescriptor[Environments.Machine,MachineResource]",
		Method:             "POST",
		PathPattern:        "/api/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResponseDescriptorEnvironmentsMachineMachineResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResponseDescriptorEnvironmentsMachineMachineResourceCreated), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsConnectionStatusResponder Get the status of the network connection between the Octopus server and a machine.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsConnectionStatusResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsConnectionStatusResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsConnectionStatusResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsConnectionStatusResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ConnectionStatusResponder]",
		Method:             "GET",
		PathPattern:        "/api/machines/{id}/connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsConnectionStatusResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsConnectionStatusResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsDiscoverMachineResponder Interrogate a machine for communication details so that it may be added to the installation.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsDiscoverMachineResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsDiscoverMachineResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsDiscoverMachineResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsDiscoverMachineResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DiscoverMachineResponder]",
		Method:             "GET",
		PathPattern:        "/api/machines/discover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsDiscoverMachineResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsDiscoverMachineResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListMachinesResponder Lists all of the registered machines in the current Octopus installation, from all environments. The results will be sorted alphabetically by name.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListMachinesResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListMachinesResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListMachinesResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListMachinesResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListMachinesResponder]",
		Method:             "GET",
		PathPattern:        "/api/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListMachinesResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListMachinesResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsMachineTaskResponder Get the history of related tasks for a machine.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsMachineTaskResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsMachineTaskResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsMachineTaskResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsMachineTaskResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.MachineTaskResponder]",
		Method:             "GET",
		PathPattern:        "/api/machines/{id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsMachineTaskResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsMachineTaskResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorEnvironmentsMachineMachineResource deletes a machine resource by ID

Deletes an existing machine.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorEnvironmentsMachineMachineResource(params *DeleteOnBackgroundResponseDescriptorEnvironmentsMachineMachineResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorEnvironmentsMachineMachineResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorEnvironmentsMachineMachineResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Environments.Machine,MachineResource]",
		Method:             "DELETE",
		PathPattern:        "/api/machines/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorEnvironmentsMachineMachineResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorEnvironmentsMachineMachineResourceOK), nil

}

/*
ListAllResponseDescriptorEnvironmentsMachineMachineResource gets a list of machine resources

Lists all of the machines in the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllResponseDescriptorEnvironmentsMachineMachineResource(params *ListAllResponseDescriptorEnvironmentsMachineMachineResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorEnvironmentsMachineMachineResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorEnvironmentsMachineMachineResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Environments.Machine,MachineResource]",
		Method:             "GET",
		PathPattern:        "/api/machines/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorEnvironmentsMachineMachineResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorEnvironmentsMachineMachineResourceOK), nil

}

/*
LoadResponseDescriptorEnvironmentsMachineMachineResource gets a machine resource by ID

Gets a single machine by ID.
*/
func (a *Client) LoadResponseDescriptorEnvironmentsMachineMachineResource(params *LoadResponseDescriptorEnvironmentsMachineMachineResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorEnvironmentsMachineMachineResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorEnvironmentsMachineMachineResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Environments.Machine,MachineResource]",
		Method:             "GET",
		PathPattern:        "/api/machines/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorEnvironmentsMachineMachineResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorEnvironmentsMachineMachineResourceOK), nil

}

/*
ModifyResponseDescriptorEnvironmentsMachineMachineResource modifies a machine resource by ID

Modifies an existing machine.
*/
func (a *Client) ModifyResponseDescriptorEnvironmentsMachineMachineResource(params *ModifyResponseDescriptorEnvironmentsMachineMachineResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorEnvironmentsMachineMachineResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorEnvironmentsMachineMachineResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Environments.Machine,MachineResource]",
		Method:             "PUT",
		PathPattern:        "/api/machines/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorEnvironmentsMachineMachineResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorEnvironmentsMachineMachineResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
