// Code generated by go-swagger; DO NOT EDIT.

package interruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new interruptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for interruptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsInterruptionResponsibilityResponder Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsInterruptionResponsibilityResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsInterruptionResponsibilityResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsInterruptionResponsibilityResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsInterruptionResponsibilityResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.InterruptionResponsibilityResponder]",
		Method:             "PUT",
		PathPattern:        "/api/interruptions/{id}/responsible",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsInterruptionResponsibilityResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsInterruptionResponsibilityResponderOK), nil

}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsSubmitInterruptionResponder Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsSubmitInterruptionResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsSubmitInterruptionResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsSubmitInterruptionResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsSubmitInterruptionResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SubmitInterruptionResponder]",
		Method:             "POST",
		PathPattern:        "/api/interruptions/{id}/submit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsSubmitInterruptionResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsSubmitInterruptionResponderOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListInterruptionsResponder Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListInterruptionsResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListInterruptionsResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListInterruptionsResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListInterruptionsResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListInterruptionsResponder]",
		Method:             "GET",
		PathPattern:        "/api/interruptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListInterruptionsResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListInterruptionsResponderOK), nil

}

/*
LoadResponseDescriptorServerTasksInterruptionInterruptionResource gets a interruption resource by ID

Gets a single interruption by ID.
*/
func (a *Client) LoadResponseDescriptorServerTasksInterruptionInterruptionResource(params *LoadResponseDescriptorServerTasksInterruptionInterruptionResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorServerTasksInterruptionInterruptionResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorServerTasksInterruptionInterruptionResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[ServerTasks.Interruption,InterruptionResource]",
		Method:             "GET",
		PathPattern:        "/api/interruptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorServerTasksInterruptionInterruptionResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorServerTasksInterruptionInterruptionResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
