// Code generated by go-swagger; DO NOT EDIT.

package octopus_server_nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new octopus server nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for octopus server nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsLoadBalancerPingResponder Returns HTTP ImATeapot (418) when the Octopus Server node is draining or offline, otherwise HTTP OK (200). Always returns the node information in the body.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsLoadBalancerPingResponder(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsLoadBalancerPingResponderParams) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsLoadBalancerPingResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLoadBalancerPingResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LoadBalancerPingResponder]",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsLoadBalancerPingResponderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsLoadBalancerPingResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource deletes a octopus server node resource by ID

Deletes an Octopus Server node.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource(params *DeleteOnBackgroundResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
		Method:             "DELETE",
		PathPattern:        "/api/octopusservernodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK), nil

}

/*
IndexResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource gets a list of octopus server node resources

List all of the Octopus Server nodes participating in the current Octopus Server cluster.
*/
func (a *Client) IndexResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource(params *IndexResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams, authInfo runtime.ClientAuthInfoWriter) (*IndexResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IndexResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK), nil

}

/*
ListAllResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource gets a list of octopus server node resources

Lists the name and ID of all Octopus Server nodes.
*/
func (a *Client) ListAllResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource(params *ListAllResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK), nil

}

/*
LoadResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource gets a octopus server node resource by ID

Gets an Octopus Server node by ID.
*/
func (a *Client) LoadResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource(params *LoadResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK), nil

}

/*
ModifyResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource modifies a octopus server node resource by ID

Modifies an Octopus Server node.
*/
func (a *Client) ModifyResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResource(params *ModifyResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
		Method:             "PUT",
		PathPattern:        "/api/octopusservernodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyResponseDescriptorClusteringOctopusServerNodeOctopusServerNodeResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
