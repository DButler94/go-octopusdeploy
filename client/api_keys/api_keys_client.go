// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new api keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomActionResponseDescriptorOctopusServerWebAPIActionsCreateAPIKeyAction Generates a new API key for the specified user. The API key returned in the result must be saved by the caller, as it cannot be retrieved subsequently from the Octopus server.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomActionResponseDescriptorOctopusServerWebAPIActionsCreateAPIKeyAction(params *CustomActionResponseDescriptorOctopusServerWebAPIActionsCreateAPIKeyActionParams, authInfo runtime.ClientAuthInfoWriter) (*CustomActionResponseDescriptorOctopusServerWebAPIActionsCreateAPIKeyActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomActionResponseDescriptorOctopusServerWebAPIActionsCreateAPIKeyActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CreateApiKeyAction]",
		Method:             "POST",
		PathPattern:        "/api/users/{userId}/apikeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomActionResponseDescriptorOctopusServerWebAPIActionsCreateAPIKeyActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomActionResponseDescriptorOctopusServerWebAPIActionsCreateAPIKeyActionOK), nil

}

/*
CustomQueryResponseDescriptorOctopusServerWebAPIActionsListAPIKeysResponder Lists all API keys for a user, returning the most recent results first.
NOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.
*/
func (a *Client) CustomQueryResponseDescriptorOctopusServerWebAPIActionsListAPIKeysResponder(params *CustomQueryResponseDescriptorOctopusServerWebAPIActionsListAPIKeysResponderParams, authInfo runtime.ClientAuthInfoWriter) (*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListAPIKeysResponderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomQueryResponseDescriptorOctopusServerWebAPIActionsListAPIKeysResponderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListApiKeysResponder]",
		Method:             "GET",
		PathPattern:        "/api/users/{userId}/apikeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomQueryResponseDescriptorOctopusServerWebAPIActionsListAPIKeysResponderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomQueryResponseDescriptorOctopusServerWebAPIActionsListAPIKeysResponderOK), nil

}

/*
DeleteOnBackgroundResponseDescriptorUsersAPIKeyAPIKeyResource deletes a Api key resource by ID

Revokes an existing API key.
*/
func (a *Client) DeleteOnBackgroundResponseDescriptorUsersAPIKeyAPIKeyResource(params *DeleteOnBackgroundResponseDescriptorUsersAPIKeyAPIKeyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOnBackgroundResponseDescriptorUsersAPIKeyAPIKeyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnBackgroundResponseDescriptorUsersAPIKeyAPIKeyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOnBackgroundResponseDescriptor[Users.ApiKey,ApiKeyResource]",
		Method:             "DELETE",
		PathPattern:        "/api/users/{userId}/apikeys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOnBackgroundResponseDescriptorUsersAPIKeyAPIKeyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOnBackgroundResponseDescriptorUsersAPIKeyAPIKeyResourceOK), nil

}

/*
LoadResponseDescriptorUsersAPIKeyAPIKeyResource gets a Api key resource by ID

Gets a API key by ID.
*/
func (a *Client) LoadResponseDescriptorUsersAPIKeyAPIKeyResource(params *LoadResponseDescriptorUsersAPIKeyAPIKeyResourceParams, authInfo runtime.ClientAuthInfoWriter) (*LoadResponseDescriptorUsersAPIKeyAPIKeyResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadResponseDescriptorUsersAPIKeyAPIKeyResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadResponseDescriptor[Users.ApiKey,ApiKeyResource]",
		Method:             "GET",
		PathPattern:        "/api/users/{userId}/apikeys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadResponseDescriptorUsersAPIKeyAPIKeyResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadResponseDescriptorUsersAPIKeyAPIKeyResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
