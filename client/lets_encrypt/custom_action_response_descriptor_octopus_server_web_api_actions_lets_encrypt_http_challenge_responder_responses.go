// Code generated by go-swagger; DO NOT EDIT.

package lets_encrypt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderReader is a Reader for the CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponder structure.
type CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK creates a CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK with default headers values
func NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK() *CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK {
	return &CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK{}
}

/*CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK handles this case with default header values.

OK
*/
type CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK struct {
}

func (o *CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK) Error() string {
	return fmt.Sprintf("[GET /.well-known/acme-challenge//{token}][%d] customActionResponseDescriptorOctopusServerWebApiActionsLetsEncryptHttpChallengeResponderOK ", 200)
}

func (o *CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest creates a CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest with default headers values
func NewCustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest() *CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest {
	return &CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest{}
}

/*CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest handles this case with default header values.

No token parameter was provided.
*/
type CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest struct {
}

func (o *CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest) Error() string {
	return fmt.Sprintf("[GET /.well-known/acme-challenge//{token}][%d] customActionResponseDescriptorOctopusServerWebApiActionsLetsEncryptHttpChallengeResponderBadRequest ", 400)
}

func (o *CustomActionResponseDescriptorOctopusServerWebAPIActionsLetsEncryptHTTPChallengeResponderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
