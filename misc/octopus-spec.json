{
  "swagger": "2.0",
  "info": {
    "version": "2018.3.6+Branch.master.Sha.79b1d8c1f47ebeed794757c07bb5fef60cd24af4",
    "title": "Octopus Server API"
  },
  "basePath": "/",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/accounts/all": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of AccountResources",
        "description": "Lists all of the accounts in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Environments.Accounts.Account,Accounts.AccountResource]",
        "responses": {
          "200": {
            "description": "Load all AccountResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a AccountResource by ID",
        "description": "Gets a single account by ID.",
        "operationId": "LoadResponseDescriptor[Environments.Accounts.Account,Accounts.AccountResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load AccountResource by ID",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Modify a AccountResource by ID",
        "description": "Modifies an existing account.",
        "operationId": "ModifyResponseDescriptor[Environments.Accounts.Account,Accounts.AccountResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccountResource",
            "in": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountResource Modified",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete a AccountResource by ID",
        "description": "Deletes an existing account.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Environments.Accounts.Account,Accounts.AccountResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AccountResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of AccountResources",
        "description": "Lists accounts in the current Octopus installation in pages. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Environments.Accounts.Account,Accounts.AccountResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load AccountResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[AccountResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create a AccountResource",
        "description": "Creates a new account.",
        "operationId": "CreateResponseDescriptor[Environments.Accounts.Account,Accounts.AccountResource]",
        "parameters": [
          {
            "name": "AccountResource",
            "in": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AccountResource Created",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/pk": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Downloads the public key portion of the account's associated certificate, if present.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.AccountPublicKeyDownloadAction]",
        "produces": [
          "application/x-x509-ca-cert"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/cloudServices": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the cloud services associated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.AzureCloudServicesListAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureCloudServiceResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureCloudServiceResource"
              }
            }
          },
          "500": {
            "description": "Azure Error"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/storageAccounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the storage accounts asssociated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.AzureStorageAccountsListAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureCloudServiceResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureCloudServiceResource"
              }
            }
          },
          "500": {
            "description": "Azure Error"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{accountId}/websites": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the websites associated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.AzureWebSitesListAction]",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No accountId parameter was provided.\r\nAccount must be an Azure account."
          },
          "200": {
            "description": "IEnumerable[AzureWebSite] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSite"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/resourceGroups": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the Resource Groups associated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.AzureResourceGroupsListAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureResourceGroupResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureResourceGroupResource"
              }
            }
          },
          "500": {
            "description": "Internal Exception"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/usages": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists projects and deployments which are using an account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.AccountUsageListAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AccountUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/AccountUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/all": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists the all of the action templates in the current Octopus installation. The results will be sorted by name.",
        "operationId": "ListAllResponseDescriptor[Projects.ActionTemplate,ActionTemplateResource]",
        "responses": {
          "200": {
            "description": "Load all ActionTemplateResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a ActionTemplateResource by ID",
        "description": "Gets a single action template by ID.",
        "operationId": "LoadResponseDescriptor[Projects.ActionTemplate,ActionTemplateResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ActionTemplateResource by ID",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Modify a ActionTemplateResource by ID",
        "description": "Modifies an existing action template.",
        "operationId": "ModifyResponseDescriptor[Projects.ActionTemplate,ActionTemplateResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ActionTemplateResource",
            "in": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource Modified",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Delete a ActionTemplateResource by ID",
        "description": "Deletes an existing action template and all its versions.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Projects.ActionTemplate,ActionTemplateResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/versions/{version?}": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets specific version of action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplateVersionGetResponder]",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "ERROR - NOT DEFINED",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned\r\nActionTemplateResource[] resource returned"
          },
          "400": {
            "description": "No version parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/usage": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets a list of all steps/deployment processes that use a given action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplateUsageResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateUsageResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateUsageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists all of the action templates in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Projects.ActionTemplate,ActionTemplateResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ActionTemplateResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ActionTemplateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Create a ActionTemplateResource",
        "description": "Creates a new action template.",
        "operationId": "CreateResponseDescriptor[Projects.ActionTemplate,ActionTemplateResource]",
        "parameters": [
          {
            "name": "ActionTemplateResource",
            "in": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource Created",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/search": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Lists all available action templates including built-in, custom and community contributed step templates.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplatesSearchResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[ActionTemplateSearchResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateSearchResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{typeOrId}/logo": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets the logo associated with the latest version of action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplateLogoGetResponder]",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "typeOrId",
            "in": "path",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the action type logo",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No typeOrId parameter was provided.\r\nNo id parameter was provided."
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{typeOrId}/versions/{version}/logo": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets the logo associated with specific version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplateLogoGetResponder]",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "typeOrId",
            "in": "path",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the action type logo",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No typeOrId parameter was provided.\r\nNo id parameter was provided."
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/logo": {
      "put": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates the logo associated with the latest version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplateLogoPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates the logo associated with the latest version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplateLogoPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/actionsUpdate": {
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates deployment actions to specific version of action template\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentActionUpdate.ActionTemplateActionsUpdateResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionUpdateResultResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionUpdateResultResource"
              }
            }
          },
          "400": {
            "description": "Request failed. Please check Details property for more information.\r\nNo request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/alerts": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "description": "Shows information about the status of the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.AlertResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[AlertResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{userId}/apikeys": {
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Lists all API keys for a user, returning the most recent results first.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListApiKeysResponder]",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ApiKeyResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ApiKeyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Generates a new API key for the specified user. The API key returned in the result must be saved by the caller, as it cannot be retrieved subsequently from the Octopus server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CreateApiKeyAction]",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No userId parameter was provided.\r\nNo request body was supplied."
          },
          "200": {
            "description": "ApiKeyResource resource returned",
            "schema": {
              "$ref": "#/definitions/ApiKeyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{userId}/apikeys/{id}": {
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Get a ApiKeyResource by ID",
        "description": "Gets a API key by ID.",
        "operationId": "LoadResponseDescriptor[Users.ApiKey,ApiKeyResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKeyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ApiKeyResource by ID",
            "schema": {
              "$ref": "#/definitions/ApiKeyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Delete a ApiKeyResource by ID",
        "description": "Revokes an existing API key.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Users.ApiKey,ApiKeyResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKeyResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKeyResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/artifacts": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "description": "Lists all of the artifacts in the current Octopus installation, from all releases. The results will be sorted by date from most recently to least recently created.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListArtifactsResponder]",
        "responses": {
          "200": {
            "description": "ResourceCollection[ArtifactResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ArtifactResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Create a ArtifactResource",
        "description": "Creates a new artifacts.",
        "operationId": "CreateResponseDescriptor[ServerTasks.Artifact,ArtifactResource]",
        "parameters": [
          {
            "name": "ArtifactResource",
            "in": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ArtifactResource Created",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/artifacts/{id}": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Get a ArtifactResource by ID",
        "description": "Gets a single artifact by ID.",
        "operationId": "LoadResponseDescriptor[ServerTasks.Artifact,ArtifactResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ArtifactResource by ID",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Modify a ArtifactResource by ID",
        "description": "Modifies an existing artifact.",
        "operationId": "ModifyResponseDescriptor[ServerTasks.Artifact,ArtifactResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ArtifactResource",
            "in": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ArtifactResource Modified",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Delete a ArtifactResource by ID",
        "description": "Deletes an existing artifact.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[ServerTasks.Artifact,ArtifactResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ArtifactResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/artifacts/{id}/content": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "description": "Gets the content associated with an artifact.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "FileResponseDescriptor[Octopus.Server.Web.Api.Actions.ArtifactContentAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "204": {
            "description": "NoContent"
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Artifacts"
        ],
        "description": "Sets the content associated with an artifact.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "FileResponseDescriptor[Octopus.Server.Web.Api.Actions.ArtifactContentAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "204": {
            "description": "NoContent"
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/authentication": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "description": "Provides the details of the enabled authentication providers.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Authentication.AuthenticationResponder]",
        "responses": {
          "200": {
            "description": "AuthenticationResource resource returned",
            "schema": {
              "$ref": "#/definitions/AuthenticationResource"
            }
          }
        }
      }
    },
    "/api/repository/configuration": {
      "get": {
        "tags": [
          "BuiltInRepository"
        ],
        "description": "Gets the settings applied to the Octopus Server's built-in package repository\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.BuiltInRepositoryConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "BuiltInRepositoryConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/BuiltInRepositoryConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "BuiltInRepository"
        ],
        "description": "Updates the settings applied to the Octopus Server's built-in package repository\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.BuiltInRepositoryConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "BuiltInRepositoryConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/BuiltInRepositoryConfigurationResource"
            }
          },
          "400": {
            "description": "Model is invalid.\r\nUnreleasd packages can't be automatically deleted any sooner than one day after publishing.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/certificates": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "summary": "Get a list of CertificateConfigurationResources",
        "description": "Lists all of the X509 certificates in the current Octopus installation.",
        "operationId": "IndexResponseDescriptor[Configuration.CertificateConfiguration,CertificateConfigurationResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CertificateConfigurationResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[CertificateConfigurationResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/(?<id>(?i)^(certificate-global|certificate-azure))": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "summary": "Get a CertificateConfigurationResource by ID",
        "description": "Gets a certificate by ID.",
        "operationId": "LoadResponseDescriptor[Configuration.CertificateConfiguration,CertificateConfigurationResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateConfigurationResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CertificateConfigurationResource by ID",
            "schema": {
              "$ref": "#/definitions/CertificateConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/certificates/{id}": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "summary": "Get a CertificateConfigurationResource by ID",
        "description": "Gets a certificate by ID.",
        "operationId": "LoadResponseDescriptor[Configuration.CertificateConfiguration,CertificateConfigurationResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateConfigurationResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CertificateConfigurationResource by ID",
            "schema": {
              "$ref": "#/definitions/CertificateConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/certificates/{id}/public-cer": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "description": "Downloads the public portion of the certificate in .cer format\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CertificatePublicCerDownloadAction]",
        "produces": [
          "application/x-x509-ca-cert"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Lists X.509 certificates managed by Octopus\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificatesListResponder]",
        "responses": {
          "200": {
            "description": "ResourceCollection[CertificateResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[CertificateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Create a CertificateResource",
        "description": "Adds a new certificate",
        "operationId": "CreateResponseDescriptor[Certificate,CertificateResource]",
        "parameters": [
          {
            "name": "CertificateResource",
            "in": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CertificateResource Created",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/all": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get a list of CertificateResources",
        "description": "Lists X.509 certificates managed by Octopus",
        "operationId": "ListAllResponseDescriptor[Certificate,CertificateResource]",
        "responses": {
          "200": {
            "description": "Load all CertificateResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertificateResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/(?<idOrThumbprint>(?i)^(?!(certificate-global|certificate-azure)).*)": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Get a certificate by ID or thumbprint\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateByIdOrThumbprintResponder]",
        "parameters": [
          {
            "name": "idOrThumbprint",
            "in": "path",
            "description": "ID or thumbprint of certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No idOrThumbprint parameter was provided."
          },
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/usage": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Get the usages of a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateUsageResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          },
          "200": {
            "description": "CertificateUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateUsageResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/export": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Exports the certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateExportAction]",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid format option.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}": {
      "put": {
        "tags": [
          "Certificates"
        ],
        "summary": "Modify a CertificateResource by ID",
        "description": "Modifies an existing certificate",
        "operationId": "ModifyResponseDescriptor[Certificate,CertificateResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "CertificateResource",
            "in": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource Modified",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "summary": "Delete a CertificateResource by ID",
        "description": "Permanently deletes a certificate",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Certificate,CertificateResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/archive": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Archives a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateArchiveAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/unarchive": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Un-archives a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateUnArchiveAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "You cannot unarchive a certificate that has been replaced.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/replace": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Replaces a certificate with another\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Certificates.CertificateReplaceAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate resource returned",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "400": {
            "description": "No Certificate Data was provided.\r\nCertificate Invalid.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/rule-test": {
      "get": {
        "tags": [
          "Channels"
        ],
        "description": "Perform channel version rule test against provided package version\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VersionRuleTestAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "description": "Perform channel version rule test against provided package version\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VersionRuleTestAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/{id}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a ChannelResource by ID",
        "description": "Get a channel",
        "operationId": "LoadResponseDescriptor[Projects.Channel,ChannelResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ChannelResource by ID",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Channels"
        ],
        "summary": "Modify a ChannelResource by ID",
        "description": "Updates an existing channel",
        "operationId": "ModifyResponseDescriptor[Projects.Channel,ChannelResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ChannelResource",
            "in": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ChannelResource Modified",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Delete a ChannelResource by ID",
        "description": "Deletes an existing channel.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Projects.Channel,ChannelResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ChannelResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the current Octopus installation, from all projects, sorted by name.",
        "operationId": "IndexResponseDescriptor[Projects.Channel,ChannelResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ChannelResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ChannelResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Create a ChannelResource",
        "description": "Creates a new channel",
        "operationId": "CreateResponseDescriptor[Projects.Channel,ChannelResource]",
        "parameters": [
          {
            "name": "ChannelResource",
            "in": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ChannelResource Created",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/all": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Projects.Channel,ChannelResource]",
        "responses": {
          "200": {
            "description": "Load all ChannelResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/{id}/releases": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.",
        "operationId": "ChildIndexResponseDescriptor[Projects.Channel,Projects.Release,ChannelResource,ReleaseResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ChannelResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ChannelResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all the channels for the given project",
        "operationId": "ChildIndexResponseDescriptor[Projects.Project,Projects.Channel,ProjectResource,ChannelResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/cloudtemplate/{id}/metadata": {
      "post": {
        "tags": [
          "CloudTemplate"
        ],
        "description": "Provides parameter metadata for a cloud (AWS etc) resource template\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CloudTemplateMetadataResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CloudTemplateMetadata resource returned",
            "schema": {
              "$ref": "#/definitions/CloudTemplateMetadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "summary": "Get a CommunityActionTemplateResource by ID",
        "description": "Gets a single community step template.",
        "operationId": "LoadResponseDescriptor[Projects.CommunityActionTemplate,CommunityActionTemplateResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CommunityActionTemplateResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CommunityActionTemplateResource by ID",
            "schema": {
              "$ref": "#/definitions/CommunityActionTemplateResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "summary": "Get a list of CommunityActionTemplateResources",
        "description": "",
        "operationId": "IndexResponseDescriptor[Projects.CommunityActionTemplate,CommunityActionTemplateResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CommunityActionTemplateResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[CommunityActionTemplateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}/actiontemplate": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Gets installed version of the template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ActionTemplateBasedOnCommunityActionTemplateResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}/logo": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Gets the logo associated with the community step template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CommunityActionTemplateLogoGetResponder]",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}/installation": {
      "put": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Updates installed community step template to the lastest version.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CommunityActionTemplateInstallationPutActionResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action template not yet installed.\r\nAction template not valid.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Installs community step template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CommunityActionTemplateInstallationPostActionResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action Template already installed.\r\nAction Template is invalid.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Configuration.ConfigurationSectionListResponder]",
        "responses": {
          "200": {
            "description": "ResourceCollection[ConfigurationSectionMetadata] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ConfigurationSectionMetadata]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Configuration.ConfigurationSectionMetadataResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ConfigurationSectionMetadata resource returned",
            "schema": {
              "$ref": "#/definitions/ConfigurationSectionMetadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/{id}/metadata": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Configuration.ConfigurationItemMetadataResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata resource returned",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/{id}/values": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Configuration.ConfigurationItemValuesResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Object resource returned",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Configuration.ConfigurationItemUpdateResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Object resource returned",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/dashboardconfiguration": {
      "get": {
        "tags": [
          "DashboardConfigurations"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DashboardConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "DashboardConfigurations"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DashboardConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/dashboard": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DashboardViewAction]",
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/dashboard/dynamic": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DynamicDashboardViewAction]",
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deploymentprocesses/{id}": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "summary": "Get a DeploymentProcessResource by ID",
        "description": "Gets a deployment process by ID.",
        "operationId": "LoadResponseDescriptor[Projects.DeploymentProcess,DeploymentProcessResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentProcessResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentProcessResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "DeploymentProcesses"
        ],
        "description": "Modifies a deployment process. Only allowed for deployment processes owned by a project (cannot be used to change the deployment process owned by a release).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentProcessUpdateAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentProcessResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "400": {
            "description": "Validation failed.\r\nYou cannot modify this deployment process because it is frozen. You'll need to create a new deployment process instead.\r\nChanges to this deployment process could not be saved, because another user has made changes to the deployment process between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nNo request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deploymentprocesses": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "summary": "Get a list of DeploymentProcessResources",
        "description": "Lists all the deployment processeses in the current Octopus installation, sorted by Id",
        "operationId": "IndexResponseDescriptor[Projects.DeploymentProcess,DeploymentProcessResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentProcessResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentProcessResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deploymentprocesses/{id}/template": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "description": "Gets all of the information necessary for creating or editing a release using this deployment process.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ReleaseTemplateAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseTemplateResource"
            }
          },
          "400": {
            "description": "A channelId must be provided when more than one exists for that project and no default channel has been specified.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deployments": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "description": "Lists all of the deployments in the current Octopus installation, from projects, releases and environments accessible by the current user. The results will be sorted from most recent to least recent deployment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentsQueryResponder]",
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Deployments"
        ],
        "description": "Creates a new deployment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentCreateAction]",
        "responses": {
          "201": {
            "description": "DeploymentResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "400": {
            "description": "Deployment Schedule is invalid.\r\nLicense is not compliant.\r\nDeployment creation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deployments/{id}": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get a DeploymentResource by ID",
        "description": "Gets a deployment by ID.",
        "operationId": "LoadResponseDescriptor[Projects.Deployment,DeploymentResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Deployments"
        ],
        "summary": "Delete a DeploymentResource by ID",
        "description": "Deletes a deployment.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Projects.Deployment,DeploymentResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/all": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists the name and ID of all of the environments in the current Octopus installation. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "ListAllResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
        "responses": {
          "200": {
            "description": "Load all EnvironmentResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/{id}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a EnvironmentResource by ID",
        "description": "Gets a single environment by ID.",
        "operationId": "LoadResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load EnvironmentResource by ID",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Modify a EnvironmentResource by ID",
        "description": "Modifies an existing environment.",
        "operationId": "ModifyResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "EnvironmentResource",
            "in": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentResource Modified",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete a EnvironmentResource by ID",
        "description": "Deletes an existing environment.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists all of the environments in the current Octopus installation. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "IndexResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load EnvironmentResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[EnvironmentResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create a EnvironmentResource",
        "description": "Creates a new environment.",
        "operationId": "CreateResponseDescriptor[Environments.DeploymentEnvironment,EnvironmentResource]",
        "parameters": [
          {
            "name": "EnvironmentResource",
            "in": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "EnvironmentResource Created",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/summary": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Lists all environments, including a summary of machine information\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.EnvironmentsSummaryResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/{id}/machines": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Lists all of the machines that belong to the given environment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.EnvironmentsMachinesResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/{id}/singlyScopedVariableDetails": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VariablesScopedToEnvironmentResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariablesScopedToEnvironmentResponse resource returned",
            "schema": {
              "$ref": "#/definitions/VariablesScopedToEnvironmentResponse"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/sortorder": {
      "put": {
        "tags": [
          "Environments"
        ],
        "description": "Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SortEnvironmentsResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get a EventResource by ID",
        "description": "Gets a single event by ID.",
        "operationId": "LoadResponseDescriptor[Events.Event,EventResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EventResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load EventResource by ID",
            "schema": {
              "$ref": "#/definitions/EventResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventsResponder]",
        "responses": {
          "200": {
            "description": "OK\r\nResourceCollection[EventResource] resource returned"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/events/categories": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists event categories.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventCategoriesResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[EventCategoryDocument] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventCategoryDocument"
              }
            }
          }
        }
      }
    },
    "/api/events/groups": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists subscription event groups.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventGroupsResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[EventGroupDocument] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventGroupDocument"
              }
            }
          }
        }
      }
    },
    "/api/events/documenttypes": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists subscription event document types.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListEventDocumentTypesResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[DocumentTypeDocument] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentTypeDocument"
              }
            }
          }
        }
      }
    },
    "/api/externalsecuritygroupproviders": {
      "get": {
        "tags": [
          "ExternalSecurityGroups"
        ],
        "description": "Lists the authentication providers that support external group lookups.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ListProvidersThatSupportExternalSecurityGroupsResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[AuthenticationProviderThatSupportsGroups] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuthenticationProviderThatSupportsGroups"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/featuresconfiguration": {
      "get": {
        "tags": [
          "FeaturesConfiguration"
        ],
        "description": "Gets information about the features configuration in use by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.FeaturesConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "FeaturesConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeaturesConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "FeaturesConfiguration"
        ],
        "description": "Updates the features configuration used by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.FeaturesConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "FeaturesConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeaturesConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/all": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds in the Octopus Deploy installation.",
        "operationId": "ListAllResponseDescriptor[Feed.Feed,FeedResource]",
        "responses": {
          "200": {
            "description": "Load all FeedResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeedResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a FeedResource by ID",
        "description": "Gets a single feed by ID.",
        "operationId": "LoadResponseDescriptor[Feed.Feed,FeedResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load FeedResource by ID",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Feeds"
        ],
        "summary": "Modify a FeedResource by ID",
        "description": "Modifies an existing feed.",
        "operationId": "ModifyResponseDescriptor[Feed.Feed,FeedResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "FeedResource",
            "in": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeedResource Modified",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Feeds"
        ],
        "summary": "Delete a FeedResource by ID",
        "description": "Deletes an existing feed.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Feed.Feed,FeedResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "FeedResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of FeedResources",
        "description": "Lists all of the external NuGet feeds used by the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Feed.Feed,FeedResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load FeedResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[FeedResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Feeds"
        ],
        "summary": "Create a FeedResource",
        "description": "Creates a feed.",
        "operationId": "CreateResponseDescriptor[Feed.Feed,FeedResource]",
        "parameters": [
          {
            "name": "FeedResource",
            "in": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "FeedResource Created",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages/search": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageSearchAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageDescriptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageDescriptionResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages/versions": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageVersionSearchAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageVersionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageVersionResource]"
            }
          },
          "400": {
            "description": "Query parameter packageId is missing"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api": {
      "get": {
        "tags": [
          "Home"
        ],
        "description": "Returns a document describing the current Octopus Server and links to other parts of the API.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.HomeResponder]",
        "responses": {
          "200": {
            "description": "RootResource resource returned",
            "schema": {
              "$ref": "#/definitions/RootResource"
            }
          }
        }
      }
    },
    "/api/interruptions": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "description": "Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListInterruptionsResponder]",
        "responses": {
          "200": {
            "description": "ResourceCollection[InterruptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[InterruptionResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/interruptions/{id}": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "summary": "Get a InterruptionResource by ID",
        "description": "Gets a single interruption by ID.",
        "operationId": "LoadResponseDescriptor[ServerTasks.Interruption,InterruptionResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the InterruptionResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load InterruptionResource by ID",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/interruptions/{id}/submit": {
      "post": {
        "tags": [
          "Interruptions"
        ],
        "description": "Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SubmitInterruptionResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "InterruptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "400": {
            "description": "The interruption has already been submitted.\r\nYou must take responsibility for this interruption before attempting to submit it.\r\nSomeone else has taken responsibility for this interruption, and only they are allowed to submit it.\r\nThere were errors with the form.\r\nNo request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/interruptions/{id}/responsible": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "description": "Gets the user that is currently responsible for this interruption.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.InterruptionResponsibilityResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "405": {
            "description": "MethodNotAllowed"
          },
          "400": {
            "description": "This interruption has already been submitted, possibly by another user.\r\nYou cannot take responsibility for this interruption as you do not appear to be in any of the teams with permissions to do so. Please try again or contact your Octopus administrator.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Interruptions"
        ],
        "description": "Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.InterruptionResponsibilityResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "405": {
            "description": "MethodNotAllowed"
          },
          "400": {
            "description": "This interruption has already been submitted, possibly by another user.\r\nYou cannot take responsibility for this interruption as you do not appear to be in any of the teams with permissions to do so. Please try again or contact your Octopus administrator.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/.well-known/acme-challenge//{token}": {
      "get": {
        "tags": [
          "LetsEncrypt"
        ],
        "description": "Returns the computed HTTP challenge for a given token\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LetsEncryptHttpChallengeResponder]",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "LetsEncrypt response token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No token parameter was provided."
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/letsencryptconfiguration": {
      "get": {
        "tags": [
          "LetsEncrypt"
        ],
        "description": "Returns the current Let's Encrypt configuration\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LetsEncryptConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "LetsEncrypt"
        ],
        "description": "Updates the Let's Encrypt configuration used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LetsEncryptConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/libraryvariablesets/all": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all the library variable sets in the Octopus Deploy installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
        "responses": {
          "200": {
            "description": "Load all LibraryVariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LibraryVariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/libraryvariablesets": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all of the library variable sets in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LibraryVariableSetResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[LibraryVariableSetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Create a LibraryVariableSetResource",
        "description": "Creates a new library variable set.",
        "operationId": "CreateResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
        "parameters": [
          {
            "name": "LibraryVariableSetResource",
            "in": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LibraryVariableSetResource Created",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/libraryvariablesets/{id}": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a LibraryVariableSetResource by ID",
        "description": "Gets a single library variable set by ID",
        "operationId": "LoadResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LibraryVariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Modify a LibraryVariableSetResource by ID",
        "description": "Modifies an existing library variable set.",
        "operationId": "ModifyResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "LibraryVariableSetResource",
            "in": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetResource Modified",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Delete a LibraryVariableSetResource by ID",
        "description": "Deletes an existing library variable set.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Variables.LibraryVariableSet,LibraryVariableSetResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/licenses/licenses-current": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LicenseGetCurrentAction]",
        "responses": {
          "200": {
            "description": "LicenseResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Licenses"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LicensePutCurrentAction]",
        "responses": {
          "200": {
            "description": "LicenseResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseResource"
            }
          },
          "400": {
            "description": "Please provide the text of the license.\r\nThe license is not compatible with this version of Octopus deploy.\r\nThe license could not be updated because the server is not compliant, so using the license would disable functionality.\r\nThe license you've provided doesn't seem to be valid XML. You should paste in the entire XML document, starting with <License> and ending at </License>.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/licenses/licenses-current-status": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "description": "Calculates the status of the current Octopus license including compliance and maintenance expiry.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LicenseStatusGetCurrentAction]",
        "responses": {
          "200": {
            "description": "LicenseStatusResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseStatusResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/all": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all the lifecycles in the Octopus Deploy installation.",
        "operationId": "ListAllResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
        "responses": {
          "200": {
            "description": "Load all LifecycleResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LifecycleResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/{id}": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a LifecycleResource by ID",
        "description": "Gets a single lifecycle by ID.",
        "operationId": "LoadResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LifecycleResource by ID",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Modify a LifecycleResource by ID",
        "description": "Modifies an existing lifecycle.",
        "operationId": "ModifyResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "LifecycleResource",
            "in": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource Modified",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Delete a LifecycleResource by ID",
        "description": "Deletes an existing lifecycle.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/{id}/preview": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "description": "Gets a single lifecycle by ID, as a preview.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LifecyclePreviewAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/{id}/projects": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "description": "Gets a all projects that use this lifecycle.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LifecycleProjectsAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ProjectResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all of the lifecycles in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LifecycleResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[LifecycleResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Create a LifecycleResource",
        "description": "Creates a new lifecycle.",
        "operationId": "CreateResponseDescriptor[Lifecycles.Lifecycle,LifecycleResource]",
        "parameters": [
          {
            "name": "LifecycleResource",
            "in": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LifecycleResource Created",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/{id}/machines": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of MachineResources",
        "description": "Lists all of the machines that belong to the given machine policy.",
        "operationId": "ChildIndexResponseDescriptor[Policies.MachinePolicy,Environments.Machine,MachinePolicyResource,MachineResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load MachinePolicyResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[MachinePolicyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/all": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all the machine policies in the Octopus Deploy installation.",
        "operationId": "ListAllResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
        "responses": {
          "200": {
            "description": "Load all MachinePolicyResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachinePolicyResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/{id}": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a MachinePolicyResource by ID",
        "description": "Gets a single machine policy by ID.",
        "operationId": "LoadResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load MachinePolicyResource by ID",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Modify a MachinePolicyResource by ID",
        "description": "Modifies an existing machine policy.",
        "operationId": "ModifyResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "MachinePolicyResource",
            "in": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MachinePolicyResource Modified",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MachinePolicies"
        ],
        "description": "Deletes an existing machine policy.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeleteMachinePolicyAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed to find the default machine policy (Octopus needs this to exist as a fallback policy for machines).\r\nYou cannot delete your default machine policy.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all of the machine policies in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load MachinePolicyResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[MachinePolicyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Create a MachinePolicyResource",
        "description": "Creates a new machine policy.",
        "operationId": "CreateResponseDescriptor[Policies.MachinePolicy,MachinePolicyResource]",
        "parameters": [
          {
            "name": "MachinePolicyResource",
            "in": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MachinePolicyResource Created",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machineroles/all": {
      "get": {
        "tags": [
          "MachineRoles"
        ],
        "description": "Gets all machine roles that have been defined in this Octopus installation. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.MachineRolesListAllAction]",
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/all": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a list of MachineResources",
        "description": "Lists all of the machines in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Environments.Machine,MachineResource]",
        "responses": {
          "200": {
            "description": "Load all MachineResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachineResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/{id}": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a MachineResource by ID",
        "description": "Gets a single machine by ID.",
        "operationId": "LoadResponseDescriptor[Environments.Machine,MachineResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachineResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load MachineResource by ID",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Machines"
        ],
        "summary": "Modify a MachineResource by ID",
        "description": "Modifies an existing machine.",
        "operationId": "ModifyResponseDescriptor[Environments.Machine,MachineResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachineResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "MachineResource",
            "in": "body",
            "description": "The MachineResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MachineResource Modified",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Machines"
        ],
        "summary": "Delete a MachineResource by ID",
        "description": "Deletes an existing machine.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Environments.Machine,MachineResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachineResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/{id}/connection": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Get the status of the network connection between the Octopus server and a machine.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ConnectionStatusResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/{id}/tasks": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Get the history of related tasks for a machine.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.MachineTaskResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the machine",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          },
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Lists all of the registered machines in the current Octopus installation, from all environments. The results will be sorted alphabetically by name.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListMachinesResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Machines"
        ],
        "summary": "Create a MachineResource",
        "description": "Creates a new machine.",
        "operationId": "CreateResponseDescriptor[Environments.Machine,MachineResource]",
        "parameters": [
          {
            "name": "MachineResource",
            "in": "body",
            "description": "The MachineResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MachineResource Created",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/discover": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DiscoverMachineResponder]",
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/maintenanceconfiguration": {
      "get": {
        "tags": [
          "MaintenanceConfiguration"
        ],
        "description": "Gets information about the maintenance configuration in use by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.MaintenanceConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "MaintenanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/MaintenanceConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "MaintenanceConfiguration"
        ],
        "description": "Updates the maintenance configuration used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.MaintenanceConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "MaintenanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/MaintenanceConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/migrations/spacepartialexport": {
      "post": {
        "tags": [
          "Migration"
        ],
        "description": "Returns HTTP OK (200) when a space-partial-export migration has been queued.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.MigrationSpacePartialExportResponder]",
        "responses": {
          "200": {
            "description": "SpacePartialExportResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpacePartialExportResource"
            }
          },
          "400": {
            "description": "Missing expected 'Password' parameter.\r\nMissing expected 'Projects' parameter.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/migrations/spaceimport": {
      "post": {
        "tags": [
          "Migration"
        ],
        "description": "Returns HTTP OK (200) when an space-import migration has been queued.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.MigrationSpaceImportResponder]",
        "responses": {
          "200": {
            "description": "SpaceImportResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceImportResource"
            }
          },
          "400": {
            "description": "Missing expected 'PackageId' parameter.\r\nMissing expected 'PackageVersion' parameter.\r\nMissing expected 'Password' parameter.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/nuget/packages": {
      "put": {
        "tags": [
          "NuGet"
        ],
        "description": "Octopus allows NuGet.exe and compatible tools to push packages to this endpoint.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.NuGet.NuGetPackagePushAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes/all": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Get a list of OctopusServerNodeResources",
        "description": "Lists the name and ID of all Octopus Server nodes.",
        "operationId": "ListAllResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
        "responses": {
          "200": {
            "description": "Load all OctopusServerNodeResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OctopusServerNodeResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Get a list of OctopusServerNodeResources",
        "description": "List all of the Octopus Server nodes participating in the current Octopus Server cluster.",
        "operationId": "IndexResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load OctopusServerNodeResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[OctopusServerNodeResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes/ping": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "description": "Returns HTTP ImATeapot (418) when the Octopus Server node is draining or offline, otherwise HTTP OK (200). Always returns the node information in the body.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.LoadBalancerPingResponder]",
        "responses": {
          "200": {
            "description": "OK"
          },
          "418": {
            "description": "ImATeapot"
          }
        }
      }
    },
    "/api/octopusservernodes/{id}": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Get a OctopusServerNodeResource by ID",
        "description": "Gets an Octopus Server node by ID.",
        "operationId": "LoadResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OctopusServerNodeResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load OctopusServerNodeResource by ID",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Modify a OctopusServerNodeResource by ID",
        "description": "Modifies an Octopus Server node.",
        "operationId": "ModifyResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OctopusServerNodeResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "OctopusServerNodeResource",
            "in": "body",
            "description": "The OctopusServerNodeResource resource to create",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusServerNodeResource Modified",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Delete a OctopusServerNodeResource by ID",
        "description": "Deletes an Octopus Server node.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Clustering.OctopusServerNode,OctopusServerNodeResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OctopusServerNodeResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusServerNodeResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages/{packageId}/versions": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageVersionSearchAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageVersionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageVersionResource]"
            }
          },
          "400": {
            "description": "Query parameter packageId is missing"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageSearchActionOld]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[PackageResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageResource"
              }
            }
          },
          "400": {
            "description": "The 'versionRange' parameter was not a valid NuGet version-range (see http://g.octopushq.com/NuGetVersioning)"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages/notes": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageNotesAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/notes": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageListNotesAction]",
        "responses": {
          "200": {
            "description": "PackageNoteListResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageNoteListResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageRepository.PackageRepositoryListAction]",
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageResource]"
            }
          },
          "400": {
            "description": "Only one of either nuGetPackageId or filter may be specified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/{id}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageRepository.PackageRepositoryGetAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageRepository.PackageRepositoryDeleteAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Please specify the package ID.\r\nPlease specify only one of the id or packageIds parameters."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/bulk": {
      "delete": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageRepository.PackageRepositoryDeleteAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Please specify the package ID.\r\nPlease specify only one of the id or packageIds parameters."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/{id}/raw": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageRepository.PackageRepositoryGetRawAction]",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid package specified.\r\nPackage was not found in the index of the built-in package repository.\r\nPackage was not found on disk, although metadata was found in the built-in package repository index. This could mean that the file was manually deleted from disk after being indexed.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/raw": {
      "post": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PackageRepository.PackageRepositoryUploadAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/permissions/all": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "description": "Gets a dictionary of available permissions and their descriptions and restrictions\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.PermissionDefinitionsResponder]",
        "responses": {
          "200": {
            "description": "Dictionary[Permission,PermissionDescription] resource returned",
            "schema": {
              "type": "object",
              "properties": {
                "None": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AdministerSystem": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProcessView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProcessEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableEditUnscoped": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableViewUnscoped": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DefectReport": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DefectResolve": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "FeedView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EventView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserInvite": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserRoleView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserRoleEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskViewLog": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskCancel": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionSubmit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionViewSubmitResponsible": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedPush": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedAdminister": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedDownload": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AuditView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateExportPrivateKey": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ConfigureServer": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "FeedEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/progression/{id}": {
      "get": {
        "tags": [
          "Progression"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ProgressionViewAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups/all": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists the name and ID of all of the project groups in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
        "responses": {
          "200": {
            "description": "Load all ProjectGroupResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectGroupResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups/{id}": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a ProjectGroupResource by ID",
        "description": "Gets a single project group by ID.",
        "operationId": "LoadResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectGroupResource by ID",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Modify a ProjectGroupResource by ID",
        "description": "Modifies an existing project group.",
        "operationId": "ModifyResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectGroupResource",
            "in": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectGroupResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Delete a ProjectGroupResource by ID",
        "description": "Deletes an existing project group.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectGroupResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists all of the project groups in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectGroupResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectGroupResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Create a ProjectGroupResource",
        "description": "Creates a new project group.",
        "operationId": "CreateResponseDescriptor[Projects.ProjectGroup,ProjectGroupResource]",
        "parameters": [
          {
            "name": "ProjectGroupResource",
            "in": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectGroupResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups/{id}/projects": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists all of the projects that belong to the given project group.",
        "operationId": "ChildIndexResponseDescriptor[Projects.ProjectGroup,Projects.Project,ProjectGroupResource,ProjectResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectGroupResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectGroupResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/all": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists the name and ID of all of the projects in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Projects.Project,ProjectResource]",
        "responses": {
          "200": {
            "description": "Load all ProjectResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{idOrSlug}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a ProjectResource by ID or slug",
        "description": "Gets a single project by ID or Slug.",
        "operationId": "LoadByIdOrSlugResponseDescriptor[Projects.Project,ProjectResource]",
        "parameters": [
          {
            "name": "idOrSlug",
            "in": "path",
            "description": "ID or slug of the ProjectResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectResource by ID or slug",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/logo": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Gets the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ProjectLogoGetResponder]",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "description": "Updates the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ProjectLogoPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Updates the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ProjectLogoPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists all of the projects in the current Octopus installation, from all project groups. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Projects.Project,ProjectResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a ProjectResource",
        "description": "Creates a new project.",
        "operationId": "CreateResponseDescriptor[Projects.Project,ProjectResource]",
        "parameters": [
          {
            "name": "ProjectResource",
            "in": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Modify a ProjectResource by ID",
        "description": "Modifies an existing project.",
        "operationId": "ModifyResponseDescriptor[Projects.Project,ProjectResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectResource",
            "in": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a ProjectResource by ID",
        "description": "Deletes an existing project.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Projects.Project,ProjectResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projecttriggers/{id}": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a ProjectTriggerResource by ID",
        "description": "Get a project trigger",
        "operationId": "LoadResponseDescriptor[Projects.ProjectTrigger.ProjectTrigger,ProjectTriggerResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectTriggerResource by ID",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Modify a ProjectTriggerResource by ID",
        "description": "Updates an existing project trigger",
        "operationId": "ModifyResponseDescriptor[Projects.ProjectTrigger.ProjectTrigger,ProjectTriggerResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectTriggerResource",
            "in": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectTriggerResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Delete a ProjectTriggerResource by ID",
        "description": "Deletes an existing project trigger.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Projects.ProjectTrigger.ProjectTrigger,ProjectTriggerResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectTriggerResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projecttriggers": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Gets all the project triggers in the current Octopus installation, sorted by Id",
        "operationId": "IndexResponseDescriptor[Projects.ProjectTrigger.ProjectTrigger,ProjectTriggerResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectTriggerResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectTriggerResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Create a ProjectTriggerResource",
        "description": "Creates a new project trigger",
        "operationId": "CreateResponseDescriptor[Projects.ProjectTrigger.ProjectTrigger,ProjectTriggerResource]",
        "parameters": [
          {
            "name": "ProjectTriggerResource",
            "in": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectTriggerResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/triggers": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Lists all the project triggers for the given project",
        "operationId": "ChildIndexResponseDescriptor[Projects.Project,Projects.ProjectTrigger.ProjectTrigger,ProjectResource,ProjectTriggerResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/proxies/{id}": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a ProxyResource by ID",
        "description": "Gets a proxy by ID.",
        "operationId": "LoadResponseDescriptor[Environments.Proxy,ProxyResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProxyResource by ID",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Proxies"
        ],
        "summary": "Modify a ProxyResource by ID",
        "description": "Modifies an existing proxy.",
        "operationId": "ModifyResponseDescriptor[Environments.Proxy,ProxyResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProxyResource",
            "in": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProxyResource Modified",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Proxies"
        ],
        "summary": "Delete a ProxyResource by ID",
        "description": "Deletes an existing proxy.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Environments.Proxy,ProxyResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProxyResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/proxies": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a list of ProxyResources",
        "description": "Lists all of the proxies in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Environments.Proxy,ProxyResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProxyResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProxyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Proxies"
        ],
        "summary": "Create a ProxyResource",
        "description": "Creates a proxy.",
        "operationId": "CreateResponseDescriptor[Environments.Proxy,ProxyResource]",
        "parameters": [
          {
            "name": "ProxyResource",
            "in": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProxyResource Created",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/proxies/all": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a list of ProxyResources",
        "description": "Lists the name and ID of all of the proxies in the current Octopus installation. The results will be sorted by name.",
        "operationId": "ListAllResponseDescriptor[Environments.Proxy,ProxyResource]",
        "responses": {
          "200": {
            "description": "Load all ProxyResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProxyResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases in the current Octopus installation, from all projects. The results will be sorted from most recent to least recent release.",
        "operationId": "IndexResponseDescriptor[Projects.Release,ReleaseResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ReleaseResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Create a ReleaseResource",
        "description": "Creates a new release.",
        "operationId": "CreateResponseDescriptor[Projects.Release,ReleaseResource]",
        "parameters": [
          {
            "name": "ReleaseResource",
            "in": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ReleaseResource Created",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.",
        "operationId": "ChildIndexResponseDescriptor[Projects.Project,Projects.Release,ProjectResource,ReleaseResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/releases/{version}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets a single release by project ID and version number.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ReleaseByProjectAndVersionResponder]",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "ERROR - NOT DEFINED",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No version parameter was provided.\r\nNo id parameter was provided."
          },
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a ReleaseResource by ID",
        "description": "Gets a release by ID.",
        "operationId": "LoadResponseDescriptor[Projects.Release,ReleaseResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ReleaseResource by ID",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Releases"
        ],
        "summary": "Modify a ReleaseResource by ID",
        "description": "Updates an existing release.",
        "operationId": "ModifyResponseDescriptor[Projects.Release,ReleaseResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ReleaseResource",
            "in": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource Modified",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Releases"
        ],
        "summary": "Delete a ReleaseResource by ID",
        "description": "Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Projects.Release,ReleaseResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/progression": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ReleaseLifecycleProgressionAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments/template": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentTemplateAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTemplateResource"
            }
          },
          "500": {
            "description": "A lifecycle has not been assigned to this project."
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments/preview/{environment}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentPreviewAction]",
        "parameters": [
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          },
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments/preview/{environment}/{tenant}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment for the given tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentPreviewAction]",
        "parameters": [
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          },
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of DeploymentResources",
        "description": "Lists all of the deployments that belong to the given release. Deployments will be ordered from most recent to least recent.",
        "operationId": "ChildIndexResponseDescriptor[Projects.Release,Projects.Deployment,ReleaseResource,DeploymentResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ReleaseResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/defects": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all defects for a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListDefectsResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the defect",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          },
          "200": {
            "description": "ResourceCollection[DefectResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DefectResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Record defect in a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DefectReportedResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "You must provide a description.\r\nAn unresolved defect already exists for this release.\r\nNo request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/defects/resolve": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Update or resolve defect in a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DefectResolvedResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "Index refers to an invalid defect.\r\nDefect has already been resolved.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/snapshot-variables": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ReleaseSnapshotVariablesAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/reporting/deployments/xml": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "description": "Provides an XML report that contains all of the information about deployments\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentsXmlResponder]",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/reporting/deployments-counted-by-week": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "description": "Provides a report summarizing the weekly deployments per project over the last 6 months\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.DeploymentsByProjectReportResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[ReportDeploymentCountOverTimeResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportDeploymentCountOverTimeResource"
              }
            }
          },
          "400": {
            "description": "A projectIds query string parameter is required."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/stop": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been stopped.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SchedulerStopResponder]",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/start": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been started.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SchedulerStartResponder]",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/trigger": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been triggered.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SchedulerTriggerResponder]",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/{name}/logs": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Get the details of a scheduled task.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ScheduledTaskDetailsResponder]",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the task",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No name parameter was provided."
          },
          "200": {
            "description": "ScheduledTaskDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/ScheduledTaskDetailsResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/{name}/logs/raw": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Get the details of a scheduled task as raw text.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ScheduledTaskRawDetailsResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverconfiguration": {
      "get": {
        "tags": [
          "ServerConfiguration"
        ],
        "description": "Gets information about the editable server configuration in use by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ServerConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "ServerConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/ServerConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ServerConfiguration"
        ],
        "description": "Updates the server configuration used by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ServerConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverconfiguration/settings": {
      "get": {
        "tags": [
          "ServerConfiguration"
        ],
        "description": "Gets information about the server configuration in use by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.ServerConfigurationSettingsListAction]",
        "responses": {
          "200": {
            "description": "IEnumerable[ServerConfigurationSettingsResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerConfigurationSettingsResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Shows information about the status of the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Status.ServerStatusResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/smtpconfiguration": {
      "get": {
        "tags": [
          "SmtpConfiguration"
        ],
        "description": "Gets information about the SMTP (email) settings in use by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SmtpConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "SmtpConfiguration"
        ],
        "description": "Updates the SMTP settings used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SmtpConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/logs": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Retrieves the most recent high-priority log messages from this execution of the Octopus Server process.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Status.RecentLogsResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/system-info": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Provides information about the Octopus Server process and the machine on which it is running.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Status.SystemInfoResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/gc-collect": {
      "post": {
        "tags": [
          "Status"
        ],
        "description": "Forces a GC collect.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Status.SystemGarbageCollectResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/system-report": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Creates a .zip archive containing an aggregate of the other system information APIs.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Status.SystemReportResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/nuget": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Provides statistics for the built-in package repository.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.NuGet.BuiltInFeedStatsResponder]",
        "responses": {
          "200": {
            "description": "BuiltInFeedStatsResource resource returned",
            "schema": {
              "$ref": "#/definitions/BuiltInFeedStatsResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/extensions": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Provides statistics for the loaded server extensions.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Status.ExtensionStatsResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[ExtensionsInfoResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionsInfoResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/timezones": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Lists timezones supported by the server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListServerTimezonesResponder]",
        "responses": {
          "200": {
            "description": "IEnumerable[ServerTimezoneResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerTimezoneResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/subscriptions/{id}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a SubscriptionResource by ID",
        "description": "Get a subscription",
        "operationId": "LoadResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load SubscriptionResource by ID",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Modify a SubscriptionResource by ID",
        "description": "Updates an existing subscription",
        "operationId": "ModifyResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "SubscriptionResource",
            "in": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SubscriptionResource Modified",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Delete a SubscriptionResource by ID",
        "description": "Deletes an existing subscription.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SubscriptionResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/subscriptions": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all of the subscriptions in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load SubscriptionResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[SubscriptionResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Create a SubscriptionResource",
        "description": "Creates a new subscription",
        "operationId": "CreateResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
        "parameters": [
          {
            "name": "SubscriptionResource",
            "in": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SubscriptionResource Created",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/subscriptions/all": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all the subscriptions in the Octopus Deploy installation.",
        "operationId": "ListAllResponseDescriptor[Subscriptions.Subscription,SubscriptionResource]",
        "responses": {
          "200": {
            "description": "Load all SubscriptionResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a list of TagSetResources",
        "description": "Lists all of the tag sets in the current Octopus installation. The results will be sorted alphabetically by the `SortOrder` field on each tag set.",
        "operationId": "IndexResponseDescriptor[TagSets.TagSet,TagSetResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TagSetResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TagSetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "TagSets"
        ],
        "summary": "Create a TagSetResource",
        "description": "Creates a new tag set.",
        "operationId": "CreateResponseDescriptor[TagSets.TagSet,TagSetResource]",
        "parameters": [
          {
            "name": "TagSetResource",
            "in": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TagSetResource Created",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets/all": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a list of TagSetResources",
        "description": "Lists the details of all of the tag sets in the current Octopus installation. The results will be sorted by the `SortOrder` field on each tag set.",
        "operationId": "ListAllResponseDescriptor[TagSets.TagSet,TagSetResource]",
        "responses": {
          "200": {
            "description": "Load all TagSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets/{id}": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a TagSetResource by ID",
        "description": "Gets a tag set by ID.",
        "operationId": "LoadResponseDescriptor[TagSets.TagSet,TagSetResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TagSetResource by ID",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "TagSets"
        ],
        "summary": "Modify a TagSetResource by ID",
        "description": "Modifies an existing tag set.",
        "operationId": "ModifyResponseDescriptor[TagSets.TagSet,TagSetResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TagSetResource",
            "in": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TagSetResource Modified",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TagSets"
        ],
        "summary": "Delete a TagSetResource by ID",
        "description": "Deletes an existing tag set.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[TagSets.TagSet,TagSetResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TagSetResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets/sortorder": {
      "put": {
        "tags": [
          "TagSets"
        ],
        "description": "Takes an array of tag set IDs as the request body, uses the order of items in the array to sort the tag sets on the server. The ID of every tag set must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.SortTagSetsResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/details": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Gets a single task by ID, including the full task log as a tree of activity elements.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TaskDetailsResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskDetailsServerResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskDetailsServerResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/raw": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Gets the full task log of a given resource as plain text. Useful when the log needs to be rendered to a console or sent as an email attachment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TaskRawResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a TaskResource by ID",
        "description": "Gets a single task by ID.",
        "operationId": "LoadResponseDescriptor[ServerTasks.ServerTask,TaskResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TaskResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TaskResource by ID",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/queued-behind": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Gets a list of tasks that this task is currently queued behind.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.TaskQueuedBehindResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Lists all of the tasks in the current Octopus installation. The results will be sorted from newest to oldest.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomQueryResponseDescriptor[Octopus.Server.Web.Api.Actions.ListTasksResponder]",
        "responses": {
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a TaskResource",
        "description": "Creates a new task.",
        "operationId": "CreateResponseDescriptor[ServerTasks.ServerTask,TaskResource]",
        "parameters": [
          {
            "name": "TaskResource",
            "in": "body",
            "description": "The TaskResource resource to create",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TaskResource Created",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/rerun/{id}": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Creates a new task and executes it, using a given task as the input. Note that deployment tasks cannot be re-run.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TaskRerunResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "This task cannot be re-run.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/cancel": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Marks the given task as canceled.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TaskCancelResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/state": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Change the state of a task\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TaskStateResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No state was provided.\r\nNo reason was provided.\r\nThe state is not recognized as a task state.\r\nThe task can not be put into the state.  Valid states are: Canceled, Failed, Success.\r\nThe task is already in the state.\r\nThe task state can not be changed to the selected state.  It can only be changed out of the states: Canceled, Failed, Success.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a TeamResource by ID",
        "description": "Gets a team by ID.",
        "operationId": "LoadResponseDescriptor[Users.Team,TeamResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TeamResource by ID",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Modify a TeamResource by ID",
        "description": "Modifies an existing team. The Everyone team is treated as a special case and its members and external groups may not be changed.",
        "operationId": "ModifyResponseDescriptor[Users.Team,TeamResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TeamResource",
            "in": "body",
            "description": "The TeamResource resource to create",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TeamResource Modified",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Delete a TeamResource by ID",
        "description": "Deletes an existing team.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Users.Team,TeamResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TeamResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of TeamResources",
        "description": "Lists all of the teams in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Users.Team,TeamResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TeamResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TeamResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a TeamResource",
        "description": "Creates a team.",
        "operationId": "CreateResponseDescriptor[Users.Team,TeamResource]",
        "parameters": [
          {
            "name": "TeamResource",
            "in": "body",
            "description": "The TeamResource resource to create",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TeamResource Created",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/teams/all": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of TeamResources",
        "description": "Lists the name and ID of all of the teams in the current Octopus installation. The results will be sorted by name.",
        "operationId": "ListAllResponseDescriptor[Users.Team,TeamResource]",
        "responses": {
          "200": {
            "description": "Load all TeamResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/all": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a list of TenantResources",
        "description": "Lists all of the tenants in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Tenants.Tenant,TenantResource]",
        "responses": {
          "200": {
            "description": "Load all TenantResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/variableset-test": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Checks tenants for matching variable set rule\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantVariableSetTestAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/variables-missing": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Returns list of tenants who are missing required variables\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantVariablesMissingAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/{id}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a TenantResource by ID",
        "description": "Gets a single tenant by ID.",
        "operationId": "LoadResponseDescriptor[Tenants.Tenant,TenantResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TenantResource by ID",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Modify a TenantResource by ID",
        "description": "Modifies an existing tenant.",
        "operationId": "ModifyResponseDescriptor[Tenants.Tenant,TenantResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TenantResource",
            "in": "body",
            "description": "The TenantResource resource to create",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TenantResource Modified",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a TenantResource by ID",
        "description": "Deletes an existing tenant.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Tenants.Tenant,TenantResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a list of TenantResources",
        "description": "Lists all of the tenants in the current Octopus installation. The results will be sorted alphabetically by name, and returned 30 at a time.",
        "operationId": "IndexResponseDescriptor[Tenants.Tenant,TenantResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TenantResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TenantResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create a TenantResource",
        "description": "Creates a new tenant.",
        "operationId": "CreateResponseDescriptor[Tenants.Tenant,TenantResource]",
        "parameters": [
          {
            "name": "TenantResource",
            "in": "body",
            "description": "The TenantResource resource to create",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TenantResource Created",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/{id}/logo": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Gets the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantLogoGetResponder]",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantLogoPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantLogoPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/{id}/variables": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Gets all the available variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantVariablesGetResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantVariablesPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantVariablesPutResponder]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/tag-test": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Checks tenants for matching tags rule\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantTagTestAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenantvariables/all": {
      "get": {
        "tags": [
          "TenantVariables"
        ],
        "description": "Lists all of the tenant variables in the current Octopus installation. The results will be sorted alphabetically by id.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.TenantVariablesAllResponder]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/upgradeconfiguration": {
      "get": {
        "tags": [
          "UpgradeConfiguration"
        ],
        "description": "Gets information about the upgrade configuration in use by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.UpgradeConfigurationGetAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "UpgradeConfiguration"
        ],
        "description": "Updates the upgrade configuration used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.UpgradeConfigurationUpdateAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/useronboarding": {
      "get": {
        "tags": [
          "UserOnboarding"
        ],
        "description": "Gets information about how far the Octopus Server is towards having its first release deployed.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.OnboardingGetAction]",
        "responses": {
          "200": {
            "description": "OnboardingResource resource returned",
            "schema": {
              "$ref": "#/definitions/OnboardingResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/userroles/{id}": {
      "get": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Get a UserRoleResource by ID",
        "description": "Gets a single user role by ID.",
        "operationId": "LoadResponseDescriptor[Users.UserRole,UserRoleResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserRoleResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load UserRoleResource by ID",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Modify a UserRoleResource by ID",
        "description": "Modifies an existing user role definition.",
        "operationId": "ModifyResponseDescriptor[Users.UserRole,UserRoleResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserRoleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "UserRoleResource",
            "in": "body",
            "description": "The UserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserRoleResource Modified",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Delete a UserRoleResource by ID",
        "description": "Deletes an existing user role.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Users.UserRole,UserRoleResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserRoleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserRoleResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/userroles": {
      "get": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Get a list of UserRoleResources",
        "description": "Lists all of the user roles in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "IndexResponseDescriptor[Users.UserRole,UserRoleResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load UserRoleResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[UserRoleResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Create a UserRoleResource",
        "description": "Creates a custom user role definition.",
        "operationId": "CreateResponseDescriptor[Users.UserRole,UserRoleResource]",
        "parameters": [
          {
            "name": "UserRoleResource",
            "in": "body",
            "description": "The UserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "UserRoleResource Created",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/userroles/all": {
      "get": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Get a list of UserRoleResources",
        "description": "Lists all of the user roles in the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "ListAllResponseDescriptor[Users.UserRole,UserRoleResource]",
        "responses": {
          "200": {
            "description": "Load all UserRoleResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRoleResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Authenticates a user and returns a response with a cookie for the current user. This cookie can be submitted with future requests to avoid re-authentication.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserLoginAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Revokes the authentication cookie from the current session.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserLogoutAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Registers a new user and responds with an authentication cookie. Unless the first administrator user is being registered, an invitation code must be provided.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserRegisterAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Gets information about the current user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserGetCurrentAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}/permissions": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Gets summarized permission information. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserGetPermissionsAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}/permissions/export": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Gets list of permissions as a csv file. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "FileResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserGetPermissionsExportAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of UserResources",
        "description": "Lists all of the users in the current Octopus installation, from all teams. The results will be sorted alphabetically by username.",
        "operationId": "IndexResponseDescriptor[Users.User,UserResource]",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Load UserResource collection",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[UserResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Creates a new user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserCreateAction]",
        "responses": {
          "201": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nYou cannot add multiple logins for the same identity provider.\r\nUsername is reserved and can't be used to create new users.\r\nUser creation failed."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a UserResource by ID",
        "description": "Gets a single user by ID.",
        "operationId": "LoadResponseDescriptor[Users.User,UserResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load UserResource by ID",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Modifies an existing user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserUpdateAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "You cannot deactivate your own account.\r\nYour email address is not available.\r\nPasswords cannot be set for service user accounts.\r\nA user with a matching external login already exists.\r\nYou cannot add multiple logins for the same identity provider.\r\nYour Octopus administrators have disabled the ability to edit your own logins.\r\nNo request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a UserResource by ID",
        "description": "Delete an existing user.",
        "operationId": "DeleteOnBackgroundResponseDescriptor[Users.User,UserResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource Deleted",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/invitations/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a InvitationResource by ID",
        "description": "Gets an existing invitation by ID.",
        "operationId": "LoadResponseDescriptor[Users.Invitation,InvitationResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the InvitationResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load InvitationResource by ID",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/invitations": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a InvitationResource",
        "description": "Invite a user to register.",
        "operationId": "CreateResponseDescriptor[Users.Invitation,InvitationResource]",
        "parameters": [
          {
            "name": "InvitationResource",
            "in": "body",
            "description": "The InvitationResource resource to create",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvitationResource Created",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/all": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of UserResources",
        "description": "Lists all of the users in the current Octopus installation. The results will be sorted alphabetically by `Username`.",
        "operationId": "ListAllResponseDescriptor[Users.User,UserResource]",
        "responses": {
          "200": {
            "description": "Load all UserResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/authentication/{?userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Provides the details of the enabled authentication providers and whether the current user can edit logins for the given user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserAuthenticationResponder]",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the resource being edited",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserAuthenticationResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserAuthenticationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/identity-metadata": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Gets the metadata to describe the claims/fields used by authentication providers that support identities.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserIdentityMetadataAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/external-search": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Searches for users, using the authentication providers.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.Users.UserExternalSearchAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/all": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a list of VariableSetResources",
        "description": "Lists all the variable sets in the Octopus Deploy installation.",
        "operationId": "ListAllResponseDescriptor[Variables.VariableSet,VariableSetResource]",
        "responses": {
          "200": {
            "description": "Load all VariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/{id}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a VariableSetResource by ID",
        "description": "Gets a variable set by ID.",
        "operationId": "LoadResponseDescriptor[Variables.VariableSet,VariableSetResource]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the VariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load VariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Variables"
        ],
        "description": "Updates a variable set.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VariableSetUpdateAction]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "You cannot modify this variable set because the set is frozen. You'll need to create a new variable set instead.\r\nChanges to these variables could not be saved, because another user has made changes to the variables between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nChanges to these variables could not be saved, because your available environment scopes changed while you were editing the variables. Please reload or open a new tab to make your changes.\r\nVariable set only scoped to owner.\r\nVariable validation failed.\r\nPrompted variables cannot be scoped to anything except an environment.\r\nVariable ids must be unique.\r\nNo request body was supplied.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/names": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "List the names of variables that can be used in deployment actions. If a project is specified, this will include variables in that project.  If a project environments filter is specified, project variables only scoped to the environment will be excluded. \r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VariableNamesListAction]",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/preview": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "List the evaluated variabled for a deployment. \r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.VariablePreviewListAction]",
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/nonPrintableChars": {
      "post": {
        "tags": [
          "Variables"
        ],
        "description": "Get list of non-printable variable characters.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "CustomActionResponseDescriptor[Octopus.Server.Web.Api.Actions.CheckForNonPrintableCharsAction]",
        "responses": {
          "200": {
            "description": "IEnumerable[Int32] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    }
  },
  "definitions": {
    "AccountResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantedDeploymentParticipation": {
          "format": "int32",
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "integer"
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AccountType": {
          "format": "int32",
          "enum": [
            "None",
            "UsernamePassword",
            "SshKeyPair",
            "AzureSubscription",
            "AzureServicePrincipal",
            "AmazonWebServicesAccount"
          ],
          "type": "integer",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AccountUsageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetUsageEntry"
          }
        },
        "DeploymentProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsage"
          }
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsage"
          }
        },
        "ProjectVariableSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectVariableSetUsage"
          }
        },
        "LibraryVariableSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetUsageEntry"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateParameterResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "HelpText": {
          "type": "string"
        },
        "DefaultValue": {
          "$ref": "#/definitions/PropertyValueResource"
        },
        "DisplaySettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateResource": {
      "required": [
        "Name",
        "ActionType"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ActionType": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "CommunityActionTemplateId": {
          "type": "string"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          },
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateSearchResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Website": {
          "type": "string"
        },
        "IsInstalled": {
          "type": "boolean"
        },
        "IsBuiltIn": {
          "type": "boolean"
        },
        "Category": {
          "type": "string"
        },
        "CommunityActionTemplateId": {
          "type": "string"
        },
        "HasUpdate": {
          "type": "boolean"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateUsageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ActionTemplateId": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "ActionId": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "StepId": {
          "type": "string"
        },
        "StepName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionUpdateResultResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Outcome": {
          "format": "int32",
          "enum": [
            "Success",
            "ManualMergeRequired",
            "DefaultParamterValueMissing"
          ],
          "type": "integer"
        },
        "ManualMergeRequiredReasonsByPropertyName": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "NamesOfNewParametersMissingDefaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActivityLogElement": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string"
        },
        "OccurredAt": {
          "format": "date-time",
          "type": "string"
        },
        "MessageText": {
          "type": "string"
        },
        "Detail": {
          "type": "string"
        }
      }
    },
    "ActivityLogEntry": {
      "type": "object",
      "properties": {
        "OccurredAt": {
          "format": "date-time",
          "type": "string"
        },
        "Category": {
          "format": "int32",
          "enum": [
            "Trace",
            "Verbose",
            "Info",
            "Wait",
            "Highlight",
            "Gap",
            "Alert",
            "Warning",
            "Error",
            "Fatal",
            "Planned",
            "Updated",
            "Finished",
            "Abandoned"
          ],
          "type": "integer"
        },
        "MessageText": {
          "type": "string"
        },
        "Detail": {
          "type": "string"
        }
      }
    },
    "ActivityLogTreeNode": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Started": {
          "format": "date-time",
          "type": "string"
        },
        "Ended": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "format": "int32",
          "enum": [
            "Pending",
            "Running",
            "Success",
            "Failed",
            "Skipped",
            "SuccessWithWarning",
            "Canceled"
          ],
          "type": "integer"
        },
        "ShowAtSummaryLevel": {
          "type": "boolean",
          "readOnly": true
        },
        "ProgressPercentage": {
          "format": "int32",
          "type": "integer"
        },
        "ProgressMessage": {
          "type": "string"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogTreeNode"
          },
          "readOnly": true
        },
        "LogElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogEntry"
          },
          "readOnly": true
        }
      }
    },
    "AlertResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Severity": {
          "format": "int32",
          "enum": [
            "Info",
            "Warning",
            "Danger"
          ],
          "type": "integer"
        },
        "Message": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ApiKeyResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Purpose": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "ApiKey": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ArtifactResource": {
      "required": [
        "Filename"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Filename": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        },
        "RelatedDocumentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LogCorrelationId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AuthenticationProviderElement": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "IdentityType": {
          "format": "int32",
          "enum": [
            "Guest",
            "UsernamePassword",
            "ActiveDirectory",
            "OAuth"
          ],
          "type": "integer"
        },
        "FormsLoginEnabled": {
          "type": "boolean"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "JavascriptLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CSSLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AuthenticationProviderThatSupportsGroups": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "IsRoleBased": {
          "type": "boolean"
        },
        "SupportsGroupLookup": {
          "type": "boolean"
        },
        "LookupUri": {
          "type": "string"
        }
      }
    },
    "AuthenticationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AuthenticationProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationProviderElement"
          }
        },
        "AutoLoginEnabled": {
          "type": "boolean"
        },
        "AnyAuthenticationProvidersSupportPasswordManagement": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AutoDeployReleaseOverrideResource": {
      "type": "object",
      "properties": {
        "EnvironmentId": {
          "type": "string",
          "readOnly": true
        },
        "TenantId": {
          "type": "string",
          "readOnly": true
        },
        "ReleaseId": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AzureCloudServiceResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Location": {
          "type": "string"
        }
      }
    },
    "AzureResourceGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "AzureWebSite": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "WebSpace": {
          "type": "string"
        },
        "ResourceGroup": {
          "type": "string"
        },
        "Region": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "BuiltInFeedStatsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "TotalPackages": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "BuiltInRepositoryConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "DeleteUnreleasedPackagesAfterDays": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Notes": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificateData": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "TenantedDeploymentParticipation": {
          "format": "int32",
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "integer"
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Archived": {
          "format": "date-time",
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "ReplacedBy": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CertificateConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "SignatureAlgorithm": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "CertificateData": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "Password": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantedDeploymentParticipation": {
          "format": "int32",
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "integer"
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CertificateDataFormat": {
          "format": "int32",
          "enum": [
            "Pkcs12",
            "Der",
            "Pem"
          ],
          "type": "integer"
        },
        "Archived": {
          "format": "date-time",
          "type": "string"
        },
        "ReplacedBy": {
          "type": "string"
        },
        "SubjectDistinguishedName": {
          "type": "string"
        },
        "SubjectCommonName": {
          "type": "string"
        },
        "SubjectOrganization": {
          "type": "string"
        },
        "IssuerDistinguishedName": {
          "type": "string"
        },
        "IssuerCommonName": {
          "type": "string"
        },
        "IssuerOrganization": {
          "type": "string"
        },
        "SelfSigned": {
          "type": "boolean"
        },
        "Thumbprint": {
          "type": "string"
        },
        "NotAfter": {
          "format": "date-time",
          "type": "string"
        },
        "NotBefore": {
          "format": "date-time",
          "type": "string"
        },
        "IsExpired": {
          "type": "boolean"
        },
        "HasPrivateKey": {
          "type": "boolean"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "SerialNumber": {
          "type": "string"
        },
        "SignatureAlgorithmName": {
          "type": "string"
        },
        "SubjectAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CertificateChain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/X509Certificate"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateUsageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateVariableUsageResource[ProjectResource]"
          }
        },
        "LibraryVariableSetUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateVariableUsageResource[LibraryVariableSetResource]"
          }
        },
        "TenantUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateVariableUsageResource[TenantResource]"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateVariableUsageResource[LibraryVariableSetResource]": {
      "type": "object",
      "properties": {
        "Owner": {
          "$ref": "#/definitions/LibraryVariableSetResource"
        },
        "Variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CertificateVariableUsageResource[ProjectResource]": {
      "type": "object",
      "properties": {
        "Owner": {
          "$ref": "#/definitions/ProjectResource"
        },
        "Variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CertificateVariableUsageResource[TenantResource]": {
      "type": "object",
      "properties": {
        "Owner": {
          "$ref": "#/definitions/TenantResource"
        },
        "Variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ChannelResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "LifecycleId": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "Rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelVersionRuleResource"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ChannelVersionRuleResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "VersionRange": {
          "type": "string"
        },
        "Tag": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CloudTemplateMetadata": {
      "type": "object",
      "properties": {
        "Metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "Values": {
          "type": "object"
        }
      }
    },
    "CommunityActionTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "Website": {
          "type": "string"
        },
        "HistoryUrl": {
          "type": "string"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          },
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ConfigurationSectionMetadata": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Control": {
      "type": "object",
      "properties": {}
    },
    "DashboardConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IncludedProjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedEnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedTenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectLimit": {
          "format": "int32",
          "type": "integer"
        },
        "IncludedTenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardEnvironmentResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardItemResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "ReleaseId": {
          "type": "string"
        },
        "DeploymentId": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "State": {
          "format": "int32",
          "enum": [
            "Queued",
            "Executing",
            "Failed",
            "Canceled",
            "TimedOut",
            "Success",
            "Cancelling"
          ],
          "type": "integer"
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "IsCurrent": {
          "type": "boolean"
        },
        "IsPrevious": {
          "type": "boolean"
        },
        "IsCompleted": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardProjectGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardProjectResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "ProjectGroupId": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CanPerformUntenantedDeployment": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardProjectResource"
          }
        },
        "ProjectGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardProjectGroupResource"
          }
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardEnvironmentResource"
          }
        },
        "Tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardTenantResource"
          }
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardItemResource"
          }
        },
        "PreviousItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardItemResource"
          }
        },
        "ProjectLimit": {
          "format": "int32",
          "type": "integer"
        },
        "IsFiltered": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardTenantResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ProjectEnvironments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DefectResource": {
      "required": [
        "Description"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Status": {
          "format": "int32",
          "enum": [
            "Unresolved",
            "Resolved"
          ],
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentActionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ActionType": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "CanBeUsedForProjectVersioning": {
          "type": "boolean"
        },
        "Environments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ExcludedEnvironments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Channels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentPreviewResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "StepsToExecute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTemplateStep"
          }
        },
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "UseGuidedFailureModeByDefault": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentProcessResource": {
      "required": [
        "Version"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentStepResource"
          },
          "readOnly": true
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "LastSnapshotId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentPromomotionTenant": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentPromotionTarget": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentResource": {
      "required": [
        "ReleaseId",
        "EnvironmentId"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ReleaseId": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "ForcePackageDownload": {
          "type": "boolean"
        },
        "ForcePackageRedeployment": {
          "type": "boolean"
        },
        "SkipActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpecificMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExcludedMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "ManifestVariableSetId": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        },
        "Comments": {
          "type": "string"
        },
        "FormValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentStepResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PackageRequirement": {
          "format": "int32",
          "enum": [
            "LetOctopusDecide",
            "BeforePackageAcquisition",
            "AfterPackageAcquisition"
          ],
          "type": "integer"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "Condition": {
          "format": "int32",
          "enum": [
            "Success",
            "Failure",
            "Always",
            "Variable"
          ],
          "type": "integer"
        },
        "StartTrigger": {
          "format": "int32",
          "enum": [
            "StartAfterPrevious",
            "StartWithPrevious"
          ],
          "type": "integer"
        },
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentActionResource"
          },
          "readOnly": true
        }
      }
    },
    "DeploymentTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsDeploymentProcessModified": {
          "type": "boolean"
        },
        "IsVariableSetModified": {
          "type": "boolean"
        },
        "IsLibraryVariableSetModified": {
          "type": "boolean"
        },
        "DeploymentNotes": {
          "type": "string"
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        },
        "TenantPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromomotionTenant"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentTemplateStep": {
      "type": "object",
      "properties": {
        "ActionId": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "ActionNumber": {
          "type": "string"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineDeploymentPreview"
          }
        },
        "CanBeSkipped": {
          "type": "boolean"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "HasNoApplicableMachines": {
          "type": "boolean"
        },
        "UnavailableMachines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "ExcludedMachines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        }
      }
    },
    "DisplayInfo": {
      "type": "object",
      "properties": {
        "Required": {
          "type": "boolean"
        },
        "ReadOnly": {
          "type": "boolean"
        },
        "Label": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Options": {
          "$ref": "#/definitions/OptionsMetadata"
        },
        "ListApi": {
          "$ref": "#/definitions/ListApiMetadata"
        }
      }
    },
    "DocumentTypeDocument": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "EndpointResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CommunicationStyle": {
          "format": "int32",
          "enum": [
            "None",
            "TentaclePassive",
            "TentacleActive",
            "Ssh",
            "OfflineDrop",
            "AzureWebApp",
            "Ftp",
            "AzureCloudService"
          ],
          "type": "integer",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EnvironmentResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EventCategoryDocument": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "EventGroupDocument": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "EventCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EventNotificationSubscription": {
      "type": "object",
      "properties": {
        "Filter": {
          "$ref": "#/definitions/EventNotificationSubscriptionFilter"
        },
        "EmailTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EmailFrequencyPeriod": {
          "type": "string"
        },
        "EmailPriority": {
          "format": "int32",
          "enum": [
            "Normal",
            "Low",
            "High"
          ],
          "type": "integer"
        },
        "EmailDigestLastProcessed": {
          "format": "date-time",
          "type": "string"
        },
        "EmailDigestLastProcessedEventAutoId": {
          "format": "int64",
          "type": "integer"
        },
        "EmailShowDatesInTimeZoneId": {
          "type": "string"
        },
        "WebhookURI": {
          "type": "string"
        },
        "WebhookTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "WebhookTimeout": {
          "type": "string"
        },
        "WebhookHeaderKey": {
          "type": "string"
        },
        "WebhookHeaderValue": {
          "type": "string"
        },
        "WebhookLastProcessed": {
          "format": "date-time",
          "type": "string"
        },
        "WebhookLastProcessedEventAutoId": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "EventNotificationSubscriptionFilter": {
      "type": "object",
      "properties": {
        "Users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Projects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Environments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tenants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DocumentTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EventReference": {
      "type": "object",
      "properties": {
        "ReferencedDocumentId": {
          "type": "string",
          "readOnly": true
        },
        "StartIndex": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Length": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "EventResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "RelatedDocumentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Category": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "IdentityEstablishedWith": {
          "type": "string"
        },
        "Occurred": {
          "format": "date-time",
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "MessageHtml": {
          "type": "string"
        },
        "MessageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventReference"
          }
        },
        "Comments": {
          "type": "string"
        },
        "Details": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ExtensionsInfoResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "AssemblyName": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "IsCustom": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FeaturesConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsMultiTenancyEnabled": {
          "type": "boolean"
        },
        "IsCommunityActionTemplatesEnabled": {
          "type": "boolean"
        },
        "IsBuiltInRepoSyncEnabled": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FeedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "FeedUri": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "Password": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "FeedType": {
          "format": "int32",
          "enum": [
            "None",
            "NuGet",
            "Docker",
            "Maven",
            "OctopusProject",
            "GitHub"
          ],
          "type": "integer",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Form": {
      "type": "object",
      "properties": {
        "Values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormElement"
          }
        }
      }
    },
    "FormElement": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Control": {
          "$ref": "#/definitions/Control",
          "readOnly": true
        },
        "IsValueRequired": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "IdentityClaimResource": {
      "type": "object",
      "properties": {
        "Value": {
          "type": "string"
        },
        "IsIdentifyingClaim": {
          "type": "boolean"
        }
      }
    },
    "IdentityResource": {
      "type": "object",
      "properties": {
        "IdentityProviderName": {
          "type": "string"
        },
        "Claims": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IdentityClaimResource"
          },
          "readOnly": true
        }
      }
    },
    "InterruptionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "IsPending": {
          "type": "boolean"
        },
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "RelatedDocumentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResponsibleTeamIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResponsibleUserId": {
          "type": "string"
        },
        "CanTakeResponsibility": {
          "type": "boolean"
        },
        "HasResponsibility": {
          "type": "boolean"
        },
        "TaskId": {
          "type": "string"
        },
        "CorrelationId": {
          "type": "string"
        },
        "IsLinkedToOtherInterruption": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "InvitationResource": {
      "required": [
        "AddToTeamIds"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AddToTeamIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "InvitationCode": {
          "type": "string"
        },
        "Expires": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Library": {
      "type": "object",
      "properties": {
        "LibraryVariableSetId": {
          "type": "string",
          "readOnly": true
        },
        "LibraryVariableSetName": {
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "Variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LibraryVariableSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "VariableSetId": {
          "type": "string"
        },
        "ContentType": {
          "format": "int32",
          "enum": [
            "Variables",
            "ScriptModule"
          ],
          "type": "integer"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LibraryVariableSetUsageEntry": {
      "type": "object",
      "properties": {
        "LibraryVariableSetId": {
          "type": "string"
        },
        "LibraryVariableSetName": {
          "type": "string"
        }
      }
    },
    "LicenseResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "UseFreeVersion": {
          "type": "boolean"
        },
        "LicenseText": {
          "type": "string"
        },
        "LicenseKey": {
          "type": "string"
        },
        "IsCompliant": {
          "type": "boolean"
        },
        "NoncomplianceReason": {
          "type": "string"
        },
        "MaintenanceExpiresIn": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LicenseStatusResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsCompliant": {
          "type": "boolean"
        },
        "NoncomplianceReason": {
          "type": "string"
        },
        "MaintenanceExpiresIn": {
          "format": "int32",
          "type": "integer"
        },
        "IsGrandfathered": {
          "type": "boolean"
        },
        "NumberOfProjects": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfMachines": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfUsers": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfNodes": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LifecycleProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseProgressionResource"
          }
        },
        "NextDeployments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "NextDeploymentsMinimumRequired": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LifecycleResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseResource"
          },
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "ReleaseRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "Description": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ListApiMetadata": {
      "type": "object",
      "properties": {
        "SelectMode": {
          "type": "string"
        },
        "ApiEndpoint": {
          "type": "string"
        }
      }
    },
    "MachineCleanupPolicy": {
      "type": "object",
      "properties": {
        "DeleteMachinesBehavior": {
          "format": "int32",
          "enum": [
            "DoNotDelete",
            "DeleteUnavailableMachines"
          ],
          "type": "integer"
        },
        "DeleteMachinesElapsedTimeSpan": {
          "type": "string"
        }
      }
    },
    "MachineConnectionStatus": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "MachineId": {
          "type": "string"
        },
        "Logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogElement"
          }
        },
        "Status": {
          "type": "string"
        },
        "CurrentTentacleVersion": {
          "type": "string"
        },
        "LastChecked": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MachineConnectivityPolicy": {
      "type": "object",
      "properties": {
        "MachineConnectivityBehavior": {
          "format": "int32",
          "enum": [
            "ExpectedToBeOnline",
            "MayBeOfflineAndCanBeSkipped"
          ],
          "type": "integer"
        }
      }
    },
    "MachineDeploymentPreview": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        }
      }
    },
    "MachineHealthCheckPolicy": {
      "type": "object",
      "properties": {
        "TentacleEndpointHealthCheckPolicy": {
          "$ref": "#/definitions/MachineScriptPolicy"
        },
        "SshEndpointHealthCheckPolicy": {
          "$ref": "#/definitions/MachineScriptPolicy"
        },
        "HealthCheckInterval": {
          "type": "string"
        }
      }
    },
    "MachinePolicyResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "MachineHealthCheckPolicy": {
          "$ref": "#/definitions/MachineHealthCheckPolicy"
        },
        "MachineConnectivityPolicy": {
          "$ref": "#/definitions/MachineConnectivityPolicy"
        },
        "MachineCleanupPolicy": {
          "$ref": "#/definitions/MachineCleanupPolicy"
        },
        "MachineUpdatePolicy": {
          "$ref": "#/definitions/MachineUpdatePolicy"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MachineResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "Uri": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachinePolicyId": {
          "type": "string"
        },
        "TenantedDeploymentParticipation": {
          "format": "int32",
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "integer"
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Status": {
          "format": "int32",
          "enum": [
            "Online",
            "Offline",
            "Unknown",
            "NeedsUpgrade",
            "CalamariNeedsUpgrade",
            "Disabled"
          ],
          "type": "integer"
        },
        "HealthStatus": {
          "format": "int32",
          "enum": [
            "Healthy",
            "Unavailable",
            "Unknown",
            "HasWarnings",
            "Unhealthy"
          ],
          "type": "integer"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "StatusSummary": {
          "type": "string"
        },
        "IsInProcess": {
          "type": "boolean"
        },
        "Endpoint": {
          "$ref": "#/definitions/EndpointResource"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MachineScriptPolicy": {
      "type": "object",
      "properties": {
        "RunType": {
          "format": "int32",
          "enum": [
            "InheritFromDefault",
            "Inline",
            "OnlyConnectivity"
          ],
          "type": "integer"
        },
        "ScriptBody": {
          "type": "string"
        }
      }
    },
    "MachineUpdatePolicy": {
      "type": "object",
      "properties": {
        "CalamariUpdateBehavior": {
          "format": "int32",
          "enum": [
            "UpdateOnDeployment",
            "UpdateOnNewMachine",
            "UpdateAlways"
          ],
          "type": "integer"
        },
        "TentacleUpdateBehavior": {
          "format": "int32",
          "enum": [
            "NeverUpdate",
            "Update"
          ],
          "type": "integer"
        },
        "TentacleUpdateAccountId": {
          "type": "string"
        }
      }
    },
    "MaintenanceConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsInMaintenanceMode": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "Types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeMetadata"
          }
        }
      }
    },
    "NamedReferenceItem": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "DisplayIdAndName": {
          "type": "boolean"
        }
      }
    },
    "NumericReportData": {
      "type": "object",
      "properties": {
        "Labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Series": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumericReportSeries"
          }
        }
      }
    },
    "NumericReportSeries": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "Data": {
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      }
    },
    "OctopusServerNodeResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "LastSeen": {
          "type": "string"
        },
        "Rank": {
          "type": "string"
        },
        "IsOffline": {
          "type": "boolean"
        },
        "MaxConcurrentTasks": {
          "format": "int32",
          "type": "integer"
        },
        "IsInMaintenanceMode": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OnboardingResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OnboardingTaskResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OnboardingTaskResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Category": {
          "type": "string"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "IsComplete": {
          "type": "boolean"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OptionsMetadata": {
      "type": "object",
      "properties": {
        "SelectMode": {
          "type": "string"
        },
        "Values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageDescriptionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "LatestVersion": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "PackageFromBuiltInFeedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageSizeBytes": {
          "format": "int64",
          "type": "integer"
        },
        "Hash": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Summary": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Published": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "FileExtension": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageNote": {
      "type": "object",
      "properties": {
        "PackageId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        }
      }
    },
    "PackageNoteListResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageNote"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Summary": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Published": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "FileExtension": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageVersionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Version": {
          "type": "string"
        },
        "Published": {
          "format": "date-time",
          "type": "string"
        },
        "SizeBytes": {
          "format": "int64",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        }
      }
    },
    "PermissionDescription": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "SupportedRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PhaseDeploymentResource": {
      "type": "object",
      "properties": {
        "Task": {
          "$ref": "#/definitions/TaskResource"
        },
        "Deployment": {
          "$ref": "#/definitions/DeploymentResource"
        }
      }
    },
    "PhaseProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Blocked": {
          "type": "boolean"
        },
        "Progress": {
          "format": "int32",
          "enum": [
            "Pending",
            "Current",
            "Complete"
          ],
          "type": "integer"
        },
        "Deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseDeploymentResource"
          }
        },
        "AutomaticDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OptionalDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MinimumEnvironmentsBeforePromotion": {
          "format": "int32",
          "type": "integer"
        },
        "IsOptionalPhase": {
          "type": "boolean"
        }
      }
    },
    "PhaseResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "AutomaticDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OptionalDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MinimumEnvironmentsBeforePromotion": {
          "format": "int32",
          "type": "integer"
        },
        "IsOptionalPhase": {
          "type": "boolean"
        },
        "ReleaseRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        }
      }
    },
    "ProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "ChannelEnvironments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReferenceDataItem"
            }
          }
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseProgressionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "ProjectId": {
          "type": "string",
          "readOnly": true
        },
        "ProjectName": {
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "Variables": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/PropertyValueResource"
            }
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectConnectivityPolicy": {
      "type": "object",
      "properties": {
        "SkipMachineBehavior": {
          "format": "int32",
          "enum": [
            "None",
            "SkipUnavailableMachines"
          ],
          "type": "integer"
        },
        "TargetRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowDeploymentsToNoTargets": {
          "type": "boolean"
        }
      }
    },
    "ProjectedTeamReferenceDataItem": {
      "type": "object",
      "properties": {
        "IsDirectlyAssigned": {
          "type": "boolean"
        },
        "ExternalGroupNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ProjectGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RetentionPolicyId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "VariableSetId": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "DiscreteChannelRelease": {
          "type": "boolean"
        },
        "IncludedLibraryVariableSetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DefaultToSkipIfAlreadyInstalled": {
          "type": "boolean"
        },
        "TenantedDeploymentMode": {
          "format": "int32",
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "integer"
        },
        "DefaultGuidedFailureMode": {
          "format": "int32",
          "enum": [
            "EnvironmentDefault",
            "Off",
            "On"
          ],
          "type": "integer"
        },
        "VersioningStrategy": {
          "$ref": "#/definitions/VersioningStrategyResource"
        },
        "ReleaseCreationStrategy": {
          "$ref": "#/definitions/ReleaseCreationStrategyResource"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "AutoDeployReleaseOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoDeployReleaseOverrideResource"
          },
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "ProjectGroupId": {
          "type": "string"
        },
        "LifecycleId": {
          "type": "string"
        },
        "AutoCreateRelease": {
          "type": "boolean"
        },
        "ProjectConnectivityPolicy": {
          "$ref": "#/definitions/ProjectConnectivityPolicy"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectTriggerResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Filter": {
          "$ref": "#/definitions/TriggerFilterResource"
        },
        "Action": {
          "$ref": "#/definitions/TriggerActionResource"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectVariableSetUsage": {
      "type": "object",
      "properties": {
        "ProjectSlug": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsageEntry"
          }
        },
        "IsCurrentlyBeingUsedInProject": {
          "type": "boolean"
        }
      }
    },
    "PropertyMetadata": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "DisplayInfo": {
          "$ref": "#/definitions/DisplayInfo"
        }
      }
    },
    "PropertyValueResource": {
      "type": "object",
      "properties": {
        "IsSensitive": {
          "type": "boolean",
          "readOnly": true
        },
        "Value": {
          "type": "string",
          "readOnly": true
        },
        "SensitiveValue": {
          "$ref": "#/definitions/SensitiveValue",
          "readOnly": true
        }
      }
    },
    "ProxyResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "type": "integer"
        },
        "ProxyType": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "Password": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ReferenceDataItem": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ReleaseCreationStrategyResource": {
      "type": "object",
      "properties": {
        "ReleaseCreationPackageStepId": {
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        }
      }
    },
    "ReleaseProgressionResource": {
      "type": "object",
      "properties": {
        "Release": {
          "$ref": "#/definitions/ReleaseResource"
        },
        "Channel": {
          "$ref": "#/definitions/ChannelResource"
        },
        "Deployments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DashboardItemResource"
            }
          }
        },
        "NextDeployments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "HasUnresolvedDefect": {
          "type": "boolean"
        },
        "ReleaseRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        }
      }
    },
    "ReleaseResource": {
      "required": [
        "Version"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Assembled": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        },
        "ProjectVariableSetSnapshotId": {
          "type": "string"
        },
        "LibraryVariableSetSnapshotIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectDeploymentProcessSnapshotId": {
          "type": "string"
        },
        "SelectedPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectedPackage"
          }
        },
        "Version": {
          "maxLength": 349,
          "minLength": 0,
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ReleaseTemplatePackage": {
      "type": "object",
      "properties": {
        "StepName": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "NuGetFeedName": {
          "type": "string"
        },
        "FeedName": {
          "type": "string"
        },
        "VersionSelectedLastRelease": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "IsResolvable": {
          "type": "boolean"
        }
      }
    },
    "ReleaseTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "LastReleaseVersion": {
          "type": "string"
        },
        "NextVersionIncrement": {
          "type": "string"
        },
        "VersioningPackageStepName": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTemplatePackage"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ReleaseUsage": {
      "type": "object",
      "properties": {
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsageEntry"
          }
        }
      }
    },
    "ReleaseUsageEntry": {
      "type": "object",
      "properties": {
        "ReleaseId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        }
      }
    },
    "ReportDeploymentCountOverTimeResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ReportData": {
          "$ref": "#/definitions/NumericReportData"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[AccountResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ActionTemplateResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ApiKeyResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiKeyResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ArtifactResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[CertificateConfigurationResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateConfigurationResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[CertificateResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ChannelResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[CommunityActionTemplateResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommunityActionTemplateResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ConfigurationSectionMetadata]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationSectionMetadata"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[DefectResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefectResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[DeploymentProcessResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentProcessResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[DeploymentResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[EnvironmentResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[FeedResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeedResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[InterruptionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterruptionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[LibraryVariableSetResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[LifecycleResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifecycleResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[MachinePolicyResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachinePolicyResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[MachineResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[OctopusServerNodeResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OctopusServerNodeResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[PackageDescriptionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageDescriptionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[PackageResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[PackageVersionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageVersionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProjectGroupResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectGroupResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProjectResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProjectTriggerResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectTriggerResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProxyResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProxyResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ReleaseResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[SubscriptionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TagSetResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagSetResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TaskResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TeamResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TenantResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TenantResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[UserResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[UserRoleResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RetentionPeriod": {
      "type": "object",
      "properties": {
        "Unit": {
          "format": "int32",
          "enum": [
            "Days",
            "Items"
          ],
          "type": "integer",
          "readOnly": true
        },
        "QuantityToKeep": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "ShouldKeepForever": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "RootResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Application": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "ApiVersion": {
          "type": "string"
        },
        "InstallationId": {
          "format": "uuid",
          "type": "string"
        },
        "IsEarlyAccessProgram": {
          "default": false,
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ScheduledTaskDetailsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ActivityLog": {
          "$ref": "#/definitions/ActivityLogTreeNode"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SelectedPackage": {
      "type": "object",
      "properties": {
        "StepName": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "SensitiveValue": {
      "type": "object",
      "properties": {
        "HasValue": {
          "type": "boolean"
        },
        "NewValue": {
          "type": "string"
        }
      }
    },
    "ServerConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ServerUri": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServerConfigurationSettingsResource": {
      "type": "object",
      "properties": {
        "ConfigurationSet": {
          "type": "string"
        },
        "ConfigurationValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServerConfigurationValueResource"
          }
        }
      }
    },
    "ServerConfigurationValueResource": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "ServerTimezoneResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "IsLocal": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SpaceImportResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageVersion": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "IsEncryptedPackage": {
          "type": "boolean"
        },
        "IsDryRun": {
          "type": "boolean"
        },
        "OverwriteExisting": {
          "type": "boolean"
        },
        "DeletePackageOnCompletion": {
          "type": "boolean"
        },
        "SuccessCallbackUri": {
          "type": "string"
        },
        "FailureCallbackUri": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SpacePartialExportResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageVersion": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "Projects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IgnoreCertificates": {
          "type": "boolean"
        },
        "IgnoreMachines": {
          "type": "boolean"
        },
        "IgnoreDeployments": {
          "type": "boolean"
        },
        "IgnoreTenants": {
          "type": "boolean"
        },
        "IncludeTaskLogs": {
          "type": "boolean"
        },
        "EncryptPackage": {
          "type": "boolean"
        },
        "DestinationApiKey": {
          "type": "string"
        },
        "DestinationPackageFeed": {
          "type": "string"
        },
        "SuccessCallbackUri": {
          "type": "string"
        },
        "FailureCallbackUri": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "StepUsage": {
      "type": "object",
      "properties": {
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsageEntry"
          }
        }
      }
    },
    "StepUsageEntry": {
      "type": "object",
      "properties": {
        "StepName": {
          "type": "string"
        },
        "StepId": {
          "type": "string"
        }
      }
    },
    "SubscriptionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            "Event"
          ],
          "type": "integer"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "EventNotificationSubscription": {
          "$ref": "#/definitions/EventNotificationSubscription"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TagResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CanonicalTagName": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TagSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TargetUsageEntry": {
      "type": "object",
      "properties": {
        "TargetName": {
          "type": "string"
        },
        "TargetId": {
          "type": "string"
        }
      }
    },
    "TaskDetailsServerResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Task": {
          "$ref": "#/definitions/TaskResource"
        },
        "ActivityLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogTreeNode"
          }
        },
        "PhysicalLogSize": {
          "format": "int64",
          "type": "integer"
        },
        "Progress": {
          "$ref": "#/definitions/TaskProgress"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskProgress": {
      "type": "object",
      "properties": {
        "ProgressPercentage": {
          "format": "int32",
          "type": "integer"
        },
        "EstimatedTimeRemaining": {
          "type": "string"
        }
      }
    },
    "TaskResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "State": {
          "format": "int32",
          "enum": [
            "Queued",
            "Executing",
            "Failed",
            "Canceled",
            "TimedOut",
            "Success",
            "Cancelling"
          ],
          "type": "integer"
        },
        "Completed": {
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string"
        },
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "ServerNode": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "HasBeenPickedUpByProcessor": {
          "type": "boolean"
        },
        "IsCompleted": {
          "type": "boolean",
          "readOnly": true
        },
        "FinishedSuccessfully": {
          "type": "boolean",
          "readOnly": true
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "CanRerun": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TeamResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "MemberUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExternalSecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedReferenceItem"
          }
        },
        "UserRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CanBeDeleted": {
          "type": "boolean"
        },
        "CanBeRenamed": {
          "type": "boolean"
        },
        "CanChangeRoles": {
          "type": "boolean"
        },
        "CanChangeMembers": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TenantResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectEnvironments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TenantVariableResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "TenantName": {
          "type": "string"
        },
        "ProjectVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Project"
          }
        },
        "LibraryVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Library"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TriggerActionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ActionType": {
          "format": "int32",
          "enum": [
            "AutoDeploy"
          ],
          "type": "integer",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TriggerFilterResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "FilterType": {
          "format": "int32",
          "enum": [
            "MachineFilter"
          ],
          "type": "integer",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TypeMetadata": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyMetadata"
          }
        }
      }
    },
    "UserAuthenticationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AuthenticationProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationProviderElement"
          }
        },
        "CanCurrentUserEditIdentitiesForUser": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserPermissionRestriction": {
      "type": "object",
      "properties": {
        "RestrictedToProjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToEnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToTenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToProjectGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserPermissionSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Permissions": {
          "type": "object",
          "properties": {
            "None": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AdministerSystem": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProcessView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProcessEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableEditUnscoped": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableViewUnscoped": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DefectReport": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DefectResolve": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "FeedView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EventView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserInvite": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserRoleView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserRoleEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskViewLog": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskCancel": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionSubmit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionViewSubmitResponsible": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedPush": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedAdminister": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedDownload": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AuditView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateExportPrivateKey": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ConfigureServer": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "FeedEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            }
          }
        },
        "Teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectedTeamReferenceDataItem"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserResource": {
      "required": [
        "DisplayName"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Username": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "DisplayName": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "IsService": {
          "type": "boolean"
        },
        "EmailAddress": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "CanPasswordBeEdited": {
          "type": "boolean"
        },
        "IsRequestor": {
          "type": "boolean"
        },
        "Password": {
          "type": "string"
        },
        "Identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserRoleResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SupportedRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PermissionDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "GrantedPermissions": {
          "type": "array",
          "items": {
            "format": "int32",
            "enum": [
              "None",
              "AdministerSystem",
              "ProjectEdit",
              "ProjectView",
              "ProjectCreate",
              "ProjectDelete",
              "ProcessView",
              "ProcessEdit",
              "VariableEdit",
              "VariableEditUnscoped",
              "VariableView",
              "VariableViewUnscoped",
              "ReleaseCreate",
              "ReleaseView",
              "ReleaseEdit",
              "ReleaseDelete",
              "DefectReport",
              "DefectResolve",
              "DeploymentCreate",
              "DeploymentDelete",
              "DeploymentView",
              "EnvironmentView",
              "EnvironmentCreate",
              "EnvironmentEdit",
              "EnvironmentDelete",
              "MachineCreate",
              "MachineEdit",
              "MachineView",
              "MachineDelete",
              "ArtifactView",
              "ArtifactCreate",
              "ArtifactEdit",
              "ArtifactDelete",
              "FeedView",
              "EventView",
              "LibraryVariableSetView",
              "LibraryVariableSetCreate",
              "LibraryVariableSetEdit",
              "LibraryVariableSetDelete",
              "ProjectGroupView",
              "ProjectGroupCreate",
              "ProjectGroupEdit",
              "ProjectGroupDelete",
              "TeamCreate",
              "TeamView",
              "TeamEdit",
              "TeamDelete",
              "UserView",
              "UserInvite",
              "UserRoleView",
              "UserRoleEdit",
              "TaskView",
              "TaskViewLog",
              "TaskCreate",
              "TaskCancel",
              "TaskEdit",
              "InterruptionView",
              "InterruptionSubmit",
              "InterruptionViewSubmitResponsible",
              "BuiltInFeedPush",
              "BuiltInFeedAdminister",
              "BuiltInFeedDownload",
              "ActionTemplateView",
              "ActionTemplateCreate",
              "ActionTemplateEdit",
              "ActionTemplateDelete",
              "LifecycleCreate",
              "LifecycleView",
              "LifecycleEdit",
              "LifecycleDelete",
              "AccountView",
              "AccountEdit",
              "AccountCreate",
              "AccountDelete",
              "AuditView",
              "TenantCreate",
              "TenantEdit",
              "TenantView",
              "TenantDelete",
              "TagSetCreate",
              "TagSetEdit",
              "TagSetDelete",
              "MachinePolicyCreate",
              "MachinePolicyView",
              "MachinePolicyEdit",
              "MachinePolicyDelete",
              "ProxyCreate",
              "ProxyView",
              "ProxyEdit",
              "ProxyDelete",
              "SubscriptionCreate",
              "SubscriptionView",
              "SubscriptionEdit",
              "SubscriptionDelete",
              "TriggerCreate",
              "TriggerView",
              "TriggerEdit",
              "TriggerDelete",
              "CertificateView",
              "CertificateCreate",
              "CertificateEdit",
              "CertificateDelete",
              "CertificateExportPrivateKey",
              "UserEdit",
              "ConfigureServer",
              "FeedEdit"
            ],
            "type": "integer"
          }
        },
        "CanBeDeleted": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VariablePromptOptions": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Required": {
          "type": "boolean"
        }
      }
    },
    "VariableResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Scope": {
          "type": "object",
          "properties": {
            "Project": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Environment": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Machine": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Role": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "TargetRole": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Action": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "User": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Private": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Channel": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "TenantTag": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Tenant": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "IsEditable": {
          "type": "boolean"
        },
        "Prompt": {
          "$ref": "#/definitions/VariablePromptOptions"
        },
        "Type": {
          "format": "int32",
          "enum": [
            "String",
            "Sensitive",
            "Certificate",
            "AmazonWebServicesAccount"
          ],
          "type": "integer"
        },
        "IsSensitive": {
          "type": "boolean"
        }
      }
    },
    "VariableScopeValues": {
      "type": "object",
      "properties": {
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        }
      }
    },
    "VariableSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OwnerId": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "Variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableResource"
          }
        },
        "ScopeValues": {
          "$ref": "#/definitions/VariableScopeValues"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VariablesScopedToEnvironmentResponse": {
      "type": "object",
      "properties": {
        "HasUnauthorizedProjectVariables": {
          "type": "boolean"
        },
        "HasUnauthorizedLibraryVariableSetVariables": {
          "type": "boolean"
        },
        "VariableMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      }
    },
    "VersioningStrategyResource": {
      "type": "object",
      "properties": {
        "DonorPackageStepId": {
          "type": "string"
        },
        "Template": {
          "type": "string"
        }
      }
    },
    "X509Certificate": {
      "type": "object",
      "properties": {
        "SubjectDistinguishedName": {
          "type": "string"
        },
        "IssuerDistinguishedName": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "NotAfter": {
          "format": "date-time",
          "type": "string"
        },
        "NotBefore": {
          "format": "date-time",
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "SerialNumber": {
          "type": "string"
        },
        "SignatureAlgorithmName": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "name": "X-Octopus-ApiKey",
      "in": "header",
      "type": "apiKey"
    },
    "APIKeyQuery": {
      "name": "ApiKey",
      "in": "query",
      "type": "apiKey"
    },
    "NugetApiKeyHeader": {
      "name": "X-NuGet-ApiKey",
      "in": "header",
      "type": "apiKey"
    }
  },
  "externalDocs": {
    "description": "Further API Documentation",
    "url": "https://g.octopushq.com/ApiDocs"
  }
}